/*
 * File: app/controller/WinAddRowController.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('V_ALTMT_ITEM_TOT_HSPF.controller.WinAddRowController', {
    extend: 'Ext.app.Controller',

    control: {
        "#addRowBtn": {
            click: 'addRowBtnClick'
        },
        "#addRowBtn1": {
            click: 'addRowBtn1Click'
        },
        "#addRowBtn2": {
            click: 'addRowBtn2Click'
        }
    },

    addRowBtnClick: function(button, e, eOpts) {
        var store = Ext.getStore('MyStore');
        var count = store.getCount();
        var rowCount = Number(Ext.getCmp('rowCount').getValue());

        for(var i=0; i<rowCount; i++) {
        	count = count + 1;
        	var rec = Ext.create('V_ALTMT_ITEM_TOT_HSPF.model.MyModel', {
        		V_TYPE : 'I',
        		ITEM_CD : Ext.getCmp('V_ITEM_CD'),
        	});
        	store.insert(count-1, rec);
        }

        var win = Ext.WindowManager.getActive();
        if(win){
             win.close();
        }
    },
    
    addRowBtn1Click: function(button, e, eOpts) {
        var store = Ext.getStore('MyStore1');
        var count = store.getCount();
        var rowCount = Number(Ext.getCmp('rowCount').getValue());
        var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection()[0];
        
        if(!!gridRecord){
        	for(var i=0; i<rowCount; i++) {
            	count = count + 1;
            	var rec = Ext.create('V_ALTMT_ITEM_TOT_HSPF.model.MyModel', {
            		V_TYPE : 'I',
            		BS_YEAR : gridRecord.get('BS_YEAR'),
            		ITEM_CD : gridRecord.get('ITEM_CD'),
            	});
            	store.insert(count-1, rec);
            }
        }
        
        var win = Ext.WindowManager.getActive();
        if(win){
             win.close();
        }
        
        if(!!!gridRecord) Ext.Msg.alert('확인', '선택된 품목이 없습니다.');
    },
    
    addRowBtn2Click: function(button, e, eOpts) {
        var store = Ext.getStore('MyStore2');
        var count = store.getCount();
        var rowCount = Number(Ext.getCmp('rowCount').getValue());
        var gridRecord = Ext.getCmp('myGrid1').getSelectionModel().getSelection()[0];
        
        if(!!gridRecord){
        	for(var i=0; i<rowCount; i++) {
            	count = count + 1;
            	var rec = Ext.create('V_ALTMT_ITEM_TOT_HSPF.model.MyModel', {
            		V_TYPE : 'I',
            		BS_YEAR : gridRecord.get('BS_YEAR'),
            		ITEM_CD : gridRecord.get('ITEM_CD'),
            		SEQ : gridRecord.get('SEQ'),
            	});
            	store.insert(count-1, rec);
            }
        }

        var win = Ext.WindowManager.getActive();
        if(win){
             win.close();
        }
        
        if(!!!gridRecord) Ext.Msg.alert('확인', '선택된 대체품이 없습니다.');
    }

});
