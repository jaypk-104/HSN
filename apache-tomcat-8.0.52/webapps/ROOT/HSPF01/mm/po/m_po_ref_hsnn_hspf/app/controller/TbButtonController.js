/*
 * File: app/controller/TbButtonController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('M_PO_REF_HSNN_HSPF.controller.TbButtonController', {
    extend: 'Ext.app.Controller',

    stores: [
        'MyStore'
    ],

    control: {
        "#selBtn": {
            click: 'selBtnClick'
        },
        "#orderBtn": {
            click: 'orderBtnClick'
        },
        "#delBtn": {
            click: 'delBtnClick'
        },
        "#clsBtn": {
            click: 'clsBtnClick'
        },
        "#poBtn": {
            click: 'poBtnClick'
        },
        "mysearchform textfield[name=search_field]": {
            specialkey: 'tfEnter'
        }
    },

    selBtnClick: function(button, e, eOpts) {
        //alert('select');
        var store = this.getMyStoreStore();

        store.removeAll();
        store.load({
            params: {
                V_TYPE: 'S',
                u_na_dt_to : Ext.getCmp('u_na_dt_to').getValue(),
                u_na_dt_from : Ext.getCmp('u_na_dt_from').getValue(),
                u_dt_to : Ext.getCmp('u_dt_to').getValue(),
                u_dt_from : Ext.getCmp('u_dt_from').getValue(),
                u_po_no : Ext.getCmp('u_po_no').getValue(),
                poradio: Ext.ComponentQuery.query('[name=poradio]')[0].getGroupValue(), //라디오버튼
                V_chk_AA: Ext.getCmp('chk_AA').getValue(),
                V_chk_AU: Ext.getCmp('chk_AU').getValue(),
                V_chk_AM: Ext.getCmp('chk_AM').getValue(),
                V_chk_TN: Ext.getCmp('chk_TN').getValue(),

            },
            callback: function(records,operations,success){
            }
        });
    },

    orderBtnClick: function(button, e, eOpts) {

        var store = this.getMyStoreStore();
        var gridObj = Ext.getCmp('myGrid');
            	var gridRecord = gridObj.getSelectionModel().getSelection();
            	var flag = '';
            	var msg = '';

            	for(var i = 0; i < gridRecord.length; i++){
            		var poNo = gridRecord[i].data['PO_NO'];
            		var poSeq = gridRecord[i].data['PO_SEQ'];
            		if( (i+1 < gridRecord.length) && (gridRecord[i].data['M_BP_CD'] != gridRecord[i+1].data['M_BP_CD'])) {
            			flag = 'N';
            			msg = '동일한 매입처를 선택하세요.';
            			break;
            		} 
            		else if(gridRecord[i].data['ITEM_CD'] == null || gridRecord[i].data['ITEM_CD'] == undefined ) {
            			flag = 'N';
            			msg = '본사 품목코드를 등록하세요.';
            			break;
            	    }
            	    else if ((gridRecord[i].data['BP_ITEM_CD']==null) || (gridRecord[i].data['BP_ITEM_CD']==undefined)) {
            	    	flag = 'N';
            			msg = '해외법인 품목코드를 등록하세요.';
            	    	break;
            	    }
            	    else if ((gridRecord[i].data['M_BP_CD']==null) || (gridRecord[i].data['M_BP_CD']==undefined)) {
            	    	flag = 'N';
            	    	msg = '품목코드에 대한 매입처를 등록하세요.<br>발주번호: '+gridRecord[i].data['PO_NO']+'<br>발주순번: '+gridRecord[i].data['PO_SEQ'];
            	    	break;
            	    }
            	    else if ( gridRecord[i].data['PO_YN'] == 'Y'){
            	    	flag = 'N';
            	    	msg = '이미 발주생성 된 데이터입니다.';
            	    	break;
            	    }
            	    else {
            	    	flag = 'Y';
            	    	gridRecord[i].set('V_TYPE', 'I');
            	    }
            	}

            	if(flag == 'Y') {
            		store.sync({
                		params: {
                			V_TYPE: 'SYNC',
                			V_USR_ID: parent.Ext.getCmp('GUSER_ID').getValue()
                		},
                		callback: function(){
                			store.reload();
                		}
                	});
            	} else {
            		Ext.Msg.alert('확인', msg);
            	}
    },

    delBtnClick: function(button, e, eOpts) {


        	var store=this.getMyStoreStore();
            	var gridObj = Ext.getCmp('myGrid');
            	var gridRecord = gridObj.getSelectionModel().getSelection();
            	Ext.MessageBox.confirm('확인', '주문을 삭제하시겠습니까?', function(btn) {
            		if(btn == 'yes') {

            	    	store.sync({
            	    		params: {
            	    			V_TYPE: 'R',
            	    			V_USR_ID: parent.Ext.getCmp('GUSER_ID').getValue()
            	    		},
            	    		callback: function(batch, options){
            	    			store.reload();
            	    		},
            	    	});
            		}
            	})
    },

    clsBtnClick: function(button, e, eOpts) {
        var store = this.getMyStoreStore();

                	var gridObj = Ext.getCmp('myGrid');
                    var gridRecord = gridObj.getSelectionModel().getSelection();//??
                	var flag = 'Y';
                	var msg = '';

                	console.log("gridLength : " + gridRecord.length);

                	for(var i = 0; i < gridRecord.length; i++){
                		var poCfm = gridRecord[i].data['PO_CFM'];
                		if(poCfm == "Y" ) {
                			flag = 'N';
                			msg = '발주가 확정된건 건이 포함되어 접수취소가 불가합니다.';
                     		Ext.Msg.alert('확인', msg);

                			break;


                    		if(gridRecord[i].data['V_TYPE']=='V') {
                                gridRecord[i].data['V_TYPE'] = 'D';
                    		}


                	    }

                		if(flag == 'Y'){

                		console.log("pocfm : " + poCfm);
                    	store.sync({
                    		params: {
                    			V_TYPE: 'D',
                    			V_USR_ID: parent.Ext.getCmp('GUSER_ID').getValue()
                    		},
                    		callback: function(batch, options){
                    			store.reload();
                    		},
                    	});
                		}
                		 else {
                			console.log('sfsdfsfsd');
                     		Ext.Msg.alert('확인', msg);
                     	}
                	}
    },

    poBtnClick: function(button, e, eOpts) {
        // var tab=parent.Ext.getCmp('myTab');
        // var activeTab=tab.getActiveTab();
        // var tabIndex=tab.items.indexOf(activeTab);
        // tab.remove(tabIndex,true);
        var store = this.getMyStoreStore();
        	var gridObj = Ext.getCmp('myGrid');
            	var gridRecord = gridObj.getSelectionModel().getSelection();

            	store.sync({
            		params: {
            			V_TYPE: 'D',
            			V_USR_ID: parent.Ext.getCmp('GUSER_ID').getValue()
            		},
            		callback: function(batch, options){
            			store.reload();
            		},
            	});
    },

    tfEnter: function(field, e, eOpts) {
        	if (e.getKey() == e.ENTER) {
        		this.selBtnClick();
        	}
    }

});
