/*
 * File: app/controller/MyGridController.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SCM_DLVY_HSPF.controller.MyGridController', {
	extend : 'Ext.app.Controller',

	stores : [ 'MyStore', 'MyStore1' ],

	control : {
		"#gridAddBtn" : {
			click : 'gridAddBtnClick'
		},
		"#gridDelBtn" : {
			click : 'gridDelBtnClick'
		},
		"#gridSaveBtn" : {
			click : 'gridSaveBtnClick'
		},
		"#xlsxDown" : {
			click : 'xlsxDownClick'
		},
		"#myGrid" : {
			cellclick : 'myGridCellClick'
		}
	},

	/* 납기현황등록 상단 그리드 */
	/* MyStore : [ USP_SCM_DLVY_HSPF_H ] */
	/* MyStore1 : [ USP_SCM_DLVY_HSPF_H ] */

	// [+]버튼
	gridAddBtnClick : function(button, e, eOpts) {
		// var popup = Ext.create("B_COMP_HSPF.view.WinAddRow");
		// popup.show();
		// Ext.getCmp('rowCount').setValue(1);
	},

	// [-]버튼
	gridDelBtnClick : function(button, e, eOpts) {
		var store = Ext.getStore('MyStore');
		var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();

		if (gridRecord.length > 0) {
			Ext.Msg.confirm('확인', '삭제하시겠습니까?', function(button) {
				if (button == 'yes') {
					for (var i = 0; i < gridRecord.length; i++) {
						if (gridRecord[i].data['V_TYPE'] == 'V') {
							gridRecord[i].data.set('V_TYPE', 'D');
						}
					}
					store.sync({
						params : {
							V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
						},
						callback : function(records, operation, success) {
							store.reload();
						}
					});
				}
			});
		}
	},
	// [저장]버튼
	gridSaveBtnClick : function(button, e, eOpts) {
		var store = Ext.getStore('MyStore');
		var store1 = Ext.getStore('MyStore1');
		var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
		var flag;
		var msg;
		var today = new Date();
		var DLVY_AVL_DT;
		
		function getFormatDate(date){
			date = new Date(date);
    		var year = date.getFullYear();                                
    		var month = (1 + date.getMonth());                     
    		month = month >= 10 ? month : '0' + month;     
    		var day = date.getDate();                      
    		day = day >= 10 ? day : '0' + day;             
    		return  year + '' + month + '' + day;
    	}
		
		if (gridRecord.length > 0) {
			
			for (var i = 0; i < gridRecord.length; i++) {
				if (gridRecord[i].data['CLS_YN'] == 'Y') {
					flag = 'F';
					msg = '이미 마감된 발주입니다.';
					break;
				} 
				else if (gridRecord[i].data['DLVY_AVL_QTY'] == 0) {
					flag = 'F';
					msg = '납품가능수량을 입력하세요.';
					break;
				} 
				else if (gridRecord[i].data['DLVY_AVL_DT'] == undefined) {
					flag = 'F';
					msg = '납품가능일을 입력하세요.';
					break;
				} 
				else if ((i >= 1) && (DLVY_AVL_DT != getFormatDate(gridRecord[i].data['DLVY_AVL_DT']))) {
					flag = 'F';
					msg = '다수의 발주에 대한 ASN 생성은 납품가능일이 동일해야 합니다.';
					break;
				} 
				else {
					flag = 'T';
					gridRecord[i].set('V_TYPE', 'I');
				}
				DLVY_AVL_DT = getFormatDate(gridRecord[i].data['DLVY_AVL_DT']);
			}
			
			if(flag == 'T') {
				
				Ext.Msg.confirm('확인', 'ASN등록하시겠습니까?  <br>   총 [ '+ gridRecord.length + ' ] 건<br>납품가능일 : ' + Ext.util.Format.date(gridRecord[0].data['DLVY_AVL_DT'], 'Y-m-d'), function(button) {
					if (button == 'yes') {
						var grid = Ext.getCmp('myGrid');
						store.sync({
							params : {
								V_TYPE: 'SYNC',
								V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
								V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
							},
							callback : function(records, operation, success) {
								Ext.toast({
									title : ' ',
									timeout : 1000,
									html : '저장완료',
									style : 'text-align: center',
									align : 't',
									width : 130,
								});
								
								store.reload();
								
							}
						});
					}
				});
			} 
			else {
				Ext.Msg.alert('확인', msg);
			}
		} else {
			Ext.Msg.alert('확인', '저장할 내역을 선택하세요.');
		}
	},

	// [엑셀]버튼
	xlsxDownClick : function(button, e, eOpts) {
		var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d His');
		var grid = Ext.getCmp('myGrid');
		grid.saveDocumentAs({
			type : 'xlsx',
			title : '납기현황등록', // 엑셀내타이틀
			fileName : currentDate + '.xlsx' // 엑셀파일이름
		});
	},

	// 상단헤더 셀 클릭시 하단디테일 조회
	myGridCellClick : function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
		var store1 = this.getMyStore1Store();
		
		if (record.get('ASN_STS') != null) { //바코드 생성 된 내역만 하단 디테일 조회
			var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
			var V_PO_NO = gridRecord[0].data['PO_NO'];
			var V_PO_SEQ = gridRecord[0].data['PO_SEQ'];
			
			store1.removeAll();
			store1.load({
				params : {
					V_TYPE : 'DS',
					V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
					V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
					V_PO_NO : gridRecord[0].data['PO_NO'],
					V_PO_SEQ : gridRecord[0].data['PO_SEQ'],
					V_ASN_NO : gridRecord[0].data['ASN_NO']
				},
				callback : function(records, operations, success) {
					store1.each(function(record, idx) {
						if(records[idx].data.PO_NO == V_PO_NO && records[idx].data.PO_SEQ == V_PO_SEQ) {
							var selModel = Ext.getCmp('myGrid1').getSelectionModel();
		            		selModel.select(records[idx], true);
						}
					});
				}
			})
		} else {
			store1.removeAll();
		}
	}
});
