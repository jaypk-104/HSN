/*
 * File: app/controller/MyGridController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('M_SL_TRANS_DISTR.controller.MyGridController', {
    extend: 'Ext.app.Controller',

    control: {
        "#gridAddBtn": {
            click: 'gridAddBtnClick'
        },
        "#gridDelBtn": {
            click: 'gridDelBtnClick'
        },
        "#xlsxDown": {
            click: 'xlsxDownClick'
        },
        "#tempGlCfmBtn" : {
			click : 'tempGlCfmBtnClick'
		},
		"#tempGlCancelBtn" : {
			click : 'tempGlCancelBtnClick'
		},
     
    },

    gridAddBtnClick: function(button, e, eOpts) {
        //var popup = Ext.create("B_COMP_HSPF.view.WinAddRow");
        //popup.show();
        //Ext.getCmp('rowCount').setValue(1);
    },

    gridDelBtnClick: function(button, e, eOpts) {},

    xlsxDownClick: function(button, e, eOpts) {
        var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d His');
            	var grid = Ext.getCmp('myGrid');
            	grid.saveDocumentAs({
                    type: 'xlsx',
                    title: '이고료등록', //엑셀내타이틀
                    fileName: currentDate+'.xlsx' //엑셀파일이름
        		});
    },
    
    tempGlCfmBtnClick : function(button, e, eOpts) {
		var store = Ext.getStore('MyStore');
		var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
		var flag = 'T';
		var msg = '';
		
		var selModel = Ext.getCmp('myGrid').getSelectionModel();
		
		for(var i = 0 ; i < gridRecord.length ; i ++){
			if(gridRecord[0].data['TEMP_GL_NO'] != '' && gridRecord[0].data['TEMP_GL_NO'] != null && gridRecord[0].data['TEMP_GL_NO'] != undefined){
				flag = 'F';
				msg = '이미 전표가 생성된 데이터가 있습니다.';
			}
				
		}
		if(flag == 'T'){
		
			Ext.Msg.confirm('확인', '전표를 생성하시겠습니까?', function(button) {
				if (button == 'yes') {
					
					var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
					
					store.sync({
    					params: {
    						V_TAB_TYPE: 'T1',
    						V_TYPE: 'ERP',
    						U_TYPE: 'I',
    						V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
							V_USR_ID : parent.Ext.getCmp('GEMP_NO').getValue(),
    					},
    					callback: function(records, operation, success) {
    						var response = records.operations[0]._response.responseText;
    						
    						try{
	    						var jsonResult = Ext.JSON.decode(response);
	    						
	    						var tryCnt = jsonResult.tryCnt;
	    						var finCnt = jsonResult.finCnt;
	    						var resMSG = jsonResult.resMSG;
	    						var resDATE = jsonResult.resDATE;
	    						var resString = jsonResult.resString;
	    						
	    						store.reload();
	    						if(resMSG == 'SUCCESS') {
	    							
	    							Ext.toast({
										title : ' ',
										timeout : 1000,
										html : '전표생성완료',
										style : 'text-align: center',
										align : 't',
										width : 130,
									});
	    						} else {
	    							Ext.Msg.alert('확인', '전표생성실패<br>' + resString);
	    						}
    						}
    						catch (e){
    							Ext.Msg.alert('확인', '전표생성실패<br>' + response.responseText);
    						}
    					}
    				});
				}
			});
		}
		else{
			Ext.Msg.alert('확인', msg);
		}
	},
	
	tempGlCancelBtnClick : function(button, e, eOpts) {
		var store = Ext.getStore('MyStore');
		var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
		var flag = 'T';
		var msg = '';
		
		
		for(var i = 0 ; i < gridRecord.length ; i ++){
			if(gridRecord[0].data['TEMP_GL_NO'] == '' || gridRecord[0].data['TEMP_GL_NO'] == null || gridRecord[0].data['TEMP_GL_NO'] == undefined){
				flag = 'F';
				msg = '전표가 생성된 데이터만 선택해주세요.';
			}
				
		}
		if(flag == 'T'){
			
			Ext.Msg.confirm('확인', '전표를 취소하시겠습니까?', function(button) {
				if (button == 'yes') {
					
					var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
					
					store.sync({
    					params: {
    						V_TAB_TYPE: 'T1',
    						V_TYPE: 'ERP',
    						U_TYPE: 'D',
    						V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
							V_USR_ID : parent.Ext.getCmp('GEMP_NO').getValue(),
    					},
    					callback: function(records, operation, success) {

    						var response = records.operations[0]._response.responseText;
    						var jsonResult = Ext.JSON.decode(response);
    						
    						var tryCnt = jsonResult.tryCnt;
    						var finCnt = jsonResult.finCnt;
    						var resMSG = jsonResult.resMSG;
    						var resDATE = jsonResult.resDATE;
    						var resString = jsonResult.resString;
    						
    						store.reload();
    						if(resMSG == 'SUCCESS') {
    							
    							Ext.toast({
									title : ' ',
									timeout : 1000,
									html : '전표취소완료',
									style : 'text-align: center',
									align : 't',
									width : 130,
								});
    						} else {
    							Ext.Msg.alert('확인', '전표취소실패<br>' + resString);
    						}
						}
    				});
					
				}
			});
		}
		else{
			Ext.Msg.alert('확인', msg);
		}
	},
    
});
