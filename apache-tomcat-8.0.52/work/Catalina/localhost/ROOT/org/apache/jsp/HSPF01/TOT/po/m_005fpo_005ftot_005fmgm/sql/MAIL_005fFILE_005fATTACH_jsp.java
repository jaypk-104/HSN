/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.52
 * Generated at: 2021-02-05 04:35:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.HSPF01.TOT.po.m_005fpo_005ftot_005fmgm.sql;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.internet.MimeUtility;
import org.json.simple.JSONArray;
import org.json.simple.JSONValue;
import net.sf.json.JSONObject;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URLDecoder;
import java.util.HashMap;
import org.apache.commons.lang.StringUtils;
import java.sql.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMultipart;
import javax.mail.BodyPart;
import javax.mail.Multipart;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.file.Path;
import java.io.*;
import org.apache.commons.fileupload.FileItem;

public final class MAIL_005fFILE_005fATTACH_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/HSPF01/common/DB_Connection.jsp", Long.valueOf(1551915626000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("javax.mail.Message");
    _jspx_imports_classes.add("java.net.HttpURLConnection");
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("javax.mail.internet.MimeUtility");
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("javax.mail.internet.MimeBodyPart");
    _jspx_imports_classes.add("java.net.URL");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("javax.mail.Multipart");
    _jspx_imports_classes.add("javax.naming.NamingException");
    _jspx_imports_classes.add("javax.activation.DataHandler");
    _jspx_imports_classes.add("org.json.simple.JSONArray");
    _jspx_imports_classes.add("javax.mail.BodyPart");
    _jspx_imports_classes.add("javax.mail.internet.InternetAddress");
    _jspx_imports_classes.add("org.json.simple.JSONValue");
    _jspx_imports_classes.add("javax.activation.FileDataSource");
    _jspx_imports_classes.add("javax.sql.DataSource");
    _jspx_imports_classes.add("javax.naming.Context");
    _jspx_imports_classes.add("java.nio.file.Path");
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("javax.naming.InitialContext");
    _jspx_imports_classes.add("javax.mail.internet.MimeMultipart");
    _jspx_imports_classes.add("java.util.Properties");
    _jspx_imports_classes.add("javax.mail.Transport");
    _jspx_imports_classes.add("java.nio.file.Files");
    _jspx_imports_classes.add("java.io.StringWriter");
    _jspx_imports_classes.add("org.apache.commons.fileupload.FileItem");
    _jspx_imports_classes.add("javax.mail.internet.MimeMessage");
    _jspx_imports_classes.add("java.io.InputStreamReader");
    _jspx_imports_classes.add("java.nio.file.Paths");
    _jspx_imports_classes.add("net.sf.json.JSONObject");
    _jspx_imports_classes.add("javax.mail.Session");
    _jspx_imports_classes.add("java.io.BufferedReader");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	Connection conn = null;
	PreparedStatement pstmt = null;
	Statement stmt = null;

	try {
		Context initCtx = new InitialContext();
		Context envCtx = (Context) initCtx.lookup("java:comp/env");
		DataSource dataSource = (DataSource) envCtx.lookup("jdbc/Tibero");
		conn = dataSource.getConnection();
		stmt = conn.createStatement();

	} catch (NamingException e) {

	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("utf-8");
	ResultSet rs = null;
	CallableStatement cs = null;
	CallableStatement cs2 = null;
	CallableStatement cs3 = null;
	JSONObject jsonObject = new JSONObject();
	JSONArray jsonArray = new JSONArray();
	JSONObject subObject = null;

	try {

		String V_URL = request.getParameter("V_URL");
		String V_MAST_PO_NO = request.getParameter("V_MAST_PO_NO");
		String V_EMAIL = "";
		System.out.println(V_URL);

		cs = conn.prepareCall("call USP_003_M_PO_TOT_MAST(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
		cs.setString(1, "MAIL");//V_COMP_ID
		cs.setString(2, "");//
		cs.setString(3, "");//V_PUR_NO
		cs.setString(4, "");//V_PUR_SEQ
		cs.setString(5, "");//V_PUR_DT_FR
		cs.setString(6, "");//V_PUR_DT_TO
		cs.setString(7, V_MAST_PO_NO);//V_PO_NO
		cs.setString(8, "");//V_M_BP_CD
		cs.setString(9, "");//V_M_BP_NM
		cs.setString(10, "");//V_PO_DT
		cs.setString(11, "");//V_PO_TYPE
		cs.setString(12, "");//V_IN_TERMS
		cs.setString(13, "");//V_PAY_METH
		cs.setString(14, "");//V_CUR
		cs.setString(15, "");//V_XCHG_RATE
		cs.setString(16, "");//V_REMARK
		cs.setString(17, "");//V_PO_USR_ID
		cs.setString(18, "");//V_COMM_NO
		cs.setString(19, "");//V_ITEM_CD
		cs.setString(20, "");//V_PO_CFM
		cs.setString(21, "");//V_SYS_TYPE
		cs.setString(22, "");//V_DLV_TYPE
		cs.setString(23, "");//V_GR_TYPE
		cs.setString(24, "");//V_VAT_TYPE
		cs.setString(25, "");//V_DN_DT_TO
		cs.registerOutParameter(26, com.tmax.tibero.TbTypes.CURSOR);
		cs.setString(27, "");//V_S_BP_CD
		cs.executeQuery();

		rs = (ResultSet) cs.getObject(26);

		while (rs.next()) {
			V_EMAIL = rs.getString("EMAIL");
		}
		
		System.out.println("V_EMAIL: " + V_EMAIL);

		long time = System.currentTimeMillis();
		SimpleDateFormat dayTime = new SimpleDateFormat("yyyy-MM-dd");
		SimpleDateFormat dayTime2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String today = dayTime.format(new Date(time));
		String now = dayTime2.format(new Date(time));

		BufferedReader b_in = null;

		URL obj = new URL(V_URL + "&reportMode=PDF&clientURIEncoding=UTF-8&reportParams=pdfserversave:true,savename:/data/apache/webapps/ROOT/aireport/tot_pdf/" + V_MAST_PO_NO); // 호출할 url 
		HttpURLConnection con = (HttpURLConnection) obj.openConnection();
		con.setRequestMethod("GET");
		b_in = new BufferedReader(new InputStreamReader(con.getInputStream(), "UTF-8"));

		System.out.println("url request");

		String line;

		while ((line = b_in.readLine()) != null) { // response를 차례대로 출력 
			System.out.println(line);
		}

		String savePath = "\\\\123.142.124.161\\data\\tot_pdf\\";
		String filename = V_MAST_PO_NO + ".pdf";

		InputStream in = null;
		OutputStream os = null;
		File file = null;
		boolean skip = false;
		String client = "";

		file = new File(savePath, filename);
		System.out.println("파일명: " + file.getName());

		String subject = "파일첨부테스트1_" + now;
		String body = "";

		body += "<SPAN style=\"FONT-SIZE: 14pt\">파일첨부테스트</SPAN>";
		body += "<DIV>&nbsp;</DIV>";

		int j = 1;

		String host = "123.142.124.146";
		int port = 25;

		final String username = "admin";
		final String password = "hsnadmin";

		Properties props = System.getProperties();
		props.put("mail.smtp.host", host);
		props.put("mail.smtp.port", port);
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.ssl.enable", "false");
		props.put("mail.smtp.ssl.trust", host);

		String recipient = V_EMAIL;
		System.out.println("*********************************");
		System.out.println("recipient" + recipient);
		System.out.println("now" + now);
		System.out.println("*********************************");

		Session session2 = Session.getInstance(props, new javax.mail.Authenticator() {
			String un = username;
			String pw = password;

			protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
				return new javax.mail.PasswordAuthentication(un, pw);
			}
		});
		session2.setDebug(true); //for debug

		MimeMessage message = new MimeMessage(session2);
		message.setFrom(new InternetAddress("admin@hsnetw.com"));
				
		InternetAddress[] address = { new InternetAddress(V_EMAIL) };
		message.setRecipients(Message.RecipientType.TO, address);
		message.setSubject(subject);
		

		MimeBodyPart mbp1 = new MimeBodyPart();
		mbp1.setText("test_한글111");

		MimeBodyPart mbp2 = new MimeBodyPart();
		// 		FileDataSource fds = new FileDataSource("\\\\123.142.124.161\\data\\tot_pdf\\TEST200305.pdf"); //파일 읽어오기
		FileDataSource fds = new FileDataSource("/data/tot_pdf/" + file.getName()); //파일 읽어오기
		mbp2.setDataHandler(new DataHandler(fds)); //파일 첨부
		mbp2.setFileName(fds.getName());

		message.setSubject(MimeUtility.encodeText(subject, "EUC-KR", "B"));
		message.setSubject(MimeUtility.encodeText(subject, "UTF-8", "B"));

		// 		message.setContent(content, "text/html; charset=UTF-8");
		// 		message.setContent(content, "text/html; charset=EUC-KR");

		Multipart mp = new MimeMultipart();
		mp.addBodyPart(mbp1);
		mp.addBodyPart(mbp2);

		message.setContent(mp);

		Transport.send(message);

	} catch (Exception e) {
		response.setContentType("text/plain; charset=UTF-8");
		PrintWriter pw = response.getWriter();
		pw.print(e.toString());
		pw.flush();
		pw.close();

		e.printStackTrace();
	} finally {
		if (cs != null)
			try {
				cs.close();
			} catch (SQLException ex) {
			}
		if (cs2 != null)
			try {
				cs2.close();
			} catch (SQLException ex) {
			}
		if (cs3 != null)
			try {
				cs3.close();
			} catch (SQLException ex) {
			}
		if (rs != null)
			try {
				rs.close();
			} catch (SQLException ex) {
			}
		if (stmt != null)
			try {
				stmt.close();
			} catch (SQLException ex) {
			}
		if (conn != null)
			try {
				conn.close();
			} catch (SQLException ex) {
			}
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
