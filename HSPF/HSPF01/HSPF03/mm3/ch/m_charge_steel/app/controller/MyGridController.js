/*
 * File: app/controller/MyGridController.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('M_CHARGE_STEEL.controller.MyGridController', {
    extend: 'Ext.app.Controller',

    control: {
        "#gridAddBtn": {
            click: 'gridAddBtnClick'
        },
        "#gridDelBtn": {
            click: 'gridDelBtnClick'
        },
        "#distrBtn": {
        	click: 'distrBtnClick'
        },
        "#xlsxDown": {
            click: 'xlsxDownClick'
        },
        "#myGrid" : {
        	celldblclick: 'myGridDblClick'
        },
        "#myGrid" : {
        	cellclick: 'myGridClick'
        },
		"#tempGlCfmBtn" : {
			click : 'tempGlCfmBtnClick'
		},
		"#tempGlCancelBtn" : {
			click : 'tempGlCancelBtnClick'
		},
    },

    gridAddBtnClick: function(button, e, eOpts) {
    	
    	if(Ext.getCmp('V_BAS_NO').getValue() != '') {
	        var popup = Ext.create("M_CHARGE_STEEL.view.WinAddRow");
	        popup.show();
	        Ext.getCmp('rowCount').setValue(1);
    	} else {
    		Ext.Msg.alert('확인', '발생근거번호를 입력하세요.');
    	}
    	
    },

    gridDelBtnClick: function(button, e, eOpts) {
        var store = Ext.getStore('MyStore');
    	var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
    	var sync_flag = '';
    	var flag = '';
    	
    	
    	for(i=0; i<gridRecord.length; i++) {
			if (gridRecord[i].get('V_TYPE') == 'V'){
				if(gridRecord[i].get('TEMP_GL_NO') != undefined ) {
					flag = 'F';
					msg = '이미 전표가 생성된 경비항목이 존재합니다.';
					break;
				} else {
					flag = 'T';
				}
			}
		}
    	
    	
    	if(gridRecord.length > 0) {
    		if(flag == 'T') {
    			Ext.Msg.confirm('확인','삭제하시겠습니까?', function(button){
    				if(button == 'yes') {
    					for(var i=0; i<gridRecord.length; i++) {
    						if(gridRecord[i].data['V_TYPE']=='V') {
    							if(gridRecord[i].phantom == true) {
    								store.remove(gridRecord[i]);
    							} else {
    								gridRecord[i].set('V_TYPE','D');
    								sync_flag = 'T';
    							}
    						}
    					}
    					
    					if(sync_flag == 'T') {
    						store.sync({
    							params: {
    								V_TYPE: 'SYNC',
    								V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
    								V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
    							},
    							callback: function(records, operation, success) {
    								store.reload();
    								
    							},
    							success: function() {
    								
    							}
    						});
    					}
    					
    					if(store.getCount() == 0) {
    						var tbController = M_CHARGE_STEEL.app.getController("TbButtonController");
    						tbController.clrBtnClick();
    					}
    				}
    				
    				
    			});
    		} else {
    			Ext.Msg.alert('확인', msg);
    		}
    	}
    },
    distrBtnClick: function(button, e, eOpts) {
        var store = Ext.getStore('MyStore');
		var selModel = Ext.getCmp('myGrid').getSelectionModel();
		selModel.selectAll();
		
		Ext.Msg.confirm('확인', '경비를 배부하시겠습니까?', function(button) {
		if (button == 'yes') {
			
			store.each(function(record, index) {
				record.set('V_TYPE', 'I');
			});
			
			store.sync({ 
				params : {
					V_TYPE : 'SYNC2',
					V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
					V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
					V_PR_STEP: Ext.getCmp('V_PR_STEP').getValue()
				},
				callback : function(records, operation, success) {
					var res = records.operations[0]._response.responseText;
					
					if(res.match('Exception')) {
						Ext.Msg.alert('확인', res);
					} else {
						var tbController = M_CHARGE_STEEL.app.getController("TbButtonController");
			    		tbController.selBtnClick();
					}
				}, 
				success: function(response) {
				}
			});
		}
	});
	},

    xlsxDownClick: function(button, e, eOpts) {
        var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d His');
            	var grid = Ext.getCmp('myGrid');
            	grid.saveDocumentAs({
                    type: 'xlsx',
                    title: 'test', //엑셀내타이틀
                    fileName: currentDate+'.xlsx' //엑셀파일이름
        		});
    },
    
    myGridDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
    	
    	//지급처코드
    	if(cellIndex == 12) {
    		var popup = Ext.create("Popup.view.WinBpPop");
			popup.show();
			
			Ext.getCmp('fieldType').setValue('M_BP_CD');
			var store = Ext.getStore('WinBpPopStore');
			store.removeAll();
    	}
    	
    	//세금계산서발행처
    	if(cellIndex == 14) {
    		var popup = Ext.create("Popup.view.WinBpPop");
    		popup.show();
    		
    		Ext.getCmp('fieldType').setValue('TAX_BP_CD');
    		var store = Ext.getStore('WinBpPopStore');
    		store.removeAll();
    	}
    	
    	//출금은행
    	if(cellIndex == 30) {
    		var popup = Ext.create("Popup.view.WinBankPop");
    		popup.show();
    		
    		var store = Ext.getStore('WinBankPopStore');
    		store.removeAll();
    	}
    },
    
    myGridClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
    	
    	var store1 = Ext.getStore('MyStore1');
    	if(record.get('CHARGE_NO') != undefined) {
    		store1.load({
    			params: {
    				V_TYPE: 'SD',
    				V_COMP_ID: parent.Ext.getCmp('GCOMP_ID').getValue(),
    				V_USR_ID: parent.Ext.getCmp('GUSER_ID').getValue(),
    				V_BAS_NO: Ext.getCmp('V_BAS_NO').getValue(),
    				V_CHARGE_NO: record.get('CHARGE_NO'),
    			},
    			callback: function(records,operations,success){
    			}
    		});
    	}
    },
    

	tempGlCfmBtnClick : function(button, e, eOpts) {
		var store = Ext.getStore('MyStore');
		var store1 = Ext.getStore('MyStore1');
		var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
		var gridRecord1 = Ext.getCmp('myGrid1').getSelectionModel().getSelection();
		var flag = '';
		var temp_gl_flag = '';
		var msg = '';
		
		
		if (Ext.getCmp('V_MAST_CHARGE_NO').getValue() == '' || Ext.getCmp('V_MAST_CHARGE_NO').getValue() == null) {
			flag = 'F';
			msg = '경비를 선택하세요.';
		} else if (store1.getCount() == 0) {
			flag = 'F';
			msg = '경비배부여부를 확인하세요.';
		} else {
			flag = 'T';	
		}
		
		for(i=0; i<gridRecord.length; i++) {
			if (gridRecord[i].get('V_TYPE') == 'V'){
				if(gridRecord[i].get('TEMP_GL_NO') != undefined ) {
					flag = 'F';
					msg = '이미 전표가 생성된 경비항목이 존재합니다.';
					break;
				} else if(gridRecord[i].get('V_TYPE') == 'V') {
					gridRecord[i].set('V_TYPE', 'I');
				}
			}
		}
		
		if (flag == 'T') {
			if(gridRecord.length > 0) {
				Ext.Msg.confirm('확인', '전표를 생성하시겠습니까?', function(button) {
					if (button == 'yes') {
						
						var myMask = new Ext.LoadMask(Ext.getCmp('myGrid') , {msg:"Please wait..."});
						myMask.show();
						
						store.sync({ 
							params : {
								V_TYPE : 'ERP',
								U_TYPE: 'I',
								V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
								V_USR_ID : parent.Ext.getCmp('GEMP_NO').getValue(),
								V_MAST_CHARGE_NO : Ext.getCmp('V_MAST_CHARGE_NO').getValue(),
								V_PR_STEP : Ext.getCmp('V_PR_STEP').getValue(),
							},
							callback : function(batch) {
								var tbController = M_CHARGE_STEEL.app.getController("TbButtonController");
								tbController.selBtnClick();
								myMask.hide();
								try{
									var jsonResult = Ext.JSON.decode(batch.operations[0]._response.responseText);
									var tryCnt = jsonResult.tryCnt;
									var finCnt = jsonResult.finCnt;
									var resMSG = jsonResult.resMSG;
									var resDATE = jsonResult.resDATE;
									var resString = jsonResult.resString;
									var TEMP_GL_NO = jsonResult.TEMP_GL_NO;
									
									if(resMSG == 'SUCCESS') {
										
										Ext.toast({
											title : ' ',
											timeout : 1000,
											html : '전표생성완료',
											style : 'text-align: center',
											align : 't',
											width : 130,
										});
									}
									else{
										Ext.Msg.alert('확인', '전표생성실패<br>' + resString);
									}
								}
								catch (e){
									myMask.hide();
									Ext.Msg.alert('확인', '전표생성실패<br>' + batch.operations[0]._response.responseText);
								}
								
							}, 
							success: function(response) {
							}
						});
						
					}
				});
			} else {
				Ext.Msg.alert('확인', '전표를 생성할 항목을 선택하세요')
			}
		} else {
			Ext.Msg.alert('확인', msg);
		}
		
	},
	tempGlCancelBtnClick : function(button, e, eOpts) {
		var store = Ext.getStore('MyStore');
		var store1 = Ext.getStore('MyStore1');
		var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
		var flag = '';
		var msg = '';
		
		if (Ext.getCmp('V_MAST_CHARGE_NO').getValue() == '' || Ext.getCmp('V_MAST_CHARGE_NO').getValue() == null) {
			flag = 'F';
			msg = '경비를 선택하세요.';
		} else {
			flag = 'T';
		}
		
		for(i=0; i<gridRecord.length; i++) {
			if (gridRecord[i].get('V_TYPE') == 'V'){
				if(gridRecord[i].get('TEMP_GL_NO') == undefined || gridRecord[i].get('TEMP_GL_NO') == '') {
					flag = 'F';
					msg = '취소할 전표가 없는 경비항목이 존재합니다.';
					break;
				} else if(gridRecord[i].get('V_TYPE') == 'V') {
					gridRecord[i].set('V_TYPE', 'D');
				}
			}
		}
		
		
		if (flag == 'T') {
			
			var selModel1 = Ext.getCmp('myGrid').getSelectionModel();
			if(gridRecord.length > 0) {
				Ext.Msg.confirm('확인', '전표를 취소하시겠습니까?', function(button) {
					if (button == 'yes') {
						var myMask = new Ext.LoadMask(Ext.getCmp('myGrid') , {msg:"Please wait..."});

						myMask.show();
						
						var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
						var gridRecord1 = Ext.getCmp('myGrid1').getSelectionModel().getSelection();

						store.sync({ 
							params : {
								V_TYPE : 'ERP',
								U_TYPE: 'D',
								V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
								V_USR_ID : parent.Ext.getCmp('GEMP_NO').getValue(),
								V_MAST_CHARGE_NO : Ext.getCmp('V_MAST_CHARGE_NO').getValue(),
							},
							callback : function(records, operation, success) {
								myMask.hide();
								
								var tbController = M_CHARGE_STEEL.app.getController("TbButtonController");
								tbController.selBtnClick();
								Ext.toast({
									title : ' ',
									timeout : 1000,
									html : '전표취소완료',
									style : 'text-align: center',
									align : 't',
									width : 130,
								});
							}, 
							success: function(response) {
							}
						});
						
					}
				});
			} else {
				Ext.Msg.alert('확인', '전표를 취소할 항목을 선택하세요<br> B/L 경비는 인수수수료를 별도로 관리하기위함.')
			}
			
		} else {
			Ext.Msg.alert('확인', msg);
		}
		
	},

});
