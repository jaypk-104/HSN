/*
 * File: app/controller/MyGridController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('M_GR_CH_TOT_HSPF.controller.MyGridController', {
    extend: 'Ext.app.Controller',
    stores: ['MyStore'],
    control: {
        "#distBtn": {
            click: 'distBtnClick'
        },
        "#glPrintBtn": {
            click: 'glPrintBtnClick'
        },
        "#printItemBtn": {
            click: 'printItemBtnClick'
        },
        "#glCfmBtn": {
            click: 'glCfmBtnClick'
        },
        "#glCfmCancelBtn": {
            click: 'glCfmCancelBtnClick'
        },
        "#xlsxDown": {
            click: 'xlsxDownClick'
        },
    },

    distBtnClick: function(button, e, eOpts) {
    	var store = Ext.getStore('MyStore');
    	var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
    	
    	if(gridRecord.length < 1){
    		Ext.Msg.alert('확인', '선택된 행이 없습니다.');
    		return;
    	} else {
    		for(var i=0; i<gridRecord.length; i++) {
        		gridRecord[i].set('V_TYPE', 'C');
    		}
    	}
    	
    	Ext.Msg.confirm('확인', '경비배분 하시겠습니까?', function(button) {
			if (button == 'yes') {
				var myMask = new Ext.LoadMask(Ext.getCmp('myGrid') , {msg:"Please wait..."});
				myMask.show();
				
				store.sync({
					timeout: 180000,
					params : {
						V_TYPE : 'SYNC',
						V_COMP_ID: parent.Ext.getCmp('GCOMP_ID').getValue(),
		    			V_USR_ID: parent.Ext.getCmp('GUSER_ID').getValue(),
					},
					callback: function() {
						myMask.hide();
						
						Ext.toast({
							title : ' ',
							timeout : 1000,
							html : '경비배분완료',
							style : 'text-align: center',
							align : 't',
							width : 130,
						});
						
						var tbController = M_GR_CH_TOT_HSPF.app.getController("TbButtonController");
			    		tbController.selBtnClick();
					},
					success : function(response) {
						myMask.hide();
					}
				})
			}
		});
    },
    
    glPrintBtnClick: function(button, e, eOpts) {
    	var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
    	
    	if(gridRecord.length < 1){
    		Ext.Msg.alert('확인', '선택된 행이 없습니다.');
    		return;
    	} else if(gridRecord.length > 1){
    		Ext.Msg.alert('확인', '한 건씩 출력 가능합니다.');
    		return;
    	} else if(!!!gridRecord[0].get('TEMP_GL_NO')){
    		Ext.Msg.alert('확인', '전표가 존재하지 않는 행이 선택되었습니다.');
    		return;
    	} else {
    		var V_GL_NO = gridRecord[0].get('TEMP_GL_NO');
			var url = 'http://123.142.124.137:8100/aireport/AIViewer55/FI/A5101MA1_S_Pay.jsp?TEMP_GL_NO=' + V_GL_NO;
	    	
			Ext.Msg.confirm('확인', '전표를 출력하시겠습니까?', function(button) {
        		if (button == 'yes') {
					var myWin = new Ext.Window({
						title : '전표출력',
						html : '<iframe name="xxx" border =0 src="'+url+'" width="100%" height="100%"></iframe>',
						width : 1000,
						height : 768,
						modal : true
					});
					
					myWin.show();
					myWin.setSize(Ext.getBody().getViewSize());
					myWin.setPagePosition(0, 0);
        		}
        	});
    	}
    },
    
    printItemBtnClick: function(button, e, eOpts) {
    	var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
    	
    	if(gridRecord.length < 1){
    		Ext.Msg.alert('확인', '선택된 행이 없습니다.');
    		return;
    	} else if(gridRecord.length > 1){
    		Ext.Msg.alert('확인', '한 건씩 출력 가능합니다.');
    		return;
    	} else {
    		var V_GR_NO = gridRecord[0].get('GR_NO');
    		
    		Ext.Ajax.request({
				url : 'sql/M_GR_CH_TOT_HSPF.jsp',
				method : 'post',
				params : {
					V_TYPE : 'PRINT_ITEM',
					V_COMP_ID: parent.Ext.getCmp('GCOMP_ID').getValue(),
	    			V_USR_ID: parent.Ext.getCmp('GUSER_ID').getValue(),
	    			V_GR_NO: V_GR_NO,
				},
				success : function(response) {
					var url = '';
			    	
			    	if(parent.Ext.getCmp('MAIN_SERVER_YN').getValue() == 'Y'){
				    	url = 'http://123.142.124.170:8080/aireport/on_server/M_GR_CH_PRINT_TOT_HSPF.jsp?';  	
					} else{
						url = 'http://123.142.124.170:8080/aireport/on_server/M_GR_CH_PRINT_TOT_HSPF_TEST.jsp?';  	  	
					}
			    	
			    	if(!!V_GR_NO) {
			    		var params = 'GR_NO=' + V_GR_NO;
			    		url = url + params;
			    		
			    		Ext.Msg.confirm('확인', '미착상품현황 출력하시겠습니까?', function(button) {
			        		if (button == 'yes') {
								var myWin = new Ext.Window({
									title : '미착상품현황',
									html : '<iframe name="xxx" border =0 src="'+url+'" width="100%" height="100%"></iframe>',
									width : 1000,
									height : 768,
									modal : true
								});
								
								myWin.show();
								myWin.setSize(Ext.getBody().getViewSize());
								myWin.setPagePosition(0, 0);
			        		}
			        	})
			    	} else {
			    		Ext.Msg.alert('확인', '입고번호가 존재하지 않습니다.');
			    	}
				}
			});
    		
    	}
    },
    
    glCfmBtnClick: function(button, e, eOpts) {
    	var store = Ext.getStore('MyStore');
    	var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
    	
    	if(gridRecord.length < 1){
    		Ext.Msg.alert('확인', '선택된 행이 없습니다.');
    		return;
    	} else {
    		for(var i=0; i<gridRecord.length; i++) {
    			if(gridRecord[i].get('ELEC_YN') == 'Y' || !!gridRecord[i].get('TEMP_GL_NO')){
    				continue;
    			}
    			
    			gridRecord[i].set('V_TYPE', 'ERP');
    		}
    	}
    	
    	Ext.Msg.confirm('확인', '전표를 생성하시겠습니까?', function(button) {
			if (button == 'yes') {
				
				store.sync({
					params: {
						V_TYPE: 'ERP',
						U_TYPE: 'I',
						V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
						V_USR_ID : parent.Ext.getCmp('GEMP_NO').getValue(),
					},
					callback: function(records, operation, success) {
						var response = records.operations[0]._response.responseText;
						
						try{
							var jsonResult = Ext.JSON.decode(response);
							
							var tryCnt = jsonResult.tryCnt;
							var finCnt = jsonResult.finCnt;
							var resMSG = jsonResult.resMSG;
							var resDATE = jsonResult.resDATE;
							var resString = jsonResult.resString;
							
							if(resMSG == 'SUCCESS') {
								store.reload();
								
								Ext.toast({
									title : ' ',
									timeout : 1000,
									html : '전표생성완료',
									style : 'text-align: center',
									align : 't',
									width : 130,
								});
							} else {
								Ext.Msg.alert('확인', '전표생성실패<br>' + resString);
							}
						}
						catch (e){
							Ext.Msg.alert('확인', '전표생성실패<br>' + response.responseText);
						}
					}
				});
			}
		});
    	
    },
    
    glCfmCancelBtnClick: function(button, e, eOpts) {
    	var store = Ext.getStore('MyStore');
    	var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
    	
    	if(gridRecord.length < 1){
    		Ext.Msg.alert('확인', '선택된 행이 없습니다.');
    		return;
    	} else if(gridRecord.length > 1){
    		Ext.Msg.alert('확인', '한 건씩 취소 가능합니다.');
    		return;
    	} else if(!!!gridRecord[0].get('TEMP_GL_NO')){
    		Ext.Msg.alert('확인', '전표가 존재하지 않는 행이 선택되었습니다.');
    		return;
    	} else {
    		gridRecord[0].set('V_TYPE', 'ERP');
    	}
    	
    	Ext.Msg.confirm('확인', '전표를 취소하시겠습니까?', function(button) {
			if (button == 'yes') {

				Ext.Ajax.request({
					url : 'sql/M_GR_CH_TOT_HSPF.jsp',
					method : 'post',
					params : {
						V_TYPE : 'ERP_DEL_CHECK',
						V_COMP_ID: parent.Ext.getCmp('GCOMP_ID').getValue(),
		    			V_USR_ID: parent.Ext.getCmp('GUSER_ID').getValue(),
		    			V_TEMP_GL_NO: gridRecord[0].get('TEMP_GL_NO'),
					},
					success : function(response) {
						var res = response.responseText;
						if(res == 'N'){
							store.sync({
								params: {
									V_TYPE: 'ERP',
									U_TYPE: 'D',
									V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
									V_USR_ID : parent.Ext.getCmp('GEMP_NO').getValue(),
								},
								callback: function(records, operation, success) {
									var response = records.operations[0]._response.responseText;
									var jsonResult = Ext.JSON.decode(response);
									
									var tryCnt = jsonResult.tryCnt;
									var finCnt = jsonResult.finCnt;
									var resMSG = jsonResult.resMSG;
									var resDATE = jsonResult.resDATE;
									var resString = jsonResult.resString;
									
									if(resMSG == 'SUCCESS') {
										store.reload();
										
										Ext.toast({
											title : ' ',
											timeout : 1000,
											html : '전표취소완료',
											style : 'text-align: center',
											align : 't',
											width : 130,
										});
									} else {
										Ext.Msg.alert('확인', '전표취소실패<br>' + resString);
									}
								}
							});
						} else if(res == 'A'){
							Ext.Msg.alert('확인', '전자결재가 완료된 전표 입니다.');
				    		return;
						} else if(res == 'C'){
							Ext.Msg.alert('확인', '회계마감된 전표 입니다.');
				    		return;
						} else {
							Ext.Msg.alert('확인', '전표확인 불가능!'); /* 케이스 있으면 확인 필요 */
				    		return;
						}
					}
				});
				
			}
		});
    	
    },
    
    xlsxDownClick: function(button, e, eOpts) {
        var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d His');
        var grid = Ext.getCmp('myGrid');
        grid.saveDocumentAs({
             type: 'xlsx',
             title: '수입입고경비일괄배부', //엑셀내타이틀
             fileName: currentDate+'.xlsx'
        });
    },
    
});
