/*
 * File: app/controller/MyGridController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('st_pay_reg.controller.MyGridController', {
	extend : 'Ext.app.Controller',

	stores : [ 'MyStore' ],

	control : {
		"#gridAddBtn" : {
			click : 'gridAddBtnClick'
		},
		"#gridDelBtn" : {
			click : 'gridDelBtnClick'
		},
		"#xlsxDown" : {
			click : 'xlsxDownClick'
		},
		"#xmlDown" : {
			click : 'xmlDownClick'
		},
		"#myGrid" : {
			cellclick : 'myGridCellClick'
		},
		"#delBtn1" : {
			click : 'delBtn1Click'
		},
	},

	gridAddBtnClick : function(button, e, eOpts) {
		// var popup = Ext.create("B_COMP_HSPF.view.WinAddRow");
		// popup.show();
		// Ext.getCmp('rowCount').setValue(1);
	},

	gridDelBtnClick : function(button, e, eOpts) {
		var store = Ext.getStore('MyStore');
		var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();

		if (gridRecord.length > 0) {
			Ext.Msg.confirm('확인', '삭제하시겠습니까?', function(button) {
				if (button == 'yes') {
					for (var i = 0; i < gridRecord.length; i++) {
						if (gridRecord[i].data['V_TYPE'] == 'V') {
							gridRecord[i].data['V_TYPE'] = 'D';
						}
					}
					store.sync({
						params : {
							V_USR_ID : 'admin',// parent.Ext.getCmp('GUSER_ID').getValue(),
						},
						callback : function(records, operation, success) {
							store.reload();
						}
					});
				}
			});
		}
	},

	xlsxDownClick : function(button, e, eOpts) {
		var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d His');
		var grid = Ext.getCmp('myGrid');
		grid.saveDocumentAs({
			type : 'xlsx',
			title : 'test', // 엑셀내타이틀
			fileName : currentDate + '.xlsx' // 엑셀파일이름
		});
	},

	xmlDownClick : function(button, e, eOpts) {
		var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d His');
		var grid = Ext.getCmp('myGrid');
		grid.saveDocumentAs({
			type : 'xml',
			title : 'test', // 엑셀내타이틀
			fileName : currentDate + '.xml' // 엑셀파일이름
		});
	},
	myGridCellClick : function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
		var store1 = Ext.getStore('MyStore1');
		store1.load({
			params : {
				V_TYPE : 'SD',
				V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
				V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
				V_IV_DN_NO : record.get('IV_DN_NO'),
			},
			callback : function(records, operations, success) {
			}
		});

	},
	delBtn1Click : function(button, e, eOpts) {
		var store = Ext.getStore('MyStore');
		var store1 = Ext.getStore('MyStore1');
		var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
		var gridRecord1 = Ext.getCmp('myGrid1').getSelectionModel().getSelection();
		var flag = 'T';
		var msg = '';
		
		if(gridRecord1.length <= 0){
			flag = 'F';
			msg = '삭제할 데이터를 선택하세요.';
		}
		
		for(var i = 0 ; i < gridRecord1.length ; i ++){
			if(gridRecord1[i].get('TEMP_GL_NO') == '' || gridRecord1[i].get('TEMP_GL_NO') == null || gridRecord1[i].get('TEMP_GL_NO') == undefined){
				flag = 'F';
				msg = '전표번호가 없습니다.';
				break;
			}
			gridRecord1[i].set('V_TYPE', 'D');
		}
		
		
		Ext.Msg.confirm('확인', '결의전표를 삭제 하시겠습니까?', function(button) {
			if (button == 'yes') {
				store1.sync({ 
					params : {
						V_TYPE : 'SYNC',
						V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
						V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
					},
					callback : function(records, operation, success) {
			    		var tbController = st_pay_reg.app.getController("TbButtonController");
			    		tbController.selBtnClick();
					}, 
				});
			}
		});
	},


});
