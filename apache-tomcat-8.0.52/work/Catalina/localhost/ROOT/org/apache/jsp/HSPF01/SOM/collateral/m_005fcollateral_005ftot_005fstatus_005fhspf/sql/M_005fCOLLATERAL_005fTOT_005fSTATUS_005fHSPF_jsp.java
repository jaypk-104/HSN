/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.52
 * Generated at: 2021-02-01 07:21:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.HSPF01.SOM.collateral.m_005fcollateral_005ftot_005fstatus_005fhspf.sql;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.DiskFileUpload;
import org.apache.commons.fileupload.FileUpload;
import org.json.simple.JSONArray;
import org.json.simple.JSONValue;
import net.sf.json.JSONObject;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URLDecoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.*;
import java.text.*;
import java.lang.*;
import java.util.*;
import java.net.*;
import java.sql.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

public final class M_005fCOLLATERAL_005fTOT_005fSTATUS_005fHSPF_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/HSPF01/common/DB_Connection.jsp", Long.valueOf(1551915626000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("java.lang");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.net");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("javax.naming.InitialContext");
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("org.apache.commons.fileupload.DiskFileUpload");
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("org.apache.commons.fileupload.FileItem");
    _jspx_imports_classes.add("java.io.StringWriter");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("javax.naming.NamingException");
    _jspx_imports_classes.add("org.json.simple.JSONArray");
    _jspx_imports_classes.add("org.apache.commons.fileupload.FileUpload");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.json.simple.JSONValue");
    _jspx_imports_classes.add("javax.sql.DataSource");
    _jspx_imports_classes.add("net.sf.json.JSONObject");
    _jspx_imports_classes.add("javax.naming.Context");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	Connection conn = null;
	PreparedStatement pstmt = null;
	Statement stmt = null;

	try {
		Context initCtx = new InitialContext();
		Context envCtx = (Context) initCtx.lookup("java:comp/env");
		DataSource dataSource = (DataSource) envCtx.lookup("jdbc/Tibero");
		conn = dataSource.getConnection();
		stmt = conn.createStatement();

	} catch (NamingException e) {

	}

      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("utf-8");
	ResultSet rs = null;
	CallableStatement cs = null;
	JSONObject jsonObject = new JSONObject();
	JSONArray jsonArray = new JSONArray();
	JSONObject subObject = null;

	try {
		String V_COMP_ID = request.getParameter("V_COMP_ID") == null ? "" : request.getParameter("V_COMP_ID");
		String V_TYPE = request.getParameter("V_TYPE") == null ? "" : request.getParameter("V_TYPE");
		String V_DEPT_CD = request.getParameter("V_DEPT_CD") == null ? "" : request.getParameter("V_DEPT_CD").toUpperCase();
		String V_BP_CD = request.getParameter("V_BP_CD") == null ? "" : request.getParameter("V_BP_CD").toUpperCase();
		String V_ASGN_DT_FR = request.getParameter("V_ASGN_DT_FR") == null ? "" : request.getParameter("V_ASGN_DT_FR").substring(0, 10);
		String V_ASGN_DT_TO = request.getParameter("V_ASGN_DT_TO") == null ? "" : request.getParameter("V_ASGN_DT_TO").substring(0, 10);
		String V_DOC_NO = request.getParameter("V_DOC_NO") == null ? "" : request.getParameter("V_DOC_NO").toUpperCase();
		String V_DOC_TYPE_CD = request.getParameter("V_DOC_TYPE_CD") == null ? "" : request.getParameter("V_DOC_TYPE_CD").toUpperCase();
		String V_FILE_NM = request.getParameter("V_FILE_NM") == null ? "" : request.getParameter("V_FILE_NM").toUpperCase();
		String V_FILE_IN_SYSTEM_NM = request.getParameter("V_FILE_IN_SYSTEM_NM") == null ? "" : request.getParameter("V_FILE_IN_SYSTEM_NM").toUpperCase();
		String V_USR_ID = request.getParameter("V_USR_ID") == null ? "" : request.getParameter("V_USR_ID").toUpperCase();

		if (V_TYPE.equals("S")) {
			cs = conn.prepareCall("call USP_004_M_COLLATERAL_STATUS_HSPF(?,?,?,?,?,?,?,?,?,?,?,?)");

			cs.setString(1, V_COMP_ID);//V_COMP_ID 		
			cs.setString(2, V_TYPE);//V_TYPE
			cs.setString(3, V_ASGN_DT_FR);//V_ASGN_DT_FR 
			cs.setString(4, V_ASGN_DT_TO);//V_ASGN_DT_TO 		
			cs.setString(5, V_DEPT_CD);//V_DEPT_CD 		
			cs.setString(6, V_BP_CD);//V_BP_CD 		
			cs.setString(7, "");//V_DOC_NO 	
			cs.setString(8, "");//V_DOC_TYPE_CD 	
			cs.setString(9, "");//V_FILE_NM
			cs.setString(10, "");//V_FILE_IN_SYSTEM_NM 			
			cs.setString(11, V_USR_ID);//V_USR_ID 		
			cs.registerOutParameter(12, com.tmax.tibero.TbTypes.CURSOR);
			cs.executeQuery();

			rs = (ResultSet) cs.getObject(12);
			while (rs.next()) {
				subObject = new JSONObject();
				subObject.put("DEPT_CD", rs.getString("DEPT_CD"));
				subObject.put("DEPT_NM", rs.getString("DEPT_NM"));
				subObject.put("BP_CD", rs.getString("BP_CD"));
				subObject.put("BP_NM", rs.getString("BP_NM"));
				subObject.put("COLLATERAL_NO", rs.getString("COLLATERAL_NO"));
				subObject.put("ASGN_DT", rs.getString("ASGN_DT"));
				subObject.put("RENEW_DT", rs.getString("RENEW_DT"));
				subObject.put("EFFECTIVE_DT", rs.getString("EFFECTIVE_DT"));
				subObject.put("EXPIRY_DT", rs.getString("EXPIRY_DT"));
				subObject.put("ASGN_AMT", rs.getString("ASGN_AMT"));
				subObject.put("WARNT_ORG_NM", rs.getString("WARNT_ORG_NM"));
				subObject.put("STOCK_NO", rs.getString("STOCK_NO"));
				subObject.put("REMARK", rs.getString("REMARK"));
				subObject.put("DB_TYPE2", rs.getString("DB_TYPE2"));
				subObject.put("DB_TYPE2_NM", rs.getString("DB_TYPE2_NM"));
				subObject.put("DB_PROGRESS", rs.getString("DB_PROGRESS"));
				subObject.put("DB_DOC_TYPE", rs.getString("DB_DOC_TYPE"));
				subObject.put("DB_DOC_TYPE_NM", rs.getString("DB_DOC_TYPE_NM"));
				subObject.put("DOC_NO", rs.getString("DOC_NO"));
				subObject.put("FILE_NM", rs.getString("FILE_NM"));
				subObject.put("CHK_A", rs.getString("CHK_A"));
				subObject.put("CHK_B", rs.getString("CHK_B"));
				subObject.put("CHK_C", rs.getString("CHK_C"));

				subObject.put("B1", rs.getString("B1"));
				subObject.put("B2", rs.getString("B2"));
				subObject.put("B3", rs.getString("B3"));
				subObject.put("B4", rs.getString("B4"));
				subObject.put("B5", rs.getString("B5"));
				subObject.put("B6", rs.getString("B6"));
				subObject.put("B7", rs.getString("B7"));
				subObject.put("B8", rs.getString("B8"));

				subObject.put("C1", rs.getString("C1"));
				subObject.put("C2", rs.getString("C2"));
				subObject.put("C3", rs.getString("C3"));
				subObject.put("C4", rs.getString("C4"));
				subObject.put("C5", rs.getString("C5"));
				subObject.put("C6", rs.getString("C6"));
				subObject.put("C7", rs.getString("C7"));

				jsonArray.add(subObject);
			}

			jsonObject.put("success", true);
			jsonObject.put("resultList", jsonArray);

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(jsonObject);
			pw.flush();
			pw.close();

		} else if (V_TYPE.equals("PI")) {
			if (FileUpload.isMultipartContent(request)) {
				DiskFileUpload fileUpload = new DiskFileUpload();
				fileUpload.setRepositoryPath("/");
				fileUpload.setSizeMax(100 * 1024 * 1024);
				fileUpload.setSizeThreshold(1024 * 50);
				List items = fileUpload.parseRequest(request);
				Iterator iterator = items.iterator();

				V_FILE_NM = "";
				V_FILE_IN_SYSTEM_NM = "";

				while (iterator.hasNext()) {
					FileItem item = (FileItem) iterator.next();
					if (!item.isFormField() && item.getSize() > 0) {

						int pos = item.getName().lastIndexOf(".");
						String ext = item.getName().substring(pos);

						long curr = System.currentTimeMillis();
						SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd_HHmmssSSS");
						String time = sdf2.format(new Date(curr));
						V_FILE_NM = item.getName();
						V_FILE_IN_SYSTEM_NM = V_DOC_NO + '_' + time + ext;

						System.out.println(V_FILE_IN_SYSTEM_NM);

						// 로컬용
						File file = new File("\\\\192.168.123.236\\Users\\FILE_UPLOAD\\" + V_FILE_IN_SYSTEM_NM);

						// 서버용
// 						File file = new File("/data/HSPF01/" + V_FILE_IN_SYSTEM_NM);

						request.setAttribute("file", file);
						item.write(file);
						item.delete();

						cs = conn.prepareCall("call USP_004_M_COLLATERAL_STATUS_HSPF(?,?,?,?,?,?,?,?,?,?,?,?)");
						cs.setString(1, V_COMP_ID);//V_COMP_ID 		
						cs.setString(2, V_TYPE);//V_TYPE
						cs.setString(3, "");//V_ASGN_DT_FR 
						cs.setString(4, "");//V_ASGN_DT_TO 		
						cs.setString(5, V_DEPT_CD);//V_DEPT_CD 		
						cs.setString(6, V_BP_CD);//V_BP_CD 		
						cs.setString(7, V_DOC_NO);//V_DOC_NO 	
						cs.setString(8, V_DOC_TYPE_CD);//V_DOC_TYPE_CD 	
						cs.setString(9, V_FILE_NM);//V_FILE_NM 		
						cs.setString(10, V_FILE_IN_SYSTEM_NM);//V_FILE_IN_SYSTEM_NM
						cs.setString(11, V_USR_ID);//V_USR_ID 		
						cs.registerOutParameter(12, com.tmax.tibero.TbTypes.CURSOR);
						cs.executeQuery();

						jsonObject.put("success", true);
						PrintWriter pw = response.getWriter();
						pw.print(jsonObject);
						pw.flush();
						pw.close();

					}
				}
			}
			response.setContentType("text/html");

			/* 파일다운로드 */
		} else if (V_TYPE.equals("P")) {

			//로컬
			String savePath = "\\\\192.168.123.236\\Users\\FILE_UPLOAD\\";

			// 서버
// 			String savePath = "/data/HSPF01/";

			// 서버에 실제 저장된 파일명
			String filename = V_FILE_IN_SYSTEM_NM;

			// 실제 내보낼 파일명
			String orgfilename = V_FILE_NM;

			InputStream in = null;
			OutputStream os = null;
			File file = null;
			boolean skip = false;
			String client = "";

			try {

				// 파일을 읽어 스트림에 담기
				try {
					file = new File(savePath, filename);
					in = new FileInputStream(file);
				} catch (FileNotFoundException fe) {
					skip = true;
				}

				client = request.getHeader("User-Agent");

				// 파일 다운로드 헤더 지정
				response.reset();
				response.setContentType("application/octet-stream");
				response.setHeader("Content-Description", "JSP Generated Data");

				if (!skip) {

					// IE
					if (client.indexOf("MSIE") != -1) {
						response.setHeader("Content-Disposition", "attachment; filename=" + new String(orgfilename.getBytes("KSC5601"), "ISO8859_1"));

					} else {
						// 한글 파일명 처리
						orgfilename = new String(orgfilename.getBytes("utf-8"), "iso-8859-1");

						response.setHeader("Content-Disposition", "attachment; filename=\"" + orgfilename + "\"");
						response.setHeader("Content-Type", "application/octet-stream; charset=utf-8");
					}

					response.setHeader("Content-Length", "" + file.length());

					out.clear();
					out = pageContext.pushBody();

					os = response.getOutputStream();
					byte b[] = new byte[(int) file.length()];
					int leng = 0;

					while ((leng = in.read(b)) > 0) {
						os.write(b, 0, leng);
					}
				}
				in.close();
				os.close();
			} finally {
				if (stmt != null) try {
					stmt.close();
				} catch (SQLException ex) {}
				if (conn != null) try {
					conn.close();
				} catch (SQLException ex) {}
			}

			/*파일목록조회*/
		} else if (V_TYPE.equals("PS")) {
			cs = conn.prepareCall("call USP_004_M_COLLATERAL_STATUS_HSPF(?,?,?,?,?,?,?,?,?,?,?,?)");
			cs.setString(1, V_COMP_ID);//V_COMP_ID 		
			cs.setString(2, V_TYPE);//V_TYPE
			cs.setString(3, "");//V_ASGN_DT_FR 
			cs.setString(4, "");//V_ASGN_DT_TO 		
			cs.setString(5, "");//V_DEPT_CD 		
			cs.setString(6, "");//V_BP_CD 		
			cs.setString(7, V_DOC_NO);//V_DOC_NO 	
			cs.setString(8, V_DOC_TYPE_CD);//V_DOC_TYPE_CD 	
			cs.setString(9, V_FILE_NM);//V_FILE_NM 			
			cs.setString(10, V_FILE_IN_SYSTEM_NM);//V_FILE_IN_SYSTEM_NM
			cs.setString(11, V_USR_ID);//V_USR_ID 		
			cs.registerOutParameter(12, com.tmax.tibero.TbTypes.CURSOR);
			cs.executeQuery();

			rs = (ResultSet) cs.getObject(12);
			while (rs.next()) {
				subObject = new JSONObject();
				subObject.put("DOC_NO", rs.getString("DOC_NO"));
				subObject.put("DOC_TYPE_CD", rs.getString("DOC_TYPE_CD"));
				subObject.put("DOC_TYPE_NM", rs.getString("DOC_TYPE_NM"));
				subObject.put("BP_CD", rs.getString("BP_CD"));
				subObject.put("DEPT_CD", rs.getString("DEPT_CD"));
				subObject.put("FILE_NM", rs.getString("FILE_NM"));
				subObject.put("FILE_IN_SYSTEM_NM", rs.getString("FILE_IN_SYSTEM_NM"));
				subObject.put("INSRT_DT", rs.getString("INSRT_DT"));
				jsonArray.add(subObject);
			}
			jsonObject.put("success", true);
			jsonObject.put("resultList", jsonArray);

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(jsonObject);
			pw.flush();
			pw.close();
		}
		/*파일삭제*/
		else if (V_TYPE.equals("SYNC")) {

			String[] findList = { "#", "+", "&", "%", " " };
			String[] replList = { "%23", "%2B", "%26", "%25", "%20" };

			String data = request.getParameter("data");
			data = StringUtils.replaceEach(data, findList, replList);
			String jsonData = URLDecoder.decode(data, "UTF-8");

			if (jsonData.lastIndexOf("},{") > 0) { //배열일경우
				JSONArray jsonAr = (JSONArray) JSONValue.parse(jsonData);

				for (int i = 0; i < jsonAr.size(); i++) {
					HashMap hashMap = (HashMap) jsonAr.get(i);

					V_TYPE = hashMap.get("V_TYPE") == null ? "" : hashMap.get("V_TYPE").toString();
					V_DOC_NO = hashMap.get("DOC_NO") == null ? "" : hashMap.get("DOC_NO").toString();
					V_DOC_TYPE_CD = hashMap.get("DOC_TYPE_CD") == null ? "" : hashMap.get("DOC_TYPE_CD").toString();
					V_FILE_NM = hashMap.get("FILE_NM") == null ? "" : hashMap.get("FILE_NM").toString();
					V_FILE_IN_SYSTEM_NM = hashMap.get("FILE_IN_SYSTEM_NM") == null ? "" : hashMap.get("FILE_IN_SYSTEM_NM").toString();

					cs = conn.prepareCall("call USP_004_M_COLLATERAL_STATUS_HSPF(?,?,?,?,?,?,?,?,?,?,?,?)");
					cs.setString(1, V_COMP_ID);//V_COMP_ID 		
					cs.setString(2, V_TYPE);//V_TYPE
					cs.setString(3, "");//V_ASGN_DT_FR 
					cs.setString(4, "");//V_ASGN_DT_TO 		
					cs.setString(5, "");//V_DEPT_CD 		
					cs.setString(6, "");//V_BP_CD 		
					cs.setString(7, V_DOC_NO);//V_DOC_NO 	
					cs.setString(8, V_DOC_TYPE_CD);//V_DOC_TYPE_CD 	
					cs.setString(9, V_FILE_NM);//V_FILE_NM
					cs.setString(10, V_FILE_IN_SYSTEM_NM);//V_FILE_IN_SYSTEM_NM
					cs.setString(11, V_USR_ID);//V_USR_ID 		
					cs.registerOutParameter(12, com.tmax.tibero.TbTypes.CURSOR);
					cs.executeQuery();
				}
			} else {
				JSONObject jsondata = JSONObject.fromObject(jsonData);

				V_TYPE = jsondata.get("V_TYPE") == null ? "" : jsondata.get("V_TYPE").toString();
				V_DOC_NO = jsondata.get("DOC_NO") == null ? "" : jsondata.get("DOC_NO").toString();
				V_DOC_TYPE_CD = jsondata.get("DOC_TYPE_CD") == null ? "" : jsondata.get("DOC_TYPE_CD").toString();
				V_FILE_NM = jsondata.get("FILE_NM") == null ? "" : jsondata.get("FILE_NM").toString();
				V_FILE_IN_SYSTEM_NM = jsondata.get("FILE_IN_SYSTEM_NM") == null ? "" : jsondata.get("FILE_IN_SYSTEM_NM").toString();

				cs = conn.prepareCall("call USP_004_M_COLLATERAL_STATUS_HSPF(?,?,?,?,?,?,?,?,?,?,?,?)");
				cs.setString(1, V_COMP_ID);//V_COMP_ID 		
				cs.setString(2, V_TYPE);//V_TYPE
				cs.setString(3, "");//V_ASGN_DT_FR 
				cs.setString(4, "");//V_ASGN_DT_TO 		
				cs.setString(5, "");//V_DEPT_CD 		
				cs.setString(6, "");//V_BP_CD 		
				cs.setString(7, V_DOC_NO);//V_DOC_NO 	
				cs.setString(8, V_DOC_TYPE_CD);//V_DOC_TYPE_CD 	
				cs.setString(9, V_FILE_NM);//V_FILE_NM
				cs.setString(10, V_FILE_IN_SYSTEM_NM);//V_FILE_IN_SYSTEM_NM 		
				cs.setString(11, V_USR_ID);//V_USR_ID 		
				cs.registerOutParameter(12, com.tmax.tibero.TbTypes.CURSOR);
				cs.executeQuery();
			}
		}

	} catch (Exception e) {
		response.setContentType("text/plain; charset=UTF-8");
		PrintWriter pw = response.getWriter();
		pw.print(e.toString());
		pw.flush();
		pw.close();

		e.printStackTrace();
	} finally {
		if (cs != null) try {
			cs.close();
		} catch (SQLException ex) {}
		if (rs != null) try {
			rs.close();
		} catch (SQLException ex) {}
		if (stmt != null) try {
			stmt.close();
		} catch (SQLException ex) {}
		if (conn != null) try {
			conn.close();
		} catch (SQLException ex) {}
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
