/*
 * File: app/controller/MyController.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('rawpurchase.controller.MyController', {
    extend: 'Ext.app.Controller',

    models: [
        'RawPurModel',
        'RawPurSave'
    ],
    stores: [
        'RawPurStore',
        'RawPurPopStore'
    ],
    views: [
        'MyViewport'
    ],

    control: {
        "#selectBtn": {
            click: 'SelectBtnClick'
        },
        "#addBtn": {
            click: 'AddBtnClick'
        },
        "#grid1": {
            cellclick: 'onGridpanelCellClick'
        },
        "#delBtn": {
            click: 'DelBtnClick'
        },
        "#saveBtn": {
            click: 'onButtonClick'
        },
        "#itemPopBtn": {
            click: 'itemPopBtnClick'
        },
        "#bpPopBtn": {
            click: 'bpPopBtnCtrl'
        },
        "#groupPopBtn": {
            click: 'groupPopBtnClick'
        }
    },

    SelectBtnClick: function(button, e, eOpts) {
        var store=this.getRawPurStoreStore();
//        alert(Ext.getCmp('txtBpItemCd').getValue());
        store.load({
            params:{
//            item_cd:Ext.getCmp('txtId').getValue(),
            bp_cd:Ext.getCmp('gBpCd').getValue(),
            bp_item_cd:Ext.getCmp('txtBpItemCd').getValue(),
            item_cd:Ext.getCmp('txtItemCd').getValue(),
            item_nm:Ext.getCmp('txtItemNm').getValue(),
            spec:Ext.getCmp('txtSpec').getValue(),
            maker:Ext.getCmp('txtMaker').getValue(),
            bp_item_nm:Ext.getCmp('txtBpItemNm').getValue()
//            bp_cd:'00004'
//            bp_item_cd:Ext.getCmp('txtNm').getValue(),
//            item_group_cd:Ext.getCmp('txtGroup').getValue()
            }
        });
   parent.Ext.getCmp(rawpurchase.app.gText).setValue('N');
   },

    AddBtnClick: function(button, e, eOpts) {
         var popups245 = Ext.create("rawpurchase.view.OrderView");
        //gOderView.show();
                        popups245.show();


        parent.Ext.getCmp(rawpurchase.app.gText).setValue('Y');
    },

    onGridpanelCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        //alert(cellIndex);
        //Ext.getCmp('gridCol').setValue(rowIndex);
        if(cellIndex===1)
        {
            var store=this.getRawPurStoreStore();
            var record = store.getAt(rowIndex);
            var checks=  record.get('checks');
            var store2=this.getRawPurPopStoreStore();
            if (checks===true)
            {
                var nows =new Date();
               // alert(nows);

                var rec=Ext.create('rawpurchase.model.RawPurSave',{
                    item_cd:record.get('item_cd'),
                    item_nm:record.get('item_nm'),
                    bp_item_cd:record.get('bp_item_cd'),
                    bp_item_nm:record.get('bp_item_nm'),
                    bp_cd : record.get('bp_cd'),
                    net_usr_nm:record.get('net_usr_nm'),
                    spec : record.get('spec'),
                    maker:record.get('maker'),
                    unit:record.get('unit'),
                    so_qty:record.get('so_qty'),
                    so_amt:record.get('so_amt'),
                    so_prc:record.get('so_prc'),
                    so_loc_amt:record.get('so_amt'),
                    s_req_no:'',
                    s_req_seq:0,
                    prc_flg:'N',
                    bp_usr_id:Ext.getCmp('gUserId').getValue(),
                    so_dt:nows,
                    dlvy_hop_dt:'',
                    net_usr_id:record.get('net_usr_id'),
                    goal_location:'',
                    remark:''

                });
                store2.insert(0,rec);
            }
            else
            {
                var remove_i;

                var store2_cnt=store2.getCount();
                for(ix=0;ix<store2_cnt;ix++)
                {
                    var record2=store2.getAt(ix);
                    if(record2.get('item_cd')!==null)
                    {
                        var item_cds=record.get('item_cd');
                        var item_cds2=record2.get('item_cd');
                        var bp_cds=record.get('bp_cd');
                        var bp_cds2=record2.get('bp_cd');
                        if(item_cds===item_cds2 && bp_cds===bp_cds2)
                        {
                            store2.removeAt(ix);
                            break;
                        }
                    }
                }
            }
        }
    },
    DelBtnClick: function(button, e, eOpts) {
        var store=this.getMbpItemStoreStore();
          var tGrid=Ext.getCmp('grid1');
                var record = tGrid.getSelectionModel().getSelection();

                store.remove(record);
                  parent.Ext.getCmp(mitemmgm.app.gText).setValue('Y');  //저장체크
            var rowNow=Number(Ext.getCmp('gridCol').getValue());
                        rowNow=rowNow-1;
                        Ext.getCmp('gridCol').setValue(rowNow);
                        //alert(rowNow);
                        tGrid.getSelectionModel().select(rowNow);
                         tGrid.getView().focusRow(rowNow);

    },

    onButtonClick: function(button, e, eOpts) {
        var store=this.getMbpItemStoreStore();

        if (this.SaveValid()===true)
        {

            //Ext.getCmp('saveBtn').disable();
          //  var grids=Ext.getCmp('grid1')
           // this.grids.el.mask('save ...');
           // var mask=new.Ext.LoadMask('Save...',)


            //new Ext.LoadMask(el,{msg:'pls wait...',store:store});



            //progress.show();
            Ext.getBody().mask('Please wait', 'sync',false);
            store.sync({

                callback : function()
                {

                    // Ext.MessageBox.updateProgress(10/10,'save ing');
                    store.reload({

                        params:{

                            item_cd:Ext.getCmp('txtId').getValue(),
                            m_bp_cd:Ext.getCmp('txtPath').getValue(),
                            sppl_item_cd:Ext.getCmp('txtNm').getValue(),
                            item_group_cd:Ext.getCmp('txtGroup').getValue()
                        }
                    });
                     Ext.getBody().unmask();
                    Ext.Msg.alert("INFO",'저장 되었습니다.');

                     parent.Ext.getCmp(mitemmgm.app.gText).setValue('N');
                }
            });

        }

        else
            {
                    Ext.Msg.alert("Warning",'필수입력을 체크 하십시요.');
            }
    },

    itemPopBtnClick: function(button, e, eOpts) {
                 Ext.getCmp('itemPopCheck').setValue('text');
                var popups2 = Ext.create("mitemmgm.view.ItemPopup");

                popups2.show();
    },

    bpPopBtnCtrl: function(button, e, eOpts) {
        Ext.getCmp('itemPopCheck').setValue('text');
        var popups2 = Ext.create("mitemmgm.view.BizPopup");

        popups2.show();
    },

    groupPopBtnClick: function(button, e, eOpts) {
           var popups244 = Ext.create("mitemmgm.view.ItemGroupPop");

                popups244.show();
    },

    onLaunch: function() {
        rawpurchase.app.gText=parent.Ext.getCmp('myTab').getActiveTab().items.keys[0]; //저장체크구문


        Ext.getCmp('gBpCd').setValue(parent.Ext.getCmp('GBP_CD').getValue());
        Ext.getCmp('gUserId').setValue(parent.Ext.getCmp('GUSER_ID').getValue());

        //alert(Ext.getCmp('gBpCd').getValue());
        //alert(Ext.getCmp('gUserId').getValue());


    },

    SaveValid: function() {
        var store=this.getMbpItemStoreStore();

        var store_cnt=store.getCount();
        for (var i = 0; i < store_cnt; i++) {
            var record = store.getAt(i);

            //console.log(record.validate().isValid());
            if (record.validate().isValid() === false) return false;
        }
        return true;


    }

});
