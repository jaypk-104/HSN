/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.52
 * Generated at: 2021-01-29 04:30:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.HSPF01.HSPF02.ss2.s_005ftax_005fdistr.sql;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.json.simple.JSONArray;
import org.json.simple.JSONValue;
import net.sf.json.JSONObject;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URLDecoder;
import java.util.HashMap;
import org.apache.commons.lang.StringUtils;
import java.sql.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import java.net.*;
import java.io.*;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.beanutils.BeanUtils;

public final class S_005fTAX_005fDISTR_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/HSPF01/common/DB_Connection.jsp", Long.valueOf(1551915626000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.net");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("javax.naming.InitialContext");
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("org.apache.commons.beanutils.BeanUtils");
    _jspx_imports_classes.add("java.io.StringWriter");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("javax.naming.NamingException");
    _jspx_imports_classes.add("org.json.simple.JSONArray");
    _jspx_imports_classes.add("java.lang.reflect.InvocationTargetException");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("org.json.simple.JSONValue");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("javax.sql.DataSource");
    _jspx_imports_classes.add("net.sf.json.JSONObject");
    _jspx_imports_classes.add("javax.naming.Context");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	Connection conn = null;
	PreparedStatement pstmt = null;
	Statement stmt = null;

	try {
		Context initCtx = new InitialContext();
		Context envCtx = (Context) initCtx.lookup("java:comp/env");
		DataSource dataSource = (DataSource) envCtx.lookup("jdbc/Tibero");
		conn = dataSource.getConnection();
		stmt = conn.createStatement();

	} catch (NamingException e) {

	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("utf-8");
	ResultSet rs = null;
	CallableStatement cs = null;
	CallableStatement cs2 = null;
	JSONObject jsonObject = new JSONObject();
	JSONArray jsonArray = new JSONArray();
	JSONObject subObject = null;

	try {
		String V_TYPE = request.getParameter("V_TYPE") == null ? "" : request.getParameter("V_TYPE");
		String V_COMP_ID = request.getParameter("V_COMP_ID") == null ? "" : request.getParameter("V_COMP_ID").toUpperCase();
		String V_USR_ID = request.getParameter("V_USR_ID") == null ? "" : request.getParameter("V_USR_ID").toUpperCase();
		String V_TAX_DT_FR = request.getParameter("V_TAX_DT_FR") == null ? "" : request.getParameter("V_TAX_DT_FR").toUpperCase().substring(0, 10);
		String V_TAX_DT_TO = request.getParameter("V_TAX_DT_TO") == null ? "" : request.getParameter("V_TAX_DT_TO").toUpperCase().substring(0, 10);
		String V_S_BP_NM = request.getParameter("V_S_BP_NM") == null ? "" : request.getParameter("V_S_BP_NM").toUpperCase();

		//최상단
		if (V_TYPE.equals("SH")) {

			cs = conn.prepareCall("call DISTR_S_TAX.USP_S_TAX_REF_DISTR(?,?,?,?,?,?)");
			cs.setString(1, V_TYPE);//V_COMP_ID
			cs.setString(2, V_COMP_ID);//V_COMP_ID
			cs.setString(3, V_TAX_DT_FR);//V_TAX_DT_FR
			cs.setString(4, V_TAX_DT_TO);//V_TAX_DT_TO
			cs.setString(5, V_S_BP_NM);//V_S_BP_CD
			cs.registerOutParameter(6, com.tmax.tibero.TbTypes.CURSOR);
			cs.executeQuery();

			rs = (ResultSet) cs.getObject(6);

			while (rs.next()) {
				subObject = new JSONObject();
				subObject.put("BILL_NO", rs.getString("BILL_NO"));
				subObject.put("BILL_SEQ", rs.getString("BILL_SEQ"));
				subObject.put("BILL_DT", rs.getString("BILL_DT"));
				subObject.put("DN_ISSUE_DT", rs.getString("DN_ISSUE_DT"));
				subObject.put("S_BP_CD", rs.getString("S_BP_CD"));
				subObject.put("S_BP_NM", rs.getString("S_BP_NM"));
				subObject.put("BL_DOC_NO", rs.getString("BL_DOC_NO"));
				subObject.put("ITEM_CD", rs.getString("ITEM_CD"));
				subObject.put("ITEM_NM", rs.getString("ITEM_NM"));
				subObject.put("BRAND", rs.getString("BRAND"));
				subObject.put("DN_BOX_QTY", rs.getString("DN_BOX_QTY"));
				subObject.put("BILL_QTY", rs.getString("BILL_QTY"));
				subObject.put("BILL_PRC", rs.getString("BILL_PRC"));
				subObject.put("BILL_LOC_AMT", rs.getString("BILL_LOC_AMT"));
				subObject.put("VAT_TYPE_NM", rs.getString("VAT_TYPE_NM"));
				subObject.put("VAT_TYPE", rs.getString("VAT_TYPE"));
				subObject.put("VAT_AMT", rs.getString("VAT_AMT"));
				subObject.put("VAT_RATE", rs.getString("VAT_RATE"));

				subObject.put("BRAND", rs.getString("BRAND"));
				subObject.put("COST_CD", rs.getString("COST_CD"));

				jsonArray.add(subObject);
			}

			jsonObject.put("success", true);
			jsonObject.put("resultList", jsonArray);

			// 			System.out.println(jsonObject);

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(jsonObject);
			pw.flush();
			pw.close();

			//팝업
		} else if (V_TYPE.equals("PH")) {

// 			System.out.println("V_TAX_DT_FR" + V_TAX_DT_FR);
// 			System.out.println("V_TAX_DT_TO" + V_TAX_DT_TO);
// 			System.out.println("V_S_BP_NM" + V_S_BP_NM);

			cs = conn.prepareCall("call DISTR_S_TAX.USP_S_TAX_REF_DISTR(?,?,?,?,?,?)");
			cs.setString(1, V_TYPE);//V_COMP_ID
			cs.setString(2, V_COMP_ID);//V_COMP_ID
			cs.setString(3, V_TAX_DT_FR);//V_TAX_DT_FR
			cs.setString(4, V_TAX_DT_TO);//V_TAX_DT_TO
			cs.setString(5, V_S_BP_NM);//V_S_BP_NM
			cs.registerOutParameter(6, com.tmax.tibero.TbTypes.CURSOR);
			cs.executeQuery();

			rs = (ResultSet) cs.getObject(6);

			while (rs.next()) {
				subObject = new JSONObject();
				subObject.put("TAX_BILL_NO", rs.getString("TAX_BILL_NO"));
				subObject.put("TAX_DOC_NO", rs.getString("TAX_DOC_NO"));
				subObject.put("ISSUED_DT", rs.getString("ISSUED_DT"));
				subObject.put("S_BP_CD", rs.getString("S_BP_CD"));
				subObject.put("TAX_BILL_TYPE", rs.getString("TAX_BILL_TYPE"));
				subObject.put("TEMP_GL_NO", rs.getString("TEMP_GL_NO"));
				subObject.put("BILL_LOC_AMT", rs.getString("BILL_LOC_AMT"));
				subObject.put("S_BP_NM", rs.getString("S_BP_NM"));
				subObject.put("TAX_BILL_TYPE_NM", rs.getString("TAX_BILL_TYPE_NM"));
				
				subObject.put("TAX_BILL_YN", rs.getString("TAX_BILL_YN"));
				subObject.put("TAX_BILL_SEND_YN", rs.getString("TAX_BILL_SEND_YN"));
				subObject.put("LOGIS_STATUS", rs.getString("LOGIS_STATUS"));
				subObject.put("CR_TYPE", rs.getString("CR_TYPE"));

				jsonArray.add(subObject);
			}

			jsonObject.put("success", true);
			jsonObject.put("resultList", jsonArray);

			// 			System.out.println(jsonObject);

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(jsonObject);
			pw.flush();
			pw.close();

			//하단헤더조회

		} else if (V_TYPE.equals("S")) {

			String V_TAX_BILL_NO = request.getParameter("V_TAX_BILL_NO") == null ? "" : request.getParameter("V_TAX_BILL_NO").toUpperCase();

			// 			System.out.println("V_TAX_BILL_NO" + V_TAX_BILL_NO);

			cs = conn.prepareCall("call DISTR_S_TAX.USP_S_TAX_DISTR(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			cs.setString(1, V_TYPE);//V_TYPE
			cs.setString(2, V_COMP_ID);//V_COMP_ID
			cs.setString(3, V_TAX_BILL_NO);//V_TAX_BILL_NO
			cs.setString(4, "");//V_TAX_BILL_SEQ
			cs.setString(5, "");//V_TAX_BILL_DOC_NO
			cs.setString(6, "");//V_ITEM_CD
			cs.setString(7, "");//V_S_BP_CD
			cs.setString(8, "");//V_TAX_BILL_TYPE
			cs.setString(9, "");//V_ISSUED_DT
			cs.setString(10, "");//V_VAT_INC
			cs.setString(11, "");//V_VAT_TYPE
			cs.setString(12, "");//V_VAT_RATE
			cs.setString(13, "");//V_CUR
			cs.setString(14, "");//V_XCH_RATE
			cs.setString(15, "");//V_BILL_QTY
			cs.setString(16, "");//V_NET_AMT
			cs.setString(17, "");//V_NET_LOC_AMT
			cs.setString(18, "");//V_VAT_AMT
			cs.setString(19, "");//V_VAT_LOC_AMT
			cs.setString(20, "");//V_COST_CD
			cs.setString(21, "");//V_BIZ_AREA_CD
			cs.setString(22, "");//V_BILL_NO
			cs.setString(23, "");//V_BILL_SEQ
			cs.setString(24, "");//V_POST_FLAG
			cs.setString(25, "");//V_REMARKS
			cs.setString(26, V_USR_ID);//V_USR_ID
			cs.setString(27, "");//V_BILL_PRICE
			cs.setString(28, "");//V_BILL_AMT
			cs.registerOutParameter(29, com.tmax.tibero.TbTypes.CURSOR);
			cs.executeQuery();

			rs = (ResultSet) cs.getObject(29);

			while (rs.next()) {
				subObject = new JSONObject();
				subObject.put("TAX_BILL_NO", rs.getString("TAX_BILL_NO"));
				subObject.put("TAX_DOC_NO", rs.getString("TAX_DOC_NO"));
				subObject.put("S_BP_CD", rs.getString("S_BP_CD"));
				subObject.put("S_BP_NM", rs.getString("S_BP_NM"));
				subObject.put("TAX_BILL_TYPE", rs.getString("TAX_BILL_TYPE"));
				subObject.put("ISSUED_DT", rs.getString("ISSUED_DT"));
				subObject.put("VAT_INC", rs.getString("VAT_INC"));
				subObject.put("VAT_TYPE", rs.getString("VAT_TYPE"));
				subObject.put("VAT_RATE", rs.getString("VAT_RATE"));
				subObject.put("CUR", rs.getString("CUR"));
				subObject.put("XCH_RATE", rs.getString("XCH_RATE"));
				subObject.put("NET_AMT", rs.getString("NET_AMT"));
				subObject.put("NET_LOC_AMT", rs.getString("NET_LOC_AMT"));
				subObject.put("VAT_AMT", rs.getString("VAT_AMT"));
				subObject.put("VAT_LOC_AMT", rs.getString("VAT_LOC_AMT"));
				subObject.put("BIZ_AREA_CD", rs.getString("BIZ_AREA_CD"));
				subObject.put("POST_FLAG", rs.getString("POST_FLAG"));
				subObject.put("TOTAL_AMT", rs.getString("TOTAL_AMT"));
				subObject.put("REMARKS", rs.getString("REMARKS"));
				subObject.put("TEMP_GL_NO", rs.getString("TEMP_GL_NO"));
				
				subObject.put("TAX_BILL_YN", rs.getString("TAX_BILL_YN"));
				subObject.put("TAX_BILL_SEND_YN", rs.getString("TAX_BILL_SEND_YN"));
				subObject.put("CR_TYPE", rs.getString("CR_TYPE"));
				
				jsonArray.add(subObject);
			}

			jsonObject.put("success", true);
			jsonObject.put("resultList", jsonArray);
// 			System.out.println(jsonObject);

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(jsonObject);
			pw.flush();
			pw.close();
			//하단상세조회
		} else if (V_TYPE.equals("SD")) {

			String V_TAX_BILL_NO = request.getParameter("V_TAX_BILL_NO") == null ? "" : request.getParameter("V_TAX_BILL_NO").toUpperCase();
			System.out.println("SD V_TAX_BILL_NO" + V_TAX_BILL_NO);

			cs = conn.prepareCall("call DISTR_S_TAX.USP_S_TAX_DISTR(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			cs.setString(1, V_TYPE);//V_TYPE
			cs.setString(2, V_COMP_ID);//V_COMP_ID
			cs.setString(3, V_TAX_BILL_NO);//V_TAX_BILL_NO
			cs.setString(4, "");//V_TAX_BILL_SEQ
			cs.setString(5, "");//V_TAX_BILL_DOC_NO
			cs.setString(6, "");//V_ITEM_CD
			cs.setString(7, "");//V_S_BP_CD
			cs.setString(8, "");//V_TAX_BILL_TYPE
			cs.setString(9, "");//V_ISSUED_DT
			cs.setString(10, "");//V_VAT_INC
			cs.setString(11, "");//V_VAT_TYPE
			cs.setString(12, "");//V_VAT_RATE
			cs.setString(13, "");//V_CUR
			cs.setString(14, "");//V_XCH_RATE
			cs.setString(15, "");//V_BILL_QTY
			cs.setString(16, "");//V_NET_AMT
			cs.setString(17, "");//V_NET_LOC_AMT
			cs.setString(18, "");//V_VAT_AMT
			cs.setString(19, "");//V_VAT_LOC_AMT
			cs.setString(20, "");//V_COST_CD
			cs.setString(21, "");//V_BIZ_AREA_CD
			cs.setString(22, "");//V_BILL_NO
			cs.setString(23, "");//V_BILL_SEQ
			cs.setString(24, "");//V_POST_FLAG
			cs.setString(25, "");//V_REMARKS
			cs.setString(26, V_USR_ID);//V_USR_ID
			cs.setString(27, "");//V_BILL_PRICE
			cs.setString(28, "");//V_BILL_AMT
			cs.registerOutParameter(29, com.tmax.tibero.TbTypes.CURSOR);
			cs.executeQuery();

			rs = (ResultSet) cs.getObject(29);

			while (rs.next()) {
				subObject = new JSONObject();
				subObject.put("COST_CD", rs.getString("COST_CD"));
				subObject.put("COMP_ID", rs.getString("COMP_ID"));
				subObject.put("TAX_BILL_NO", rs.getString("TAX_BILL_NO"));
				subObject.put("TAX_BILL_SEQ", rs.getString("TAX_BILL_SEQ"));
				subObject.put("ITEM_CD", rs.getString("ITEM_CD"));
				subObject.put("ITEM_NM", rs.getString("ITEM_NM"));
				subObject.put("BILL_DT", rs.getString("BILL_DT"));
				subObject.put("BILL_QTY", rs.getString("BILL_QTY"));
				subObject.put("BILL_PRC", rs.getString("BILL_PRC"));
				subObject.put("BILL_AMT", rs.getString("BILL_AMT"));
				subObject.put("BILL_LOC_AMT", rs.getString("BILL_LOC_AMT"));
				subObject.put("VAT_TYPE", rs.getString("VAT_TYPE"));
				subObject.put("VAT_TYPE_NM", rs.getString("VAT_TYPE_NM"));
				subObject.put("VAT_AMT", rs.getString("VAT_AMT"));
				subObject.put("VAT_RATE", rs.getString("VAT_RATE"));
				subObject.put("BILL_NO", rs.getString("BILL_NO"));
				subObject.put("BILL_SEQ", rs.getString("BILL_SEQ"));
				subObject.put("BILL_AMT", rs.getString("BILL_AMT"));
				subObject.put("DN_BOX_QTY", rs.getString("DN_BOX_QTY"));
				jsonArray.add(subObject);
			}

			jsonObject.put("success", true);
			jsonObject.put("resultList", jsonArray);
// 			System.out.println(jsonObject);

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(jsonObject);
			pw.flush();
			pw.close();

		} else if (V_TYPE.equals("SYNC")) {
			request.setCharacterEncoding("utf-8");
			String[] findList = { "#", "+", "&", "%", " " };
			String[] replList = { "%23", "%2B", "%26", "%25", "%20" };

			String data = request.getParameter("data");
			data = StringUtils.replaceEach(data, findList, replList);
			String jsonData = URLDecoder.decode(data, "UTF-8");

// 			System.out.println(jsonData);

			String V_TAX_BILL_NO = request.getParameter("V_TAX_BILL_NO") == null ? "" : request.getParameter("V_TAX_BILL_NO").toUpperCase();
			String V_TAX_DOC_NO = request.getParameter("V_TAX_DOC_NO") == null ? "" : request.getParameter("V_TAX_DOC_NO").toUpperCase();
			String V_ISSUED_DT = request.getParameter("V_ISSUED_DT") == null ? "" : request.getParameter("V_ISSUED_DT").toUpperCase().substring(0, 10);

			if (jsonData.lastIndexOf("},{") > 0) { //배열일경우
				JSONArray jsonAr = (JSONArray) JSONValue.parse(jsonData);

				for (int i = 0; i < jsonAr.size(); i++) {

					HashMap hashMap = (HashMap) jsonAr.get(i);

					V_TYPE = hashMap.get("V_TYPE") == null ? "" : hashMap.get("V_TYPE").toString();
					String V_TAX_BILL_SEQ = hashMap.get("BILL_SEQ") == null ? "" : hashMap.get("BILL_SEQ").toString();
					String V_ITEM_CD = hashMap.get("ITEM_CD") == null ? "" : hashMap.get("ITEM_CD").toString();
					String V_COST_CD = hashMap.get("COST_CD") == null ? "" : hashMap.get("COST_CD").toString();
					String V_VAT_TYPE = hashMap.get("VAT_TYPE") == null ? "" : hashMap.get("VAT_TYPE").toString();
					String V_VAT_RATE = hashMap.get("VAT_RATE") == null ? "" : hashMap.get("VAT_RATE").toString();
					String V_BILL_NO = hashMap.get("BILL_NO") == null ? "" : hashMap.get("BILL_NO").toString();
					String V_BILL_SEQ = hashMap.get("BILL_SEQ") == null ? "" : hashMap.get("BILL_SEQ").toString();
					String V_VAT_AMT = hashMap.get("VAT_AMT") == null ? "" : hashMap.get("VAT_AMT").toString();
					String V_BILL_QTY = hashMap.get("BILL_QTY") == null ? "" : hashMap.get("BILL_QTY").toString();
					String V_BILL_AMT = hashMap.get("BILL_LOC_AMT") == null ? "" : hashMap.get("BILL_LOC_AMT").toString();
					String V_BILL_LOC_AMT = hashMap.get("BILL_LOC_AMT") == null ? "" : hashMap.get("BILL_LOC_AMT").toString();
					String V_BILL_PRICE = hashMap.get("BILL_PRC") == null ? "" : hashMap.get("BILL_PRC").toString();

					cs = conn.prepareCall("call DISTR_S_TAX.USP_S_TAX_DISTR(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
					cs.setString(1, V_TYPE);//V_TYPE
					cs.setString(2, V_COMP_ID);//V_COMP_ID
					cs.setString(3, V_TAX_BILL_NO);//V_TAX_BILL_NO
					cs.setString(4, V_TAX_BILL_SEQ);//V_TAX_BILL_SEQ
					cs.setString(5, V_TAX_DOC_NO);//V_TAX_BILL_DOC_NO
					cs.setString(6, V_ITEM_CD);//V_ITEM_CD
					cs.setString(7, "");//V_S_BP_CD
					cs.setString(8, "");//V_TAX_BILL_TYPE
					cs.setString(9, V_ISSUED_DT);//V_ISSUED_DT
					cs.setString(10, "");//V_VAT_INC
					cs.setString(11, V_VAT_TYPE);//V_VAT_TYPE
					cs.setString(12, V_VAT_RATE);//V_VAT_RATE
					cs.setString(13, "");//V_CUR
					cs.setString(14, "");//V_XCH_RATE
					cs.setString(15, V_BILL_QTY);//V_BILL_QTY
					cs.setString(16, "");//V_NET_AMT
					cs.setString(17, "");//V_NET_LOC_AMT
					cs.setString(18, V_VAT_AMT);//V_VAT_AMT
					cs.setString(19, V_VAT_AMT);//V_VAT_LOC_AMT
					cs.setString(20, V_COST_CD);//V_COST_CD
					cs.setString(21, "");//V_BIZ_AREA_CD
					cs.setString(22, V_BILL_NO);//V_BILL_NO
					cs.setString(23, V_BILL_SEQ);//V_BILL_SEQ
					cs.setString(24, "");//V_POST_FLAG
					cs.setString(25, "");//V_REMARKS
					cs.setString(26, V_USR_ID);//V_USR_ID
					cs.setString(27, V_BILL_PRICE);//V_BILL_PRICE
					cs.setString(28, V_BILL_LOC_AMT);//V_BILL_AMT
					cs.registerOutParameter(29, com.tmax.tibero.TbTypes.CURSOR);

					cs.executeQuery();

					response.setContentType("text/plain; charset=UTF-8");
					PrintWriter pw = response.getWriter();
					pw.print("success");
					pw.flush();
					pw.close();

				}
			} else {

				JSONObject jsondata = JSONObject.fromObject(jsonData);
				V_TYPE = jsondata.get("V_TYPE") == null ? "" : jsondata.get("V_TYPE").toString();
				
				String V_TAX_BILL_SEQ = jsondata.get("BILL_SEQ") == null ? "" : jsondata.get("BILL_SEQ").toString();
				String V_ITEM_CD = jsondata.get("ITEM_CD") == null ? "" : jsondata.get("ITEM_CD").toString();
				String V_COST_CD = jsondata.get("COST_CD") == null ? "" : jsondata.get("COST_CD").toString();
				String V_VAT_TYPE = jsondata.get("VAT_TYPE") == null ? "" : jsondata.get("VAT_TYPE").toString();
				String V_VAT_RATE = jsondata.get("VAT_RATE") == null ? "" : jsondata.get("VAT_RATE").toString();
				String V_BILL_NO = jsondata.get("BILL_NO") == null ? "" : jsondata.get("BILL_NO").toString();
				String V_BILL_SEQ = jsondata.get("BILL_SEQ") == null ? "" : jsondata.get("BILL_SEQ").toString();
				String V_VAT_AMT = jsondata.get("VAT_AMT") == null ? "" : jsondata.get("VAT_AMT").toString();
				String V_BILL_QTY = jsondata.get("BILL_QTY") == null ? "" : jsondata.get("BILL_QTY").toString();
				String V_BILL_AMT = jsondata.get("BILL_LOC_AMT") == null ? "" : jsondata.get("BILL_LOC_AMT").toString();
				String V_BILL_LOC_AMT = jsondata.get("BILL_LOC_AMT") == null ? "" : jsondata.get("BILL_LOC_AMT").toString();
				String V_BILL_PRICE = jsondata.get("BILL_PRC") == null ? "" : jsondata.get("BILL_PRC").toString();

				cs = conn.prepareCall("call DISTR_S_TAX.USP_S_TAX_DISTR(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				cs.setString(1, V_TYPE);//V_TYPE
				cs.setString(2, V_COMP_ID);//V_COMP_ID
				cs.setString(3, V_TAX_BILL_NO);//V_TAX_BILL_NO
				cs.setString(4, V_TAX_BILL_SEQ);//V_TAX_BILL_SEQ
				cs.setString(5, V_TAX_DOC_NO);//V_TAX_BILL_DOC_NO
				cs.setString(6, V_ITEM_CD);//V_ITEM_CD
				cs.setString(7, "");//V_S_BP_CD
				cs.setString(8, "");//V_TAX_BILL_TYPE
				cs.setString(9, V_ISSUED_DT);//V_ISSUED_DT
				cs.setString(10, "");//V_VAT_INC
				cs.setString(11, V_VAT_TYPE);//V_VAT_TYPE
				cs.setString(12, V_VAT_RATE);//V_VAT_RATE
				cs.setString(13, "");//V_CUR
				cs.setString(14, "");//V_XCH_RATE
				cs.setString(15, V_BILL_QTY);//V_BILL_QTY
				cs.setString(16, "");//V_NET_AMT
				cs.setString(17, "");//V_NET_LOC_AMT
				cs.setString(18, V_VAT_AMT);//V_VAT_AMT
				cs.setString(19, V_VAT_AMT);//V_VAT_LOC_AMT
				cs.setString(20, V_COST_CD);//V_COST_CD
				cs.setString(21, "");//V_BIZ_AREA_CD
				cs.setString(22, V_BILL_NO);//V_BILL_NO
				cs.setString(23, V_BILL_SEQ);//V_BILL_SEQ
				cs.setString(24, "");//V_POST_FLAG
				cs.setString(25, "");//V_REMARKS
				cs.setString(26, V_USR_ID);//V_USR_ID
				cs.setString(27, V_BILL_PRICE);//V_BILL_PRICE
				cs.setString(28, V_BILL_LOC_AMT);//V_BILL_AMT
				cs.registerOutParameter(29, com.tmax.tibero.TbTypes.CURSOR);

				cs.executeQuery();

				response.setContentType("text/plain; charset=UTF-8");
				PrintWriter pw = response.getWriter();
				pw.print("success");
				pw.flush();
				pw.close();

			}

			/*하단 헤더 I / U*/
		} else if (V_TYPE.equals("IH") || V_TYPE.equals("UH")) {

			String V_S_BP_CD = request.getParameter("V_S_BP_CD") == null ? "" : request.getParameter("V_S_BP_CD").toUpperCase();
			String V_ISSUED_DT = request.getParameter("V_ISSUED_DT") == null ? "" : request.getParameter("V_ISSUED_DT").toUpperCase().substring(0, 10);
			String V_TAX_BILL_TYPE = request.getParameter("V_TAX_BILL_TYPE") == null ? "" : request.getParameter("V_TAX_BILL_TYPE").toUpperCase();
			String V_BIZ_AREA_CD = request.getParameter("V_BIZ_AREA_CD") == null ? "" : request.getParameter("V_BIZ_AREA_CD").toUpperCase();
			String V_TAX_BILL_DOC_NO = request.getParameter("V_TAX_DOC_NO") == null ? "" : request.getParameter("V_TAX_DOC_NO").toUpperCase();
			String V_VAT_TYPE = request.getParameter("V_VAT_TYPE") == null ? "" : request.getParameter("V_VAT_TYPE").toUpperCase();
			String V_NET_AMT = request.getParameter("V_NET_AMT") == null ? "" : request.getParameter("V_NET_AMT").toUpperCase();
			String V_VAT_RATE = request.getParameter("V_VAT_RATE") == null ? "" : request.getParameter("V_VAT_RATE").toUpperCase();
			String V_VAT_AMT = request.getParameter("V_VAT_AMT") == null ? "" : request.getParameter("V_VAT_AMT").toUpperCase();
			String V_VAT_LOC_AMT = request.getParameter("V_VAT_LOC_AMT") == null ? "" : request.getParameter("V_VAT_LOC_AMT").toUpperCase();
			String V_NET_LOC_AMT = request.getParameter("V_NET_LOC_AMT") == null ? "" : request.getParameter("V_NET_LOC_AMT").toUpperCase();

			String V_TAX_BILL_NO = request.getParameter("V_TAX_BILL_NO") == null ? "" : request.getParameter("V_TAX_BILL_NO").toUpperCase();

			cs = conn.prepareCall("call DISTR_S_TAX.USP_S_TAX_DISTR(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			cs.setString(1, V_TYPE);//V_TYPE
			cs.setString(2, V_COMP_ID);//V_COMP_ID
			cs.setString(3, V_TAX_BILL_NO);//V_TAX_BILL_NO
			cs.setString(4, "");//V_TAX_BILL_SEQ
			cs.setString(5, V_TAX_BILL_DOC_NO);//V_TAX_BILL_DOC_NO
			cs.setString(6, "");//V_ITEM_CD
			cs.setString(7, V_S_BP_CD);//V_S_BP_CD
			cs.setString(8, V_TAX_BILL_TYPE);//V_TAX_BILL_TYPE
			cs.setString(9, V_ISSUED_DT);//V_ISSUED_DT
			cs.setString(10, "");//V_VAT_INC
			cs.setString(11, V_VAT_TYPE);//V_VAT_TYPE
			cs.setString(12, V_VAT_RATE);//V_VAT_RATE
			cs.setString(13, "");//V_CUR
			cs.setString(14, "");//V_XCH_RATE
			cs.setString(15, "");//V_BILL_QTY
			cs.setString(16, V_NET_AMT);//V_NET_AMT
			cs.setString(17, V_NET_LOC_AMT);//V_NET_LOC_AMT
			cs.setString(18, V_VAT_AMT);//V_VAT_AMT
			cs.setString(19, V_VAT_LOC_AMT);//V_VAT_LOC_AMT
			cs.setString(20, "");//V_COST_CD
			cs.setString(21, V_BIZ_AREA_CD);//V_BIZ_AREA_CD
			cs.setString(22, "");//V_BILL_NO
			cs.setString(23, "");//V_BILL_SEQ
			cs.setString(24, "");//V_POST_FLAG
			cs.setString(25, "");//V_REMARKS
			cs.setString(26, V_USR_ID);//V_USR_ID
			cs.setString(27, "");//V_BILL_PRICE
			cs.setString(28, "");//V_BILL_AMT
			cs.registerOutParameter(29, com.tmax.tibero.TbTypes.CURSOR);

			cs.executeQuery();

			if (V_TYPE.equals("IH")) {
				rs = (ResultSet) cs.getObject(29);
				String TAX_NO = "";
				String TAX_DOC_NO = "";

				while (rs.next()) {
					TAX_NO = rs.getString("TAX_NO");
					TAX_DOC_NO = rs.getString("TAX_DOC_NO");
				}

				jsonObject.put("TAX_NO", TAX_NO);
				jsonObject.put("TAX_DOC_NO", TAX_DOC_NO);

				response.setContentType("text/plain; charset=UTF-8");
				PrintWriter pw = response.getWriter();
				pw.print(jsonObject);
				pw.flush();
				pw.close();
			}

		} else if (V_TYPE.equals("I") || V_TYPE.equals("D")) {

			String V_TAX_BILL_NO = request.getParameter("V_TAX_BILL_NO") == null ? "" : request.getParameter("V_TAX_BILL_NO").toUpperCase();

			cs = conn.prepareCall("call DISTR_TEMP_GL.USP_A_TEMP_TX(?,?,?,?,?)");

			cs.setString(1, V_COMP_ID);//V_COMP_ID
			cs.setString(2, V_TYPE);//V_TYPE
			cs.setString(3, V_TAX_BILL_NO);//V_TAX_BILL_NO
			cs.setString(4, V_USR_ID);//V_BL_SEQ
			cs.registerOutParameter(5, com.tmax.tibero.TbTypes.CURSOR);
			cs.executeQuery();

			rs = (ResultSet) cs.getObject(5);

			String V_TEMP_GL_NO = "";
			if (rs.next()) {
				V_TEMP_GL_NO = rs.getString("V_TEMP_GL_NO");
			}

			if (V_TEMP_GL_NO.contains("TG")) {
				/*애니링크 시작*/
				JSONObject anyObject = new JSONObject();
				JSONArray anyArray = new JSONArray();
				JSONObject anySubObject = new JSONObject();

				URL url = null;

				if (V_TYPE.equals("I")) { //확정
					url = new URL("http://123.142.124.155:8088/http/hspf_erp_temp_gl_insert");
				} else if (V_TYPE.equals("D")) { //확정취소
					url = new URL("http://123.142.124.155:8088/http/hspf_erp_temp_gl_cancel");
				}

				URLConnection con = url.openConnection();
				con.setRequestProperty("Accept-Language", "ko-kr,ko;q=0.8,en-us;q=0.5,en;q=0.3");
				con.setDoOutput(true);

				anySubObject.put("V_TEMP_GL_NO", V_TEMP_GL_NO);
				anySubObject.put("V_USR_ID", V_USR_ID);
				anySubObject.put("V_DB_ID", "sa");
				anySubObject.put("V_DB_PW", "hsnadmin");

				anyArray.add(anySubObject);
				anyObject.put("data", anyArray);
				String parameter = anyObject + "";

				OutputStreamWriter wr = new OutputStreamWriter(con.getOutputStream());
				wr.write(parameter);
				wr.flush();

				BufferedReader rd = null;

				rd = new BufferedReader(new InputStreamReader(con.getInputStream(), "UTF-8"));
				String line = null;
				String result = null;
				while ((line = rd.readLine()) != null) {
					result = URLDecoder.decode(line, "UTF-8");
				}

				System.out.println("V_TEMP_GL_NO " + V_TEMP_GL_NO);
				System.out.println(result);

				response.setContentType("text/plain; charset=UTF-8");
				PrintWriter pw = response.getWriter();
				pw.print(result);
				pw.flush();
				pw.close();
			}
		}

	} catch (Exception e) {
		response.setContentType("text/plain; charset=UTF-8");
		PrintWriter pw = response.getWriter();
		pw.print(e.toString());
		pw.flush();
		pw.close();

		e.printStackTrace();
	} finally {
		if (cs != null) try {
			cs.close();
		} catch (SQLException ex) {}
		if (cs2 != null) try {
			cs2.close();
		} catch (SQLException ex) {}
		if (rs != null) try {
			rs.close();
		} catch (SQLException ex) {}
		if (stmt != null) try {
			stmt.close();
		} catch (SQLException ex) {}
		if (conn != null) try {
			conn.close();
		} catch (SQLException ex) {}
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
