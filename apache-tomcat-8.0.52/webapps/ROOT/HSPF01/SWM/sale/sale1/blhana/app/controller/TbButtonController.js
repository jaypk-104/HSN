/*
 * File: app/controller/TbButtonController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('blhsna.controller.TbButtonController', {
    extend: 'Ext.app.Controller',

    stores: [
        'BlHsnaInvDtlStore',
        'BlHsnaInvHdrStore',
        'BlHsnaStore',
        'PackHsnaStore'
    ],

    control: {
        "#selBtn": {
            click: 'selBtnClick'
        },
        "#saveBtn": {
            click: 'saveBtnClick'
        },
        "#delBtn": {
            click: 'delBtnClick'
        },
        "#CfmBtn": {
            click: 'CfmBtnClick'
        },
        "#CfmCancelBtn": {
            click: 'CfmCancelBtnClick'
        },
        "#grid1": {
            itemclick: 'gridClick'
        },
        "#grid2": {
            itemclick: 'grid2Click'
        },
        "#regBtn": {
            click: 'regBtnClick'
        },
        "#cancelBtn": {
            click: 'cancelBtnClick'
        },
        "mysearchform textfield[name=search_field]": {
            specialkey: 'tfEnter'
        }
    },

    selBtnClick: function(button, e, eOpts) {
        	var store=this.getBlHsnaStoreStore();
           	var storeInvHdr = this.getBlHsnaInvHdrStoreStore();

                store.load({
                	params: {
                		u_lading_from_dt: Ext.getCmp('u_lading_from_dt').getValue(),
                		u_lading_to_dt: Ext.getCmp('u_lading_to_dt').getValue()
                	},
                    callback: function (records, operation, success){
                   },
                   scope: this
                 });


                storeInvHdr.load({
                	params: {
                		u_inv_no: Ext.getCmp('u_inv_no').getValue(), //인보이스번호

                        	//GR
                        		u_lading_from_dt: Ext.getCmp('u_lading_from_dt').getValue(),
                        		u_lading_to_dt: Ext.getCmp('u_lading_to_dt').getValue()
                	},
                	callback: function (records, operation, success){
                	},
                	scope: this
                });

    },

    saveBtnClick: function(button, e, eOpts) {
        	var store = this.getBlHsnaStoreStore();
        		var flag = '';
        var gridRecord = Ext.getCmp('grid1').getSelectionModel().getSelection();

            	//store.each(function(record, idx) {
                for(var i = 0; i <gridRecord.length; i++){
            		//console.log(record.get('BL_DOC_NO'));
            		if(gridRecord[i].data['BL_DOC_NO'] == undefined || gridRecord[i].data['BL_DOC_NO']  == ''  ) {
            			flag = 'N';
            			msg = 'BL 번호를 입력하세요.';
            			break;
            		}
            		else if(gridRecord[i].data['CC_DOC_NO'] == undefined) {
            			flag = 'N';
            			msg = '통관번호를 입력하세요.';
        				break;
            		}
            		else if(gridRecord[i].data['BL_LOADING_DT'] == undefined) {
            			flag = 'N';
            			msg = '선적일을 입력하세요';
            			break;
            		}
            		else {
            			flag = 'Y';
            		}
            	};

            	if(flag == 'Y') {
        			store.sync({
        				params: {
        	                V_USR: parent.Ext.getCmp('GUSER_ID').getValue(),
        				},
        				callback: function(records, operation, success){
        					//store.reload();
        					var tbController = blhsna.app.getController("TbButtonController");
            				tbController.selBtnClick();
        				},
        				scope: this
        			});
            	} else {
            		Ext.Msg.alert('확인', msg);
            	}
    },

    delBtnClick: function(button, e, eOpts) {
        alert('delete');
    },

    CfmBtnClick: function(button, e, eOpts) {
        	var store = this.getBlHsnaStoreStore();
            	var gridObj = Ext.getCmp('grid1');
            	var gridRecord = gridObj.getSelectionModel().getSelection();

            	if(gridRecord.length==0) {
            		Ext.Msg.alert('확인', '확정할 행을 선택하세요.');
            	} else {
            		for(var c=0; c<gridRecord.length; c++) {
            			gridRecord[c].set('V_TYPE', 'C');
            		}
        			store.sync({
            			params: {
        	                V_USR: parent.Ext.getCmp('GUSER_ID').getValue(),
            			},
            			callback: function(records, operation, success){
            				store.reload();
            			},
            			scope: this
            		});
            	}
    },

    CfmCancelBtnClick: function(button, e, eOpts) {
        var store = this.getBlHsnaStoreStore();
            	var gridObj = Ext.getCmp('grid1');
            	var gridRecord = gridObj.getSelectionModel().getSelection();

            	var flag = 'T';
            	var msg = '';
            	
            	for(var i = 0 ; i < gridRecord.length ; i ++){
            		if(gridRecord[i].data['SEND_YN'] == 'Y'){
            			flag = 'F';
            			msg = '해외 전송된 데이터는 확정 취소 불가능합니다. <br>전산팀에 문의하세요.';
            		}
            	}
            	
            	if(flag == 'T'){
            		if(gridRecord.length==0) {
                		Ext.Msg.alert('확인', '확정취소할 행을 선택하세요.');
                	} 
                	else {
                		for(var c=0; c<gridRecord.length; c++) {
                			gridRecord[c].set('V_TYPE', 'A');
                		}
            			store.sync({
                			params: {
            	                V_USR: parent.Ext.getCmp('GUSER_ID').getValue(),
                			},
                			callback: function(records, operation, success){
                				store.reload();
                			},
                			scope: this
                		});
                	}
            	}
            	else{
            		Ext.Msg.alert('확인', msg);
            	}
            	
            	
    },

    gridClick: function(dataview, record, item, index, e, eOpts) {
        var gridObj1 = Ext.getCmp('grid1');
            	var gridObj3 = Ext.getCmp('grid3');
            	var store = this.getBlHsnaStoreStore();
            	var invDtlStore=this.getBlHsnaInvDtlStoreStore();

            	if(gridObj1 != null) {
            		var gridRecord1 = gridObj1.getSelectionModel().getSelection();
            		for(var i = 0; i < gridRecord1.length; i++){
            			invDtlStore.load({
        	            	params: {
        	            		V_BL_MGM_NO : gridRecord1[i].data['BL_MGM_NO']
        	            	},
        	                callback: function (records, operation, success){
        	               },
        	               scope: this
        	             });
            		}
            	}
    },

    grid2Click: function(button) {
        	var gridObj1 = Ext.getCmp('grid1');
            	var gridObj2 = Ext.getCmp('grid2');
            	var store = this.getBlHsnaStoreStore();
            	var invoiceRegStore=this.getBlHsnaInvHdrStoreStore();

            	if(gridObj2 != null) {
            		var gridRecord1 = gridObj1.getSelectionModel().getSelection();
            		var gridRecord2 = gridObj2.getSelectionModel().getSelection();
            		if(gridRecord1.length==0) {
        	    		Ext.Msg.alert('확인', '왼쪽에서 BL번호를 선택하세요');
            		}
            	}
    },

    regBtnClick: function(button, e, eOpts) {
        var storeInvHdr = this.getBlHsnaInvHdrStoreStore();
            	var storeInvDtl = this.getBlHsnaInvDtlStoreStore();
            	var gridObj1 = Ext.getCmp('grid1');
            	var gridObj2 = Ext.getCmp('grid2');
            	var gridRecord1 = gridObj1.getSelectionModel().getSelection();
            	var gridRecord2 = gridObj2.getSelectionModel().getSelection();

            	if(gridRecord1.length==0) {
            		Ext.Msg.alert('확인', 'BL번호를 선택하세요');
            	} else if(gridRecord2.length==0){
            		Ext.Msg.alert('확인', '인보이스를 선택하세요');
            	} else if(gridRecord1[0].data['CFM_YN']=='Y') {
            		Ext.Msg.alert('확인', '이미 확정된 내역입니다.');
            	}
        		else {
                    console.log('등록 버튼 클릭 ');
        			storeInvHdr.sync({
            			params: {
            				V_BL_MGM_NO: gridRecord1[0].data['BL_MGM_NO'],
            				V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue()
            			},
            			callback: function(records, operation, success) {
            				Ext.Msg.alert('확인', '저장되었습니다.');
            				Ext.getCmp('tabpanel1').setActiveTab(1);

            				storeInvHdr.load({
            		        	params: {
            		        		u_inv_no: Ext.getCmp('u_inv_no').getValue() //인보이스번호
            		        	},
            		        	callback: function (records, operation, success){
            		        	},
            		        	scope: this
            		        });

            				storeInvDtl.load({
            	            	params: {
            	            		V_BL_MGM_NO : gridRecord1[0].data['BL_MGM_NO']
            	            	},
            	                callback: function (records, operation, success){
            	               },
            	               scope: this
            	             });
            			},
            			scope: this
            		});
            	}
    },

    cancelBtnClick: function(button, e, eOpts) {
        	var storeInvHdr = this.getBlHsnaInvHdrStoreStore();
            	var storeInvDtl = this.getBlHsnaInvDtlStoreStore();
            	var gridObj3 = Ext.getCmp('grid3');
            	var gridRecord3 = gridObj3.getSelectionModel().getSelection();

            	var gridObj = Ext.getCmp('grid1');
            	var gridRecord = gridObj.getSelectionModel().getSelection();

            	if(gridRecord3.length==0) {
            		Ext.Msg.alert('확인', '삭제할 행을 선택하세요');
            	} if(gridRecord[0].data['CFM_YN']=='Y') {
            		Ext.Msg.alert('확인', 'BL 확정된 내역입니다. 취소할 수 없습니다.');
            	}
            	else {
                    console.log('등록취소 버튼 클릭');
            		storeInvDtl.sync({
            			params: {
        //        				V_BL_MGM_NO: gridRecord1[0].data['BL_MGM_NO'],
            				V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue()
            			},
            			callback: function(records, operation, success) {
            				Ext.Msg.alert('확인', '취소되었습니다.');
            				Ext.getCmp('tabpanel1').setActiveItem(0);

            				storeInvHdr.load({
            		        	params: {
            		        		u_inv_no: Ext.getCmp('u_inv_no').getValue() //인보이스번호
            		        	},
            		        	callback: function (records, operation, success){
            		        	},
            		        	scope: this
            		        });

            				storeInvDtl.load({
            	            	params: {
            	            		V_BL_MGM_NO : gridRecord[0].data['BL_MGM_NO']
            	            	},
            	                callback: function (records, operation, success){
            	               },
            	               scope: this
            	             });
            			}
            		});
        //	    		for(var i = 0; i < gridRecord3.length; i++){
        //	    			Ext.Ajax.request({
        //	    				url:'/swm/sale/blhsna/sql/InvRegInsert.do',
        //	    				method: 'post',
        //	    				params: {
        //	    					V_TYPE: 'D',
        //	    					V_BL_MGM_NO: gridRecord3[i].data['BL_MGM_NO'],
        //	    					V_INV_MGM_NO: gridRecord3[i].data['INV_MGM_NO'],
        //	    					V_INV_NO: gridRecord3[i].data['INV_MGM_SEQ'],
        //	    					V_USR : parent.Ext.getCmp('GUSER_ID').getValue()
        //	    				},
        //	    				callback: function (records, operation, success){
        //	    					storeInvHdr.reload();
        //	    					storeInvDtl.reload();
        //	    	               },
        //	    				success: function(response) {
        //	    				},
        //	    				scope: this
        //	    			});
        //	    		}
            	}
    },

    tfEnter: function(field, e, eOpts) {
        	if (e.getKey() == e.ENTER) {
        		this.selBtnClick();
        	}
    }

});
