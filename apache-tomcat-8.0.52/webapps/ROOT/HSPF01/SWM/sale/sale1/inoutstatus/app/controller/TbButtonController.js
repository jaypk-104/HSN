/*
 * File: app/controller/TbButtonController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('inoutStauts.controller.TbButtonController', {
    extend: 'Ext.app.Controller',

    stores: [
        'MyStore'
    ],

    control: {
        "#selBtn": {
            click: 'selBtnClick'
        },
        "#delBtn": {
            click: 'delBtnClick'
        },
        "#clsBtn": {
            click: 'clsBtnClick'
        },
        "mysearchform textfield[name=search_field]": {
            specialkey: 'tfEnter'
        }
    },

    selBtnClick: function(button, e, eOpts) {
        // 조회버튼 클릭 후 동작하는 함수
                var store = this.getMyStoreStore();

                store.load({
                	params: {
                		mast_po_no: Ext.getCmp('mast_po_no').getValue(),	// 발주번호
                		item_cd: Ext.getCmp('item_cd').getValue(),			// 품목코드
                		cust_po_no: Ext.getCmp('cust_po_no').getValue(),	// HSNA발주번호
                		bp_cdORnm: Ext.getCmp('bp_cdORnm').getValue(),		// 공급사코드 또는 공급사명
                		cont_no: Ext.getCmp('cont_no').getValue(),			// 컨테이너번호
                		inv_no: Ext.getCmp('inv_no').getValue(),			// 인보이스번호
                		asn_no: Ext.getCmp('asn_no').getValue(),			// ASN번호
                		dlvy_from_dt: Ext.getCmp('dlvy_from_dt').getValue(),// 납기요청일 시작
                		dlvy_to_dt: Ext.getCmp('dlvy_to_dt').getValue(),	// 납기요청일 끝
                		dn_from_dt: Ext.getCmp('dn_from_dt').getValue(),	// 출고일자 시작
                		dn_to_dt: Ext.getCmp('dn_to_dt').getValue(),		// 출고일자 끝
                		gr_from_dt: Ext.getCmp('gr_from_dt').getValue(),	// 입고일자 시작
                		gr_to_dt: Ext.getCmp('gr_to_dt').getValue(),		// 입고일자 끝
                		V_chk_AA: Ext.getCmp('chk_AA').getValue(),
                		V_chk_AU: Ext.getCmp('chk_AU').getValue(),
                		V_chk_AM: Ext.getCmp('chk_AM').getValue(),
                		V_chk_TN: Ext.getCmp('chk_TN').getValue(),
                	},
                    callback: function (records, operation, success){
                   },
                   scope: this
                 });
    },

    delBtnClick: function(button, e, eOpts) {
        	// 출고삭제버튼 클릭 후 동작하는 함수
            	var ivFlag = 0;			// 인보이스 존재여부 확인 플래그(1이면 존재)
            	var releaseFlag = 0;	// 출고일자 존재여부 확인 플래그(0이면 존재)
            	var store = this.getMyStoreStore();
            	var gridObj = Ext.getCmp('myGrid');
            	var gridRecord = gridObj.getSelectionModel().getSelection();	// 체크된 그리드들의 데이터
            	if(gridRecord.length==0) {
            		// 체크가 아무것도 안되어있으면 경고창을 띄움
            		Ext.Msg.alert('확인', '삭제할 행을 선택하세요.');
            	}
            	else if (gridRecord.length==1){
        			// 체크된 그리드를 검색하여 인보이스, 출고일자 존재여부 확인
        			if(gridRecord[0].data['INV_NO'] != null){
        				ivFlag = 1;
        			}
        			if(gridRecord[0].data['DN_DT'] == null){
        				releaseFlag = 1;
        			}

            		if(ivFlag == 0 && releaseFlag == 0){
            			// 인보이스가 존재하지 않고 출고일자가 존재하는 경우 삭제 진행

            			function addCommas(nStr)
            			{
            				// 천단위 콤마를 찍어주는 함수
            			    nStr += '';
            			    x = nStr.split('.');
            			    x1 = x[0];
            			    x2 = x.length > 1 ? ',' + x[1] : '';
            			    var rgx = /(\d+)(\d{3})/;
            			    while (rgx.test(x1)) {
            			        x1 = x1.replace(rgx, '$1' + ',' + '$2');
            			    }
            			    return x1 + x2;
            			}
            			var dn_qty = addCommas(gridRecord[0].data['DN_QTY']);

            			var myStr = "";
            			myStr += "발주번호 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: " + gridRecord[0].data['MAST_PO_NO'] + "<br>";
            			myStr += "발주순번 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: " + gridRecord[0].data['MAST_PO_SEQ'] + "<br>";
            			myStr += "공급사코드 &nbsp; &nbsp; &nbsp; &nbsp; : " + gridRecord[0].data['BP_CD'] + "<br>";
            			myStr += "ASN번호 &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp; &nbsp;: " + gridRecord[0].data['ASN_NO'] + "<br>";
            			myStr += "컨테이너번호 &nbsp; &nbsp; : " + gridRecord[0].data['CONT_NO'] + "<br>";
            			myStr += "품목코드 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: " + gridRecord[0].data['ITEM_CD'] + "<br>";
            			myStr += "출고일자 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: " + gridRecord[0].data['DN_DT'] + "<br>";
            			myStr += "출고수량 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: " + dn_qty + "<br>";
            			myStr += "해당 데이터의 출고삭제를 진행하겠습니다.<br>";
            			myStr += "진행 하시겠습니까?";
            			Ext.Msg.confirm("출고삭제", myStr , function(btn){
            				if(btn == 'yes'){
            					 store.sync({
            						 params: {
        				        		v_usr_id: parent.Ext.getCmp('GUSER_ID').getValue()	// 유저ID
            				        	},
            						 callback: function(){
            							//console.log("sync callback");
            							store.reload();
            						 },
            						 success: function(){
            							 //console.log("sync success");
            						 },
            						 failure: function(){
            							 //console.log("sync fail");
            						 }
            					 });
            					Ext.Msg.alert("출고삭제","완료.", function(btn, value, opt){
            					});
            				}
            			});
            		}
            		else{
            			// 인보이스가 존재하거나 출고일자가 존재하지 않는경우
            			var myStr = "";		// 출력할 문장을 위한 변수
            			myStr += "아래의 이유때문에 삭제가 불가능합니다. <br>";
            			if(ivFlag == 1){
            				myStr += "    ●인보이스 등록 완료 데이터 존재.<br>";
            			}
            			if(releaseFlag == 1){
            				myStr += "    ●출고 안된 데이터 존재.<br>";
            			}
            			Ext.Msg.alert("삭제 실패", myStr);
            		}
            	}
            	else{
            		Ext.Msg.alert('경고', '2개 이상의 행을 삭제할 수 없습니다.');
            	}
    },

    clsBtnClick: function(button, e, eOpts) {
        var tab=parent.Ext.getCmp('myTab');
        var activeTab=tab.getActiveTab();
        var tabIndex=tab.items.indexOf(activeTab);
        tab.remove(tabIndex,true);
    },

    tfEnter: function(field, e, eOpts) {
        	if (e.getKey() == e.ENTER) {
        		this.selBtnClick();
        	}
    }

});
