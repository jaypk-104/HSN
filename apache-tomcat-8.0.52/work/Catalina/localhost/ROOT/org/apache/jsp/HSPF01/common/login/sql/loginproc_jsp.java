/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.52
 * Generated at: 2021-01-29 04:26:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.HSPF01.common.login.sql;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.crypto.EncryptedPrivateKeyInfo;
import java.security.MessageDigest;
import java.io.PrintWriter;
import java.net.URLDecoder;
import java.util.HashMap;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import java.sql.*;
import java.util.Enumeration;
import java.util.Map;
import java.sql.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.RSAPublicKeySpec;
import javax.crypto.Cipher;

public final class loginproc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


private String decryptRsa(PrivateKey privateKey, String securedValue) throws Exception {
	//  System.out.println("will decrypt : " + securedValue);
	  Cipher cipher = Cipher.getInstance("RSA");
	  byte[] encryptedBytes = hexToByteArray(securedValue);
	  cipher.init(Cipher.DECRYPT_MODE, privateKey);
	  byte[] decryptedBytes = cipher.doFinal(encryptedBytes);
	  String decryptedValue = new String(decryptedBytes, "utf-8"); // 문자 인코딩 주의.
	  return decryptedValue;
	  }
		
		public static byte[] hexToByteArray(String hex) {
	      if (hex == null || hex.length() % 2 != 0) {
	          return new byte[]{};
	      }

	      byte[] bytes = new byte[hex.length() / 2];
	      for (int i = 0; i < hex.length(); i += 2) {
	          byte value = (byte)Integer.parseInt(hex.substring(i, i + 2), 16);
	          bytes[(int) Math.floor(i / 2)] = value;
	      }
	      return bytes;
	  }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/HSPF01/common/DB_Connection.jsp", Long.valueOf(1551915626000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("java.security.KeyPairGenerator");
    _jspx_imports_classes.add("javax.naming.InitialContext");
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("java.security.MessageDigest");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("java.security.PublicKey");
    _jspx_imports_classes.add("javax.naming.NamingException");
    _jspx_imports_classes.add("org.json.simple.JSONArray");
    _jspx_imports_classes.add("javax.crypto.Cipher");
    _jspx_imports_classes.add("javax.crypto.EncryptedPrivateKeyInfo");
    _jspx_imports_classes.add("org.json.simple.JSONObject");
    _jspx_imports_classes.add("java.util.regex.Matcher");
    _jspx_imports_classes.add("java.security.PrivateKey");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("javax.sql.DataSource");
    _jspx_imports_classes.add("java.security.spec.RSAPublicKeySpec");
    _jspx_imports_classes.add("javax.naming.Context");
    _jspx_imports_classes.add("java.util.regex.Pattern");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	Connection conn = null;
	PreparedStatement pstmt = null;
	Statement stmt = null;

	try {
		Context initCtx = new InitialContext();
		Context envCtx = (Context) initCtx.lookup("java:comp/env");
		DataSource dataSource = (DataSource) envCtx.lookup("jdbc/Tibero");
		conn = dataSource.getConnection();
		stmt = conn.createStatement();

	} catch (NamingException e) {

	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("utf-8");
	JSONObject jsonObject = new JSONObject();
	JSONArray jsonArray = new JSONArray();
	JSONObject subObject = null;
	ResultSet rs = null;

	String strCompId = request.getParameter("comp_id");
	String strId = request.getParameter("user_id");
	String strRole = request.getParameter("role_cd");
	
	
	//RSA 복호화 부분 추가 20200529김장운
// 	HttpSession session = request.getSession();
    PrivateKey privateKey = (PrivateKey) session.getAttribute("_HSPF_RSA_WEB_Key_");
    
//     System.out.println("------미트숍 도메인 로그인 에러 확인을 위한 로그------");
//    	System.out.println("privateKey : " + privateKey);
//    	System.out.println("id : " + strId);
//    	System.out.println("password : " + request.getParameter("password"));
//     System.out.println("------미트숍 도메인 로그인 에러 확인을 위한 로그------");

     
    String password = "";
    password = decryptRsa(privateKey, request.getParameter("password"));
    
	String strpassword = password.toUpperCase();
	String strpassword_Enc = password;
	String retval = "0";
	
	try {
		
		MessageDigest md = MessageDigest.getInstance("SHA-256");
		md.update(strpassword.getBytes());
		byte byteData[] = md.digest();
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < byteData.length; i++) {
			sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
		}
		StringBuffer hexString = new StringBuffer();
		for (int i = 0; i < byteData.length; i++) {
			String hex = Integer.toHexString(0xff & byteData[i]);
			if (hex.length() == 1) {
				hexString.append('0');
			}
			hexString.append(hex);
		}
		strpassword_Enc = hexString.toString();
		
		final Pattern SpecialChars = Pattern.compile("['`\"\\-#()@;=*/+!$%~]");
		strId = SpecialChars.matcher(strId).replaceAll("Z"); // 특수문자를 Z로 대체하여 비정상적인 입력은 걸러낼수있게. 20180629 김장운.

		String strSql = "";
		strSql += " SELECT COUNT(*) CNT ";
		strSql += " FROM   Z_USR_INFO_HSPF A ";
		strSql += " WHERE  UPPER(A.USR_ID) ='" + strId.toUpperCase() + "' ";
		strSql += " AND    A.PASSWORD      ='" + strpassword_Enc + "' ";
		strSql += " AND    UPPER(A.COMP_ID)='" + strCompId.toUpperCase() + "'";
		strSql += " AND    USE_YN = 'Y'";

		rs = stmt.executeQuery(strSql);

		while (rs.next()) {
			retval = rs.getString("CNT");
		}
		
		if(retval.equals("1")){
			/*세션생성*/
			session.setAttribute("comp_id", strCompId);
			session.setAttribute("user_id", strId);
		}

		subObject = new JSONObject();

		subObject.put("cnt", retval);
		jsonArray.add(subObject);
		jsonObject.put("success", true);
		jsonObject.put("resultList", jsonArray);

		response.setContentType("text/plain; charset=UTF-8");
		PrintWriter pw = response.getWriter();
		pw.print(jsonObject);
		pw.flush();
		pw.close();

	} catch (Exception e) {
		e.printStackTrace();
		throw new RuntimeException();
	} finally {
		if (rs != null) try {
			rs.close();
		} catch (SQLException ex) {}
		if (stmt != null) try {
			stmt.close();
		} catch (SQLException ex) {}
		if (conn != null) try {
			conn.close();
		} catch (SQLException ex) {}
	}

      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
