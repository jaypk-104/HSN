/*
 * File: app/controller/OderViewCtrl.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('rawpurchase.controller.OderViewCtrl', {
    extend: 'Ext.app.Controller',

    models: [
        'RawPurSave',
        'RawPurHeadSave',
        'RawPurModel'
    ],
    stores: [
        'RawPurPopStore',
        'RawHeadPopSave',
        'RawPurStore'
    ],
    views: [
        'OrderView',
        'MyViewport'
    ],

    control: {
        "#dlvDtPop": {
            blur: 'onDatefieldBlur'
        },
        "#svBtnPop": {
            click: 'onButtonClick'
        },
        "#remarkPop": {
            blur: 'onTextfieldBlur'
        },
        "#goalLocPop": {
            blur: 'onTextfieldBlur1'
        },
        "#delBtnPop": {
            click: 'onButtonClick1'
        }
    },

    onDatefieldBlur: function(component, event, eOpts) {
        var store=this.getRawPurPopStoreStore();
        var store_cnt=store.getCount();
        for(i=0;i<store_cnt;i++)
        {
            var record=store.getAt(i);


            record.set('dlvy_hop_dt2',Ext.getCmp('dlvDtPop').getValue());
            record.set('dlvy_hop_dt',Ext.getCmp('dlvDtPop').getValue());

        }


    },

    onButtonClick: function(button, e, eOpts) {
        var store=this.getRawPurPopStoreStore();
        var mCheck='N';
        if (Ext.getCmp('dlvDtPop').getValue()==='' || Ext.getCmp('dlvDtPop').getValue()===null)
        {
        	Ext.Msg.alert('Title',Ext.getCmp('dlvDtPop').getValue());
//            Ext.Msg.alert("Warning",'납기요청일을 입력 하십시오.');
            mCheck='Y1';
        }
        else
        {
            var store_cnt=store.getCount();
            for(i=0;i<store_cnt;i++)
            {
                var record=store.getAt(i);
                var so_qtys=record.get('so_qty');
                if(so_qtys===0.00 || so_qtys==='0.00' || so_qtys==='' || so_qtys==='0' || so_qtys===0)
                {
                    mCheck='Y2';
                    break;
                }
            }


        }
        if (mCheck==='Y2')
        {

            Ext.Msg.alert("Warning",'주문수량을 입력 하십시요.');

        }
        if (mCheck==='N')
        {
            var store2=this.getRawHeadPopSaveStore();
            var store3=this.getRawPurStoreStore();
            var nows =new Date();
            store2.load({
                params:{
                    crud:'I',
                    s_req_no:'',
                    bp_cd:Ext.getCmp('gBpCd').getValue(),
                    bp_usr_id:Ext.getCmp('gUserId').getValue(),
                    so_dt:nows,
                    dlvy_hop_dt:Ext.getCmp('dlvDtPop').getValue(),
                    usr_id:Ext.getCmp('gUserId').getValue(),
                    remark:Ext.getCmp('remarkPop').getValue(),
                    goal_location:Ext.getCmp('goalLocPop').getValue()
                },
                callback : function(records,operations,success)
                {
                    var acct_info;
                    acct_info=records[0].data;
                    
                    var s_req_nos= acct_info.ret_val;
                    var store_cnt=store.getCount();

                    Ext.getCmp('g_s_req_no').setValue(s_req_nos);
                    for(i=0;i<store_cnt;i++)
                    {
                        var record1=store.getAt(i);
                        record1.set('s_req_no',s_req_nos);

                    }
                    store.sync({
                    	params:{
                    		crud:'I',
                    		usr_id:Ext.getCmp('gUserId').getValue(),
                    	},
                        callback : function(records,operations,success){
                            store3.load({

                                params:{
                                    bp_cd:Ext.getCmp('gBpCd').getValue(),
                                    bp_item_cd:Ext.getCmp('txtBpItemCd').getValue(),
                                    item_cd:Ext.getCmp('txtItemCd').getValue(),
                                    item_nm:Ext.getCmp('txtItemNm').getValue(),
                                    spec:Ext.getCmp('txtSpec').getValue(),
                                    maker:Ext.getCmp('txtMaker').getValue(),
                                    bp_item_nm:Ext.getCmp('txtBpItemNm').getValue()
                                },
                                callback : function(records,operations,success){
                                    store2.removeAll();
                                    store.removeAll();
                                    var popwin=Ext.getCmp('OrderView');
                                    popwin.destroy();
                                    var popups246 = Ext.create("rawpurchase.view.OrderCfmView");
                                    //gOderView.show();
                                    popups246.show();
                                       parent.Ext.getCmp(rawpurchase.app.gText).setValue('N');
                                    Ext.Msg.alert("Info",'저장이 완료되었습니다.');

                                }

                            }

                                       );


                        }
                    });



                }
            });

            // store.sync(
            //    {
            //       callback : function(records,operations,success){
            //          var acct_info;
            //        acct_info=records[0].data;
            //     alert(acct_info.ret_val);
            //          Ext.Msg.alert("Info",'저장이 완료되었습니다.');
            //          var popwin=Ext.getCmp('OrderView');
            //          popwin.destroy();

            //    }
            // });


        }



    },

    onTextfieldBlur: function(component, event, eOpts) {
         var store=this.getRawPurPopStoreStore();
                var store_cnt=store.getCount();
                for(i=0;i<store_cnt;i++)
                {
                    var record=store.getAt(i);


                    record.set('remark',Ext.getCmp('remarkPop').getValue());


                }

    },

    onTextfieldBlur1: function(component, event, eOpts) {
          var store=this.getRawPurPopStoreStore();
                        var store_cnt=store.getCount();
                        for(i=0;i<store_cnt;i++)
                        {
                            var record=store.getAt(i);


                            record.set('goal_location',Ext.getCmp('goalLocPop').getValue());


                        }

    },

    onButtonClick1: function(button, e, eOpts) {
        var store=this.getRawPurPopStoreStore();
             var tGrid=Ext.getCmp('popGrid');
                var record = tGrid.getSelectionModel().getSelection();

                store.remove(record);
    }

});
