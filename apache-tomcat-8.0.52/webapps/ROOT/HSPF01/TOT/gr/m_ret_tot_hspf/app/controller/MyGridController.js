/*
 * File: app/controller/MyGridController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('M_RET_TOT_HSPF.controller.MyGridController', {
    extend: 'Ext.app.Controller',	
    stores: ['MyStore', 'MyStore1'],
    control: {
    	"#gridRetBtn": {
    		click: 'gridRetBtnClick'
    	},
        "#gridAddBtn": {
            click: 'gridAddBtnClick'
        },
        "#gridDelBtn": {
            click: 'gridDelBtnClick'
        },
        "#xlsxDown": {
            click: 'xlsxDownClick'
        },
		"#myGrid" : {
			cellclick : 'myGridClick'
		},
    },

    gridRetBtnClick : function(button, e, eOpts) {
		var store = Ext.getStore('MyStore');
		var store1 = Ext.getStore('MyStore1');
		var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
		var flag = '';
		var msg = '';

		flag = 'T';

		for (var i = 0; i < gridRecord.length; i++) {
			if (gridRecord[i].get('V_TYPE') == 'V') {
				gridRecord[i].set('V_TYPE', 'I');
			}
		}
			
		var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
		var flag = '';
		var msg = '';

		for(var i=0; i<gridRecord.length; i++) {
			if(gridRecord[i].data['M_RET_DT'] == null || gridRecord[i].data['M_RET_DT'] == '' || gridRecord[i].data['M_RET_DT'] == undefined ) {
				flag = 'F';
				msg = '입고반품일자를 선택하세요.';
				break;
			} 
			if(gridRecord[i].data['M_RET_QTY'] == 0 ) {
				flag = 'F';
				msg = '입고반품수량을 선택하세요.';
				break;
			} 
			else {
				flag = 'T';
			}
		}
		
		if(flag == 'T') {
			Ext.Msg.confirm('확인', '등록하시겠습니까?' , function(button) {
				if (button == 'yes') {
					var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
					
					store.sync({
						params : {
							V_TYPE : 'SYNC',
							V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
							V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
						},
						callback : function(records, operation, success) {
							var res = records.operations[0]._response.responseText;
							
							if (res.match('Exception')) {
								Ext.Msg.alert('확인', res);
							} else {
								store.reload();
								store1.reload();
							}
						},
						success : function(response) {
						}
					});
				}
			});
		} 
		else {
			Ext.Msg.alert('확인', msg);
		}
	},	

    xlsxDownClick: function(button, e, eOpts) {
        var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d His');
            	var grid = Ext.getCmp('myGrid');
            	grid.saveDocumentAs({
                    type: 'xlsx',
                    title: '출고등록(상단)', //엑셀내타이틀
                    fileName: currentDate+'.xlsx' //엑셀파일이름
        		});
    },
    
    
    myGridClick : function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {

		var store1 = Ext.getStore('MyStore1');
		var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();

		store1.load({
    		params: {
    			V_TYPE: 'SD',
    			V_COMP_ID: parent.Ext.getCmp('GCOMP_ID').getValue(),
    			V_USR_ID: parent.Ext.getCmp('GUSER_ID').getValue(),
    			V_MVMT_NO: gridRecord[0].data['MVMT_NO'],
    		},
    		callback: function(records,operations,success){
    			
    		}
		});

	},
    
});
