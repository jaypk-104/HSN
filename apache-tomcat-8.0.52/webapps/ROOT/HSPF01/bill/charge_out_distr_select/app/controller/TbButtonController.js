/*
 * File: app/controller/TbButtonController.js
 *
 * This file was generated by Sencha Architect version 4.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CHARGE_OUT_DISTR_SELECT.controller.TbButtonController', {
    extend: 'Ext.app.Controller',

    stores: [
        'MyStore'
    ],

    control: {
        "#selBtn": {
            click: 'selBtnClick'
        },
        "#saveBtn": {
            click: 'saveBtnClick'
        },
        "#delBtn": {
            click: 'delBtnClick'
        },
        "#clsBtn": {
            click: 'clsBtnClick'
        },
        "mysearchform textfield[name=search_field]": {
            specialkey: 'tfEnter'
        }
    },

    selBtnClick: function(button, e, eOpts) {

        var store = this.getMyStoreStore();
        store.removeAll();
        store.load({
            params: {
                V_TYPE: 'S',
                V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
                V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
                V_BP_CD : parent.Ext.getCmp('GBP_CD').getValue(),
                V_BASE_FROM_DT : Ext.getCmp('V_BASE_FROM_DT').getValue(),
                V_BASE_TO_DT : Ext.getCmp('V_BASE_TO_DT').getValue(),
                V_PAY_YN : Ext.getCmp('V_PAY_YN').getValue(),
                V_ERP_YN : Ext.getCmp('V_ERP_YN').getValue(),
                V_BL_DOC_NO : Ext.getCmp('V_BL_DOC_NO').getValue(),
                V_GL_YN : Ext.getCmp('V_GL_YN').getValue(),
            },
            callback: function(records,operations,success){
                var store = Ext.getCmp('myGrid').getStore();
                var allRecord = store.getRange();
                var totalAmount = 0;
                var payAmount = 0;
                var unpayAmount = 0;
                for(var i = 0 ; i < allRecord.length ; i ++){
                    totalAmount += Number(allRecord[i].data['TOTAL_AMT']);
                    if(allRecord[i].data['PAY_YN'] == 'Y'){
                        payAmount += Number(allRecord[i].data['TOTAL_AMT']);
                    }
                    else{
                        unpayAmount += Number(allRecord[i].data['TOTAL_AMT']);
                    }
                }
                Ext.getCmp('G_TOTAL_AMOUNT').setValue(Ext.util.Format.number(totalAmount, '0,000'));
                Ext.getCmp('G_PAY_AMOUNT').setValue(Ext.util.Format.number(payAmount, '0,000'));
                Ext.getCmp('G_UNPAY_AMOUNT').setValue(Ext.util.Format.number(unpayAmount, '0,000'));
            }
        });
    },

    saveBtnClick: function(button, e, eOpts) {
        alert('save');
    },

    delBtnClick: function(button, e, eOpts) {
        var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
        var store = this.getMyStoreStore();
        var flag = 0; // 1이면 삭제불가능


        if(gridRecord.length >= 1){
            for(var i = 0 ; i < gridRecord.length ; i ++){
                if(gridRecord[i].data['PAY_YN'] == 'Y'){
                    flag = 1;
                }
            }
            if(flag == 1){
                Ext.Msg.alert('확인', '지급처리 완료된 항목이 존재하여 삭제 불가능합니다.');
            }
            else{
                Ext.Msg.confirm('확인','삭제하시겠습니까?', function(button){
                    if(button == 'yes') {
                        for(var i = 0 ; i < gridRecord.length ; i ++){
                            if(gridRecord[i].data['V_TYPE'] == 'V'){
                                gridRecord[i].set('V_TYPE', 'D');
                            }
                        }
                        store.sync({
                            params:{
                                V_TYPE: 'SYNC',
                                V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
                                V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
                                V_BP_CD : parent.Ext.getCmp('GBP_CD').getValue(),
                            },
                            callback: function(){
                                store.reload();
                            }
                        });
                    }
                });
            }
        }
        else{
            Ext.Msg.alert('확인','삭제할 항목을 선택해주세요.');
        }
    },

    clsBtnClick: function(button, e, eOpts) {
        var tab=parent.Ext.getCmp('myTab');
        var activeTab=tab.getActiveTab();
        var tabIndex=tab.items.indexOf(activeTab);
        tab.remove(tabIndex,true);
    },

    tfEnter: function(field, e, eOpts) {
        	if (e.getKey() == e.ENTER) {
        		this.selBtnClick();
        	}
    }

});
