/*
 * File: app/controller/MyGridController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Y_PUMS_DISTR.controller.MyGridController', {
    extend: 'Ext.app.Controller',

    control: {
    	/*계약금*/
        "#gridSaveBtn1": {
            click: 'gridSaveBtn1Click'
        },
        "#gridDelBtn1": {
        	click: 'gridDelBtn1Click'
        },
        /*외상*/
        "#gridSaveBtn2": {
        	click: 'gridSaveBtn2Click'
        },
        "#gridDelBtn2": {
        	click: 'gridDelBtn2Click'
        },
        /*이자*/
        "#gridSaveBtn3": {
        	click: 'gridSaveBtn3Click'
        },
        "#gridDelBtn3": {
        	click: 'gridDelBtn3Click'
        },
    },

    /*계약금*/
    gridSaveBtn1Click: function(button, e, eOpts) {

    	 var store1 = Ext.getStore('MyStore1');
    	 var gridRecord = Ext.getCmp('myGrid1').getSelectionModel().getSelection();
         
    		 if(gridRecord.length > 0) {
    				for(var i=0; i<gridRecord.length; i++) {
    					if(gridRecord[i].get('V_TYPE') == 'V' && gridRecord[i].phantom == true) {
    						gridRecord[i].set('V_TYPE', 'I');
    					} else if(gridRecord[i].get('V_TYPE') == 'V' && gridRecord[i].phantom == false) {
    						gridRecord[i].set('V_TYPE', 'U');
    					}
    				}
    		    	store1.sync({
    					params: {
    						V_TYPE : 'SYNC',
    						V_TYPE2 : 'CR',
    						V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
    						V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
    						V_RISK_NO : Ext.getCmp('V_RISK_NO').getValue(),
    					},
    		    		callback: function(records, operation, success) {
    						var res = records.operations[0]._response.responseText;
//    						console.log(res);
    						
    						if(res.match('Exception')) {
    							Ext.Msg.alert('확인', res);
    						} else {
    							store1.reload();
    						}
    					}
    		    	});
    	     	}
    	 
         

    },
    gridDelBtn1Click: function(button, e, eOpts) {
    	
    	var store1 = Ext.getStore('MyStore1');
    	var gridRecord = Ext.getCmp('myGrid1').getSelectionModel().getSelection();
    	
    	if(gridRecord.length > 0) {
    		for(var i=0; i<gridRecord.length; i++) {
    			if(gridRecord[i].get('V_TYPE') == 'V' && gridRecord[i].phantom == true) {
    				store1.remove(gridRecord[i]);
    			} else if(gridRecord[i].get('V_TYPE') == 'V' && gridRecord[i].phantom == false) {
    				gridRecord[i].set('V_TYPE', 'D');
    			}
    		}
    		store1.sync({
    			params: {
    				V_TYPE : 'SYNC',
    				V_TYPE2 : 'CR',
    				V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
    				V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
    				V_RISK_NO : Ext.getCmp('V_RISK_NO').getValue(),
    			},
    			callback: function(records, operation, success) {
    				var res = records.operations[0]._response.responseText;
//    				console.log(res);
    				
    				if(res.match('Exception')) {
    					Ext.Msg.alert('확인', res);
    				} else {
    					store1.reload();
    				}
    			}
    		});
    	}
    	
    },
    
    /*외상*/
    gridSaveBtn2Click: function(button, e, eOpts) {
    	
    	var store2 = Ext.getStore('MyStore2');
    	var gridRecord = Ext.getCmp('myGrid2').getSelectionModel().getSelection();
    	
    	if(gridRecord.length > 0) {
    		for(var i=0; i<gridRecord.length; i++) {
    			if(gridRecord[i].get('V_TYPE') == 'V' && gridRecord[i].phantom == true) {
    				gridRecord[i].set('V_TYPE', 'I');
    			} else if(gridRecord[i].get('V_TYPE') == 'V' && gridRecord[i].phantom == false) {
    				gridRecord[i].set('V_TYPE', 'U');
    			}
    		}
    		store2.sync({
    			params: {
    				V_TYPE : 'SYNC',
    				V_TYPE2 : 'BN',
    				V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
    				V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
    				V_RISK_NO : Ext.getCmp('V_RISK_NO').getValue(),
    			},
    			callback: function(records, operation, success) {
    				var res = records.operations[0]._response.responseText;
//    				console.log(res);
    				
    				if(res.match('Exception')) {
    					Ext.Msg.alert('확인', res);
    				} else {
    					store2.reload();
    				}
    			}
    		});
    	}
    	
    },
    gridDelBtn2Click: function(button, e, eOpts) {
    	
    	var store2 = Ext.getStore('MyStore2');
    	var gridRecord = Ext.getCmp('myGrid2').getSelectionModel().getSelection();
    	
    	if(gridRecord.length > 0) {
    		for(var i=0; i<gridRecord.length; i++) {
    			if(gridRecord[i].get('V_TYPE') == 'V' && gridRecord[i].phantom == true) {
    				store1.remove(gridRecord[i]);
    			} else if(gridRecord[i].get('V_TYPE') == 'V' && gridRecord[i].phantom == false) {
    				gridRecord[i].set('V_TYPE', 'D');
    			}
    		}
    		store2.sync({
    			params: {
    				V_TYPE : 'SYNC',
    				V_TYPE2 : 'BN',
    				V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
    				V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
    				V_RISK_NO : Ext.getCmp('V_RISK_NO').getValue(),
    			},
    			callback: function(records, operation, success) {
    				var res = records.operations[0]._response.responseText;
//    				console.log(res);
    				
    				if(res.match('Exception')) {
    					Ext.Msg.alert('확인', res);
    				} else {
    					store2.reload();
    				}
    			}
    		});
    	}
    	
    },
    
    /*이자*/
    gridSaveBtn3Click: function(button, e, eOpts) {
    	
    	var store3 = Ext.getStore('MyStore3');
    	var gridRecord = Ext.getCmp('myGrid3').getSelectionModel().getSelection();
    	
    	if(gridRecord.length > 0) {
    		for(var i=0; i<gridRecord.length; i++) {
    			if(gridRecord[i].get('V_TYPE') == 'V' && gridRecord[i].phantom == true) {
    				gridRecord[i].set('V_TYPE', 'I');
    			} else if(gridRecord[i].get('V_TYPE') == 'V' && gridRecord[i].phantom == false) {
    				gridRecord[i].set('V_TYPE', 'U');
    			}
    		}
    		store3.sync({
    			params: {
    				V_TYPE : 'SYNC',
    				V_TYPE2 : 'RT',
    				V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
    				V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
    				V_RISK_NO : Ext.getCmp('V_RISK_NO').getValue(),
    			},
    			callback: function(records, operation, success) {
    				var res = records.operations[0]._response.responseText;
//    				console.log(res);
    				
    				if(res.match('Exception')) {
    					Ext.Msg.alert('확인', res);
    				} else {
    					store3.reload();
    				}
    			}
    		});
    	}
    	
    },
    gridDelBtn3Click: function(button, e, eOpts) {
    	
    	var store3 = Ext.getStore('MyStore3');
    	var gridRecord = Ext.getCmp('myGrid3').getSelectionModel().getSelection();
    	
    	if(gridRecord.length > 0) {
    		for(var i=0; i<gridRecord.length; i++) {
    			if(gridRecord[i].get('V_TYPE') == 'V' && gridRecord[i].phantom == true) {
    				store1.remove(gridRecord[i]);
    			} else if(gridRecord[i].get('V_TYPE') == 'V' && gridRecord[i].phantom == false) {
    				gridRecord[i].set('V_TYPE', 'D');
    			}
    		}
    		store3.sync({
    			params: {
    				V_TYPE : 'SYNC',
    				V_TYPE2 : 'RT',
    				V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
    				V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
    				V_RISK_NO : Ext.getCmp('V_RISK_NO').getValue(),
    			},
    			callback: function(records, operation, success) {
    				var res = records.operations[0]._response.responseText;
//    				console.log(res);
    				
    				if(res.match('Exception')) {
    					Ext.Msg.alert('확인', res);
    				} else {
    					store3.reload();
    				}
    			}
    		});
    	}
    	
    },


    xlsxDownClick: function(button, e, eOpts) {
        var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d His');
    	var grid = Ext.getCmp('myGrid');
    	grid.saveDocumentAs({
            type: 'xlsx',
            title: 'test', //엑셀내타이틀
            fileName: currentDate+'.xlsx' //엑셀파일이름
		});
    }

});
