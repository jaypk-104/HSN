/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.52
 * Generated at: 2021-02-15 00:51:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.HSPF01.common.frame.sql;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.PrintWriter;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import javax.crypto.EncryptedPrivateKeyInfo;
import java.security.MessageDigest;
import java.sql.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

public final class UserInfo_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/HSPF01/common/DB_Connection.jsp", Long.valueOf(1551915626000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("javax.naming.InitialContext");
    _jspx_imports_classes.add("org.json.simple.JSONObject");
    _jspx_imports_classes.add("javax.crypto.EncryptedPrivateKeyInfo");
    _jspx_imports_classes.add("java.security.MessageDigest");
    _jspx_imports_classes.add("javax.sql.DataSource");
    _jspx_imports_classes.add("javax.naming.Context");
    _jspx_imports_classes.add("javax.naming.NamingException");
    _jspx_imports_classes.add("org.json.simple.JSONArray");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	Connection conn = null;
	PreparedStatement pstmt = null;
	Statement stmt = null;

	try {
		Context initCtx = new InitialContext();
		Context envCtx = (Context) initCtx.lookup("java:comp/env");
		DataSource dataSource = (DataSource) envCtx.lookup("jdbc/Tibero");
		conn = dataSource.getConnection();
		stmt = conn.createStatement();

	} catch (NamingException e) {

	}

      out.write("\r\n");
      out.write("\r\n");

	ResultSet rs = null;
	try {
		request.setCharacterEncoding("utf-8");
		JSONObject jsonObject = new JSONObject();
		JSONArray jsonArray = new JSONArray();
		JSONObject subObject = null;

		String V_TYPE = request.getParameter("V_TYPE") == null ? "" : request.getParameter("V_TYPE").toUpperCase();
		String V_USR_ID = request.getParameter("V_USR_ID") == null ? "" : request.getParameter("V_USR_ID").toUpperCase();
		String V_BP_CD = request.getParameter("V_BP_CD") == null ? "" : request.getParameter("V_BP_CD").toUpperCase();
		String w_usr_nm = request.getParameter("w_usr_nm") == null ? "" : request.getParameter("w_usr_nm").toUpperCase();
		String w_oldPassword = request.getParameter("w_oldPassword") == null ? "" : request.getParameter("w_oldPassword").toUpperCase();
		String w_newPassword = request.getParameter("w_newPassword") == null ? "" : request.getParameter("w_newPassword").toUpperCase();
		String w_usr_dept = request.getParameter("w_usr_dept") == null ? "" : request.getParameter("w_usr_dept").toUpperCase();
		String w_usr_posit = request.getParameter("w_usr_posit") == null ? "" : request.getParameter("w_usr_posit").toUpperCase();
		String w_usr_tel_no = request.getParameter("w_usr_tel_no") == null ? "" : request.getParameter("w_usr_tel_no").replaceAll("-", "").replaceAll("\\.", "");
		String w_usr_handtel = request.getParameter("w_usr_handtel") == null ? "" : request.getParameter("w_usr_handtel").replaceAll("-", "").replaceAll("\\.", "");;
		String w_usr_fax = request.getParameter("w_usr_fax") == null ? "" : request.getParameter("w_usr_fax").replaceAll("-", "").replaceAll("\\.", "");
		String w_usr_email = request.getParameter("w_usr_email") == null ? "" : request.getParameter("w_usr_email");
		String w_usr_email_yn = request.getParameter("w_usr_email_yn") == null ? "" : request.getParameter("w_usr_email_yn");
		if(w_usr_email_yn.equals("true")) {
			w_usr_email_yn = "Y";
		} else {
			w_usr_email_yn = "N";
		}
		String w_usr_address = request.getParameter("w_usr_address") == null ? "" : request.getParameter("w_usr_address").toUpperCase();

		// 		System.out.println(V_BP_CD);
		// 		System.out.println(V_USR_ID);

		String sql = "";
		if (V_TYPE.equals("P_CHECK")) { //비밀번호 체크
			sql = "SELECT PASSWORD ";
			sql += " FROM Z_USR_INFO_HSPF";
			sql += " WHERE BP_CD = ? AND USR_ID =? ";

			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, V_BP_CD);
			pstmt.setString(2, V_USR_ID);
			rs = pstmt.executeQuery();

			String system_password = "";
			while (rs.next()) {
				system_password = rs.getString("PASSWORD");
			}

			/*현재비밀번호 전환*/
			MessageDigest md = MessageDigest.getInstance("SHA-256");
			md.update(w_oldPassword.getBytes());
			byte byteData[] = md.digest();
			StringBuffer sb = new StringBuffer();
			for (int i = 0; i < byteData.length; i++) {
				sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
			}
			StringBuffer hexString = new StringBuffer();
			for (int i = 0; i < byteData.length; i++) {
				String hex = Integer.toHexString(0xff & byteData[i]);
				if (hex.length() == 1) {
					hexString.append('0');
				}
				hexString.append(hex);
			}
			String old_password_enc = hexString.toString();

			// 			System.out.println(old_password_enc);
			// 			System.out.println(system_password);

			String password_result = "";
			if (system_password.equals(old_password_enc)) {
				password_result = "SUCCESS";
			} else {
				password_result = "FAIL";
			}

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(password_result);
			pw.flush();
			pw.close();

		} else if (V_TYPE.equals("P_CHANGE")) {
			/*변경할 비밀번호 전환*/
			// 			System.out.println("w_newPassword" + w_newPassword);

			MessageDigest md = MessageDigest.getInstance("SHA-256");
			md.update(w_newPassword.getBytes());
			byte byteData[] = md.digest();
			StringBuffer sb = new StringBuffer();
			for (int i = 0; i < byteData.length; i++) {
				sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
			}
			StringBuffer hexString = new StringBuffer();
			for (int i = 0; i < byteData.length; i++) {
				String hex = Integer.toHexString(0xff & byteData[i]);
				if (hex.length() == 1) {
					hexString.append('0');
				}
				hexString.append(hex);
			}
			String new_password_enc = hexString.toString();
			// 			System.out.println(new_password_enc);
			// 			System.out.println("w_usr_nm" + w_usr_nm);

			sql += "UPDATE Z_USR_INFO_HSPF                                                        ";
			sql += "SET USR_NM = ?, ADDRESS = ?, TEL_NO = ?, FAX_NO = ?, HAND_TEL = ?, EMAIL = ?, EMAIL_YN = ?, ";
			sql += " PASSWORD = ?, UPDT_DT = SYSDATE ";
			sql += "WHERE BP_CD = ?                                                             ";
			sql += "AND USR_ID = ?  ";

			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, w_usr_nm);
			pstmt.setString(2, w_usr_address);
			pstmt.setString(3, w_usr_tel_no);
			pstmt.setString(4, w_usr_fax);
			pstmt.setString(5, w_usr_handtel);
			pstmt.setString(6, w_usr_email);
			pstmt.setString(7, w_usr_email_yn);
			pstmt.setString(8, new_password_enc);
			pstmt.setString(9, V_BP_CD);
			pstmt.setString(10, V_USR_ID);
			pstmt.execute(sql);

		} else {
			sql += "UPDATE Z_USR_INFO_HSPF                                                        ";
			sql += "SET USR_NM = ?, ADDRESS = ?, TEL_NO = ?, FAX_NO = ?, HAND_TEL = ?, EMAIL = ?, EMAIL_YN = ? ";
			sql += "WHERE BP_CD = ?                                                             ";
			sql += "AND USR_ID = ?                                                                ";

			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, w_usr_nm);
			pstmt.setString(2, w_usr_address);
			pstmt.setString(3, w_usr_tel_no);
			pstmt.setString(4, w_usr_fax);
			pstmt.setString(5, w_usr_handtel);
			pstmt.setString(6, w_usr_email);
			pstmt.setString(7, w_usr_email_yn);
			pstmt.setString(8, V_BP_CD);
			pstmt.setString(9, V_USR_ID);
			rs = pstmt.executeQuery();
		}

	} catch (Exception e) {
		e.printStackTrace();
	} finally {
		if (rs != null) try {
			rs.close();
		} catch (SQLException ex) {}
		if (stmt != null) try {
			stmt.close();
		} catch (SQLException ex) {}
		if (pstmt != null) try {
			pstmt.close();
		} catch (SQLException ex) {}
		if (conn != null) try {
			conn.close();
		} catch (SQLException ex) {}
	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
