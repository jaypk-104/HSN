/*
 * File: app/controller/TbButtonController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('naporeqmgm.controller.TbButtonController', {
	extend : 'Ext.app.Controller',

	stores : [ 'MyStore' ],

	control : {
		"#selBtn" : {
			click : 'selBtnClick'
		},
		"#orderBtn" : {
			click : 'orderBtnClick'
		},
		"#delBtn" : {
			click : 'delBtnClick'
		},
		"#clsBtn" : {
			click : 'clsBtnClick'
		},
		"#poBtn" : {
			click : 'poBtnClick'
		},
		"#poBtn2" : {
			click : 'poBtn2Click'
		},
		"mysearchform textfield[name=search_field]" : {
			specialkey : 'tfEnter'
		}
	},

	selBtnClick : function(button, e, eOpts) {
		// alert('select');
		var store = this.getMyStoreStore();
		// var store = Ext.getCmp('myGrid').getStore();
		// var store = this.getStore('MyStore');

		store.removeAll();
		store.load({
			params : {
				V_TYPE : 'S',
				u_na_dt_to : Ext.getCmp('u_na_dt_to').getValue(),
				u_na_dt_from : Ext.getCmp('u_na_dt_from').getValue(),
				u_dt_to : Ext.getCmp('u_dt_to').getValue(),
				u_dt_from : Ext.getCmp('u_dt_from').getValue(),
				u_po_no : Ext.getCmp('u_po_no').getValue(),
				// poradio : Ext.getCmp('poradio').getValue(),
				poradio : Ext.ComponentQuery.query('[name=poradio]')[0].getGroupValue(), // 라디오버튼
				V_chk_AA : Ext.getCmp('chk_AA').getValue(),
				V_chk_AU : Ext.getCmp('chk_AU').getValue(),
				V_chk_AM : Ext.getCmp('chk_AM').getValue(),
				V_chk_TN : Ext.getCmp('chk_TN').getValue(),
				V_ITEM_CD : Ext.getCmp('V_ITEM_CD').getValue(),

			// V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
			// V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),

			},
			callback : function(records, operations, success) {
			}
		});
	},

	orderBtnClick : function(button, e, eOpts) {

		var store = this.getMyStoreStore();
		var gridObj = Ext.getCmp('myGrid');
		var gridRecord = gridObj.getSelectionModel().getSelection();
		var flag = '';
		var msg = '';

		for (var i = 0; i < gridRecord.length; i++) {
			var poNo = gridRecord[i].data['PO_NO'];
			var poSeq = gridRecord[i].data['PO_SEQ'];
			var M_BP_CD = gridRecord[0].data['M_BP_CD'];

			if (gridRecord[i].data['V_TYPE'] == 'V') {
				gridRecord[i].set('V_TYPE', 'C');
			}

			if (gridRecord[i].data['ITEM_CD'] == null || gridRecord[i].data['ITEM_CD'] == undefined) {
				flag = 'N';
				msg = '본사 품목코드를 등록하세요.';
				break;
			} else if ((gridRecord[i].data['BP_ITEM_CD'] == null) || (gridRecord[i].data['BP_ITEM_CD'] == undefined)) {
				flag = 'N';
				msg = '해외법인 품목코드를 등록하세요.';
				break;
			} else if ((gridRecord[i].data['M_BP_CD'] == null) || (gridRecord[i].data['M_BP_CD'] == undefined)) {
				flag = 'N';
				msg = '품목코드에 대한 매입처를 등록하세요.<br>발주번호: ' + gridRecord[i].data['PO_NO'] + '<br>발주순번: ' + gridRecord[i].data['PO_SEQ'];
				break;
			} else if (gridRecord[i].data['PO_YN'] == 'Y') {
				flag = 'N';
				msg = '이미 발주생성 된 데이터입니다.';
				break;
			} else if (M_BP_CD != gridRecord[i].data['M_BP_CD']) {
				flag = 'N';
				msg = '동일한 매입처만 선택해주세요.';
				break;
			} else {
				flag = 'Y'
			}
		}

		if (flag == 'Y') {
			store.sync({
				params : {
					V_TYPE : 'SYNC',
					V_PO_DT : Ext.getCmp('u_po_dt').getValue(),
					V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue()
				},
				callback : function() {
					store.reload();
				}
			});
		} else {
			Ext.Msg.alert('확인', msg);
		}
	},

	delBtnClick : function(button, e, eOpts) {

		var store = this.getMyStoreStore();
		var gridObj = Ext.getCmp('myGrid');
		var gridRecord = gridObj.getSelectionModel().getSelection();
		Ext.MessageBox.confirm('확인', '주문을 삭제하시겠습니까?', function(btn) {
			if (btn == 'yes') {

				store.sync({
					params : {
						// V_TYPE: 'R',
						V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue()
					},
					callback : function(batch, options) {
						store.reload();
					},
				});
			}
		})
	},

	clsBtnClick : function(button, e, eOpts) {
		var store = this.getMyStoreStore();

		var gridObj = Ext.getCmp('myGrid');
		var gridRecord = gridObj.getSelectionModel().getSelection();
		var flag = 'Y';
		var msg = '';

//		console.log("gridLength : " + gridRecord.length);

		for (var i = 0; i < gridRecord.length; i++) {
			var ASN_YN = gridRecord[i].data['ASN_YN'];
			var PO_CFM = gridRecord[i].data['PO_CFM'];
			if (ASN_YN == "Y") {
				flag = 'N';
				msg = 'ASN 생성된 건이 포함되어 접수취소가 불가합니다.';
				Ext.Msg.alert('확인', msg);
				break;
			}
			
//			if (PO_CFM == "Y") {
//				flag = 'N';
//				msg = '발주 확정된 건이 포함되어 접수취소가 불가합니다.';
//				Ext.Msg.alert('확인', msg);
//				break;
//			}

			if (gridRecord[i].data['V_TYPE'] == 'V') {
				gridRecord[i].set('V_TYPE', 'D');
			}

			if (flag == 'Y') {
				Ext.MessageBox.confirm('확인', '접수취소 하시겠습니까?', function(btn) {
					if (btn == 'yes') {
						store.sync({
							params : {
								V_TYPE : 'SYNC',
								V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue()
							},
							callback : function(batch, options) {
								store.reload();
							},
						});
					}
				});
			} else {
				Ext.Msg.alert('확인', msg);
			}
		}
	},

	poBtnClick : function(button, e, eOpts) {
		var store = this.getMyStoreStore();
		var con = this;
		Ext.Ajax.request({
			url : 'sql/load_hsna_po.jsp',
			method : 'post',
			params : {
				V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
				V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
				V_TYPE : 'HSNA',
			},
			success : function(response) {
				con.selBtnClick();
			},
			scope : this
		});

	},
	poBtn2Click : function(button, e, eOpts) {
		var store = this.getMyStoreStore();
		Ext.MessageBox.confirm('확인', 'HSTN 발주를 불러오시겠습니까?', function(btn) {
			if (btn == 'yes') {
//				Ext.Ajax.request({
//					url:'http://123.142.124.155:8088/http/hstn_hsn_po?{""data"":[{""USR_ID"":""admin1"",""TYPE"":""1""}]}',
//					method: 'get',
//					callback : function(records,operations,success){
//						console.log('완료');
//						store.reload();
//				    },
//				    success : function(response) {
//				    },
//					scope: this
//				});
				const http = new XMLHttpRequest();
				http.open("GET", 'http://123.142.124.155:8088/http/hstn_hsn_po?{""data"":[{""USR_ID"":""admin1"",""TYPE"":""1""}]}');
				http.send();
				
				store.reload();
				
			}
		});
		
	},

	tfEnter : function(field, e, eOpts) {
		if (e.getKey() == e.ENTER) {
			this.selBtnClick();
		}
	}

});
