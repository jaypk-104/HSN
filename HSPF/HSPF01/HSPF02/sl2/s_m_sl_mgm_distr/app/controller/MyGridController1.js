/*
 * File: app/controller/MyGridController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('S_M_SL_MGM_DISTR.controller.MyGridController1', {
	extend : 'Ext.app.Controller',
	stores : [ 'MyStore1' ],
	control : {
		"#xlsxDown1" : {
			click : 'xlsxDown1Click'
		},
		"#gridSaveBtn1" : {
			click : 'gridSaveBtn1Click'
		},
		"#slIvCfmBtn1" : {
			click : 'slIvCfmBtn1Click'
		},
		"#slIvCancelBtn1" : {
			click : 'slIvCancelBtn1Click'
		}
	},
	
	xlsxDown1Click: function(button, e, eOpts) {
        var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d His');
    	var grid = Ext.getCmp('myGrid1');
    	grid.saveDocumentAs({
            type: 'xlsx',
            title: '창고별집계', //엑셀내타이틀
            fileName: currentDate+'.xlsx' //엑셀파일이름
		});
    },
    gridSaveBtn1Click : function(button, e, eOpts) {
		var store = Ext.getStore('MyStore1');
		var gridRecord = Ext.getCmp('myGrid1').getSelectionModel().getSelection();
//		var selModel = Ext.getCmp('myGrid').getSelectionModel();
//		selModel.selectAll();

		if (gridRecord.length > 0) {
			Ext.Msg.confirm('확인', '저장하시겠습니까?', function(button) {
				if (button == 'yes') {
					
//					store.each(function(rec, idx) {
//						rec.set('V_TYPE', 'I');
//					})

					store.sync({
						params : {
							V_TYPE : 'T2I',
							V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
							V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
							V_YYYYMM: Ext.getCmp('V_DATE').getValue(),
						},
						callback : function(records, operation, success) {
//							store.reload();
							var tbController = S_M_SL_MGM_DISTR.app.getController("TbButtonController");
				    		tbController.selBtnClick();
						}
					});
				}
			});
		}
	},slIvCfmBtn1Click : function(button, e, eOpts) {
		var store = Ext.getStore('MyStore1');
		var gridRecord = Ext.getCmp('myGrid1').getSelectionModel().getSelection();
		var flag = 'T';
		var msg = '';
		var M_BP_CD = '';
		var temp = '';
		
		if (!!!Ext.getCmp('V_TEMP_GL_DT').getValue()) {
			flag = 'F';
			msg = '전표일자를 입력하십시오.';
		} else if (gridRecord.length < 1) {
			flag = 'F';
			msg = '선택된 행이 없습니다.';
		} else {
			for(var i=0; i<gridRecord.length; i++) {
				if(gridRecord[i].get('GL_YN') == 'Y'){
					flag = 'F';
					msg = '전표가 이미 생성된 행이 선택되었습니다.';
					break;
				}
				if(i == 0){
					M_BP_CD = gridRecord[i].get('M_BP_CD');
					temp = gridRecord[i].get('SL_NM');
				}
				//console.log('M_BP_CD1 : '+ M_BP_CD + '  ' + i + '  ' + temp);
				//console.log('M_BP_CD1-2 : '+  gridRecord[i].get('M_BP_CD') + '  ' + i+ '  ' + temp);
				if(gridRecord[i].get('M_BP_CD') != M_BP_CD){
				 M_BP_CD = gridRecord[i].get('M_BP_CD');
				 temp = gridRecord[i].get('SL_NM');
				   flag = 'F';
				   msg = '동일한 매입처를 선택하세요';
				  //console.log('M_BP_CD2 : ' + M_BP_CD + '  ' + i + '  ' + temp);
				   
				   break;
				
				}
				
			}
		}
		
		if (flag == 'T') {
			
			Ext.Msg.confirm('확인', '전표를 생성하시겠습니까?', function(button) {
				if (button == 'yes') {
					for(var i=0; i<gridRecord.length; i++) {
						gridRecord[i].set('V_TYPE', 'I');
						 Ext.getCmp('M_BP_CD').setValue(gridRecord[i].get('M_BP_CD'));
					}

					store.sync({ 
						params : {
							V_TYPE : 'GL_IV',
							V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
							V_USR_ID : parent.Ext.getCmp('GEMP_NO').getValue(),
							V_YYYYMM: Ext.getCmp('V_DATE').getValue(),
							V_TEMP_GL_DT: Ext.getCmp('V_TEMP_GL_DT').getValue(),
							M_BP_CD : Ext.getCmp('M_BP_CD').getValue(),
						},
						callback : function(records, operation, success) {
							var tbController = S_M_SL_MGM_DISTR.app.getController("TbButtonController");
				    		tbController.selBtnClick();
				    		
				    		Ext.toast({
								title : ' ',
								timeout : 1000,
								html : '전표생성완료',
								style : 'text-align: center',
								align : 't',
								width : 130,
							});
						}, 
						success: function() {
						}
					});
				}
			});
		} else {
			Ext.Msg.alert('확인', msg);
		}
	},
	
	slIvCancelBtn1Click : function(button, e, eOpts) {
		var store = Ext.getStore('MyStore1');
		var gridRecord = Ext.getCmp('myGrid1').getSelectionModel().getSelection();
		var flag = 'T';
		var msg = '';
		
		if (gridRecord.length < 1) {
			flag = 'F';
			msg = '선택된 행이 없습니다.';
		} else {
//			for(var i=0; i<gridRecord.length; i++) {
//				if(gridRecord[i].get('GL_YN') != 'Y'){
//					flag = 'F';
//					msg = '전표가 존재하지 않는 행이 선택되었습니다.';
//					break;
//				}
//			}
		}
		
		if (flag == 'T') {
			
			Ext.Msg.confirm('확인', '전표를 취소하시겠습니까?', function(button) {
				if (button == 'yes') {
					
					for(var i=0; i<gridRecord.length; i++) {
						if(gridRecord[i].get('GL_YN') == 'Y'){
							gridRecord[i].set('V_TYPE', 'D');
							Ext.getCmp('M_BP_CD').setValue(gridRecord[i].get('M_BP_CD'));
						}
					}
					
					store.sync({ 
						params : {
							V_TYPE : 'GL_IV',
							V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
							V_USR_ID : parent.Ext.getCmp('GEMP_NO').getValue(),
							V_YYYYMM: Ext.getCmp('V_DATE').getValue(),
							M_BP_CD : Ext.getCmp('M_BP_CD').getValue(),
						},
						callback : function(records, operation, success) {
							var tbController = S_M_SL_MGM_DISTR.app.getController("TbButtonController");
				    		tbController.selBtnClick();
				    		
				    		Ext.toast({
								title : ' ',
								timeout : 1000,
								html : '전표취소완료',
								style : 'text-align: center',
								align : 't',
								width : 130,
							});
						}, 
						success: function() {
						}
					});
				}
			});
		} else {
			Ext.Msg.alert('확인', msg);
		}
		
	}
});
