/*
 * File: app/controller/LPurReqController.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('M_PO_HSPF.controller.LPurReqController', {
	extend : 'Ext.app.Controller',

	stores : [ 'MyStore' ],

	control : {
		"#gridAddBtn" : {
			click : 'gridAddBtnClick'
		},
		"#gridDelBtn" : {
			click : 'gridDelBtnClick'
		},
		"#xlsxDown" : {
			click : 'xlsxDownClick'
		},
		"#gridPoBtn" : {
			click : 'gridPoBtnClick'
		}
	},
	
	/* 발주등록 좌측 */
	/* MyStore : [ M_PO_HSPF_H, M_PO_HSPF_D ] */

	gridAddBtnClick : function(button, e, eOpts) {
		// var popup = Ext.create("B_COMP_HSPF.view.WinAddRow");
		// popup.show();
		// Ext.getCmp('rowCount').setValue(1);
	},

	//[-]버튼
	gridDelBtnClick : function(button, e, eOpts) {
		var store = Ext.getStore('MyStore');
		var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();

		if (gridRecord.length > 0) {
			Ext.Msg.confirm('확인', '삭제하시겠습니까?', function(button) {
				if (button == 'yes') {
					for (var i = 0; i < gridRecord.length; i++) {
						if (gridRecord[i].data['V_TYPE'] == 'V') {
							gridRecord[i].set('V_TYPE','D');
						}
					}
					store.sync({
						params : {
							V_USR_ID :parent.Ext.getCmp('GUSER_ID').getValue(),
						},
						callback : function(records, operation, success) {
							store.reload();
						}
					});
				}
			});
		}
	},

	/*[발주화살표]버튼*/
	gridPoBtnClick : function(button, e, eOpts) {
		var store = Ext.getStore('MyStore');
		var store1 = Ext.getStore('MyStore1');
		var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
		var gridRecord1 = Ext.getCmp('myGrid2').getSelectionModel().getSelection();
		var flag = '';
		var msg = '';
		
		var myMask = new Ext.LoadMask(Ext.getCmp('myGrid') , {msg:"Please wait..."});
		var myMask1 = new Ext.LoadMask(Ext.getCmp('myGrid2') , {msg:"Please wait..."});

		if (gridRecord.length > 0) {
			myMask.show();
			myMask1.show();
			for(var i=0; i<gridRecord.length; i++) {
				//하나의 발주에 하나의 공급사만 가능하다.
				if(i == 0 && gridRecord[i].data['M_BP_CD'] != undefined) {
					Ext.getCmp('V_M_BP_NM2').setValue(gridRecord[0].data['M_BP_NM']);
					Ext.getCmp('V_M_BP_CD2').setValue(gridRecord[0].data['M_BP_CD']);
					flag = 'T';
					gridRecord[0].set('V_TYPE','B');
					
				//공급사가 없을 경우
				} else if (gridRecord[i].data['M_BP_CD'] == undefined) {
					flag = 'T';
					
				} else if (gridRecord[i].data['M_BP_CD'] != Ext.getCmp('V_M_BP_CD2').getValue() ) {
					flag = 'F';
					msg = '공급사를 확인하세요. <br>(하나의 발주에 하나의 공급사입니다.)';
					Ext.getCmp('V_M_BP_NM2').setValue('');
					Ext.getCmp('V_M_BP_CD2').setValue('');
					break;
				} else {
					flag = 'T';
					gridRecord[i].set('V_TYPE','B');
				}
			}
					
			if(flag == 'T') {
				var result = '';
				store.sync({
					params : {
						V_TYPE :'SYNC',
						V_USR_ID :parent.Ext.getCmp('GUSER_ID').getValue(),
						V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
					},
					callback: function(records, operation, success){
						var response = records.operations[0]._response.responseText;
						var jResult = Ext.JSON.decode(response);
						
						for(var j=0; j<gridRecord.length; j++) {
							if(gridRecord[j].get('V_TYPE')=='B') {
								var MB_PRC = jResult.resultList[j].MB_PRC;
								var HP_SL_CD = jResult.resultList[j].HP_SL_CD;
								
								var rec = Ext.create('M_PO_HSPF.model.MyModel', {
									ITEM_CD : gridRecord[j].get('ITEM_CD'),
									ITEM_NM : gridRecord[j].get('ITEM_NM'),
									PO_QTY : gridRecord[j].get('PUR_QTY'),
									PO_PRC : MB_PRC,
									PO_AMT : gridRecord[j].get('PUR_QTY') * MB_PRC,
									PO_LOC_AMT : gridRecord[j].get('PUR_QTY') * MB_PRC
												* Ext.getCmp('V_RATE').getValue(),
									HOPE_SL_CD : HP_SL_CD,
									PUR_NO : gridRecord[j].get('PUR_NO'),
									PUR_SEQ : gridRecord[j].get('PUR_SEQ'),
									VAT_TYPE : 'A'
								});
								
								store.remove(gridRecord[j]);
								store1.insert(j, rec);
								myMask.hide();
								myMask1.hide();
							} else {
								var rec = Ext.create('M_PO_HSPF.model.MyModel', {
									ITEM_CD : gridRecord[j].get('ITEM_CD'),
									ITEM_NM : gridRecord[j].get('ITEM_NM'),
									PO_QTY : gridRecord[j].get('PUR_QTY'),
									PO_PRC : 0,
									PO_AMT : 0,
									PO_LOC_AMT : 0,
									PUR_NO : gridRecord[j].get('PUR_NO'),
									PUR_SEQ : gridRecord[j].get('PUR_SEQ'),
									VAT_TYPE : 'A'
								});
								
								store.remove(gridRecord[j]);
								store1.insert(j, rec);
								myMask.hide();
								myMask1.hide();
							}
						}
						
						/*
						//좌측요청에서 삭제하고, 우측에 추가한다.
						store.each(function(record,idx){
							if(record.get('V_TYPE')=='B') {
								var cnt = 0;
								var MB_PRC = jResult.resultList[cnt].MB_PRC;
								var HP_SL_CD = jResult.resultList[cnt].HP_SL_CD;
								var rec = Ext.create('M_PO_HSPF.model.MyModel', {
									ITEM_CD : record.get('ITEM_CD'),
									ITEM_NM : record.get('ITEM_NM'),
									PO_QTY : record.get('PUR_QTY'),
									PO_PRC : MB_PRC,
									PO_AMT : record.get('PUR_QTY') * MB_PRC,
									PO_LOC_AMT : record.get('PUR_QTY') * MB_PRC
												* Ext.getCmp('V_RATE').getValue(),
									HOPE_SL_CD : HP_SL_CD,
									PUR_NO : record.get('PUR_NO'),
									PUR_SEQ : record.get('PUR_SEQ')
									
								});
									store.remove(record);
									store1.insert(cnt, rec);
									cnt ++;
								}
						});
						/////////////////////////////////////////////
						myMask.hide();
						myMask1.hide();
						*/
					}
				});
			} else {
				Ext.Msg.alert('확인', msg);
				myMask.hide();
				myMask1.hide();
			}
		} else {
			Ext.Msg.alert('확인', '구매요청내역을 선택하세요.');
		}
	},
	
	/*[엑셀다운]버튼*/
	xlsxDownClick : function(button, e, eOpts) {
		var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d His');
		var grid = Ext.getCmp('myGrid');
		grid.saveDocumentAs({
			type : 'xlsx',
			title : '발주등록1', // 엑셀내타이틀
			fileName : currentDate + '.xlsx' // 엑셀파일이름
		});
	},

});
