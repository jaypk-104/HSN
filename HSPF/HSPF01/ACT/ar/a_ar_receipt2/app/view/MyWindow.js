/*
 * File: app/view/MyWindow1.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('A_AR_RECEIPT2.view.MyWindow', {
	extend : 'Ext.window.Window',
	alias : 'widget.mywindow',

	requires: [
        'A_AR_RECEIPT2.view.MyWindowViewModel',
        'Ext.form.field.Text',
        'Ext.grid.Panel',
        'Ext.grid.column.RowNumberer',
        'Ext.view.Table',
        'Ext.button.Button',
        'Ext.selection.CheckboxModel',
        'Ext.grid.plugin.Exporter',
    ],
//	config : {
//		tbar : [ {
//			xtype : 'container',
//			flex : 1
//		}, {
//			xtype : 'button',
//			glyph : 'xf1c3@FontAwesome',
//			id : 'xlsxDownW',
//			cfg : {
//				type : 'excel07',
//				ext : 'xlsx'
//			},
//			iconCls : 'grid-excel-btn',
//		} ]
//	},
	viewModel : {
		type : 'mywindow'
	},
	height : 548,
	width : 889,
	title : '수금대상',
	modal : true,

	layout : {
		type : 'vbox',
		align : 'stretch'
	},
	dockedItems : [ {
		xtype : 'container',
		dock : 'top',
		height : 50,
		maxHeight : 50,
		minHeight : 50,
		width : 100,
		layout : {
			type : 'hbox',
			align : 'middle'
		},
		items : [ {
			xtype : 'combobox',
			flex : 1,
			id : 'W_AR_TYPE',
			maxWidth : 220,
			minWidth : 220,
			width : 220,
			fieldLabel : '수금구분',
			labelAlign : 'right',
			labelWidth : 80,
			blankText: '',
			value: 'B',
			displayField: 'DTL_NM',
        	valueField: 'DTL_CD',
        	editable: false,
        	store: Ext.create('Ext.data.Store',{
        		autoLoad: true,
        		storeId: 'storeMA20',
        		proxy: {
        			type: 'ajax',
        			extraParams: {
        				V_MAST_CD: 'MA20',
        				V_GRID: 'Y'
        			},	
        			api: {
        				read: '/HSPF01/common/sql/Combobox.jsp'
        			},
        			reader: {
        				type: 'json',
        				rootProperty: 'resultList'
        			}
        		}
        	}),
		}, {
			xtype : 'combobox',
			flex : 1,
			id : 'W_CUR',
			maxWidth : 180,
			minWidth : 180,
			width : 180,
			fieldLabel : '통화',
			labelAlign : 'right',
			blankText: '',
			labelWidth : 80,
			displayField: 'DTL_NM',
        	valueField: 'DTL_CD',
			editable : false,
			hidden: true,
			store: Ext.create('Ext.data.Store',{
        		autoLoad: true,
        		storeId: 'storeBA04',
        		proxy: {
        			type: 'ajax',
        			extraParams: {
        				V_MAST_CD: 'BA04',
        				V_GRID: 'Y'
        			},	
        			api: {
        				read: '/HSPF01/common/sql/Combobox.jsp'
        			},
        			reader: {
        				type: 'json',
        				rootProperty: 'resultList'
        			}
        		}
        	}),
		}, {
			xtype : 'textfield',
			flex : 1,
			id : 'W_DEPT_CD',
			maxWidth : 220,
			minWidth : 220,
			width : 220,
			fieldLabel : '부서',
			labelAlign : 'right',
			labelWidth : 80,
		}, {
			xtype : 'textfield',
			fieldLabel : '거래처',
			id : 'W_BP_CD',
			maxWidth : 170,
			minWidth : 170,
			width : 170,
			labelWidth : 70,
			margin: '0 0 0 30',
		}, {
			xtype : 'combobox',
			id : 'W_BP_NM',
			maxWidth : 170,
			minWidth : 170,
			width : 170,
			name : 'search_field',
			displayField : 'BP_NM',
			valueField : 'BP_CD',
			enableRegEx : true,
			minChars : 2,
			queryMode : 'local',
			store : 'WinBpPopStore',
			emptyText : '(입력)',
			margin : '0 0 0 3',
			listeners : {
				change : function(field, newValue, oldValue, eOpts) {
					Ext.getCmp('W_BP_CD').setValue(newValue);
				},
				beforequery : function(record) {
					record.query = new RegExp(record.query, 'i');
					record.forceAll = true;
				}
			}
		},  ]
	}, {
		xtype : 'container',
		dock : 'top',
		height : 50,
		maxHeight : 50,
		minHeight : 50,
		width : 100,
		layout : {
			type : 'hbox',
			align : 'middle'
		},
		items : [ {
			xtype : 'datefield',
			flex : 1,
			id : 'W_AR_DT_FR',
			maxWidth : 220,
			minWidth : 220,
			width : 220,
			labelAlign : 'right',
			fieldLabel : '채권일',
			labelWidth : 80,
			listeners : {
                render : function(datefield) {
                	var nows = new Date();
                	nows.setMonth(nows.getMonth()-1);
                    datefield.setValue(nows);
                }	
            },
		}, {
			xtype : 'datefield',
			flex : 1,
			id : 'W_AR_DT_TO',
			maxWidth : 140,
			minWidth : 140,
			width : 140,
			labelAlign : 'right',
			fieldLabel : '~',
			labelWidth : 10,
			listeners : {
                render : function(datefield) {
                	var nows = new Date();
                    datefield.setValue(nows);
                }	
            },
		}, {
			xtype : 'numberfield',
			flex : 1,
			id : 'W_TOT_AMT',
			maxWidth : 220,
			minWidth : 220,
			width : 220,
			fieldLabel : '대상금액',
			labelAlign : 'right',
			labelWidth : 80,
			fieldStyle : 'text-align: right',
			editable: false,
			readOnly:true,
			useThousandSeparator: true,
			
			toRawNumber: function (value) {
                return String(value).replace(this.decimalSeparator, '.').replace(new RegExp(Ext.util.Format.thousandSeparator, "g"), '');
            },
            valueToRaw: function (value) {
                var me = this;
                var format = "0,000";
                
                value = me.parseValue(Ext.util.Format.number(value, format));
                value = me.fixPrecision(value);
                value = Ext.isNumber(value) ? value : parseFloat(me.toRawNumber(value));
                value = isNaN(value) ? '' : String(Ext.util.Format.number(value, format)).replace('.', me.decimalSeparator);
                return value;
            },
            getSubmitValue: function () {
                var me = this,
                    value = me.callParent();

                if (!me.submitLocaleSeparator) {
                    value = me.toRawNumber(value);
                }
                return value;
            },
            parseValue: function (value) {
                if (!this.useThousandSeparator)
                    return this.callParent(arguments);
                value = parseFloat(this.toRawNumber(value));
                return isNaN(value) ? null : value;
            },
            getErrors: function (value) {
                var me = this,
                    errors = Ext.form.field.Text.prototype.getErrors.apply(me, arguments),
                    format = Ext.String.format,
                    num;

                value = Ext.isDefined(value) ? value : this.processRawValue(this.getRawValue());

                if (value.length < 1) { // if it's blank and textfield didn't flag it then it's valid
                    return errors;
                }

                value = me.toRawNumber(value);

                if (isNaN(value.replace(Ext.util.Format.thousandSeparator, ''))) {
                    errors.push(format(me.nanText, value));
                }

                num = me.parseValue(value);

                if (me.minValue === 0 && num < 0) {
                    errors.push(this.negativeText);
                }
                else if (num < me.minValue) {
                    errors.push(format(me.minText, me.minValue));
                }

                if (num > me.maxValue) {
                    errors.push(format(me.maxText, me.maxValue));
                }

                return errors;
            },
		}, {
			xtype : 'numberfield',
			flex : 1,
			id : 'W_REMAIN_AMT',
			maxWidth : 220,
			minWidth : 220,
			width : 220,
			fieldLabel : '잔액',
			labelAlign : 'right',
			labelWidth : 80,
			fieldStyle : 'text-align: right',
			editable: false,
			readOnly:true,
			useThousandSeparator: true,
			
			toRawNumber: function (value) {
                return String(value).replace(this.decimalSeparator, '.').replace(new RegExp(Ext.util.Format.thousandSeparator, "g"), '');
            },
            valueToRaw: function (value) {
                var me = this;
                var format = "0,000";
                
                value = me.parseValue(Ext.util.Format.number(value, format));
                value = me.fixPrecision(value);
                value = Ext.isNumber(value) ? value : parseFloat(me.toRawNumber(value));
                value = isNaN(value) ? '' : String(Ext.util.Format.number(value, format)).replace('.', me.decimalSeparator);
                return value;
            },
            getSubmitValue: function () {
                var me = this,
                    value = me.callParent();

                if (!me.submitLocaleSeparator) {
                    value = me.toRawNumber(value);
                }
                return value;
            },
            parseValue: function (value) {
                if (!this.useThousandSeparator)
                    return this.callParent(arguments);
                value = parseFloat(this.toRawNumber(value));
                return isNaN(value) ? null : value;
            },
            getErrors: function (value) {
                var me = this,
                    errors = Ext.form.field.Text.prototype.getErrors.apply(me, arguments),
                    format = Ext.String.format,
                    num;

                value = Ext.isDefined(value) ? value : this.processRawValue(this.getRawValue());

                if (value.length < 1) { // if it's blank and textfield didn't flag it then it's valid
                    return errors;
                }

                value = me.toRawNumber(value);

                if (isNaN(value.replace(Ext.util.Format.thousandSeparator, ''))) {
                    errors.push(format(me.nanText, value));
                }

                num = me.parseValue(value);

                if (me.minValue === 0 && num < 0) {
                    errors.push(this.negativeText);
                }
                else if (num < me.minValue) {
                    errors.push(format(me.minText, me.minValue));
                }

                if (num > me.maxValue) {
                    errors.push(format(me.maxText, me.maxValue));
                }

                return errors;
            },
		} ]
	}, 
//	{
//
//		xtype : 'container',
//		dock : 'top',
//		height : 50,
//		maxHeight : 50,
//		minHeight : 50,
//		width : 100,
//		layout : {
//			type : 'hbox',
//			align : 'middle'
//		},
//		items : [ {
//			xtype : 'textfield',
//			flex : 1,
//			id : 'W_AMT',
//			maxWidth : 220,
//			minWidth : 220,
//			width : 220,
//			fieldLabel : '금액',
//			labelAlign : 'right',
//			labelWidth : 80,
//			fieldStyle : 'text-align: right'
//		} ]
//	} 
	],
	items : [ {
		xtype : 'gridpanel',
		id : 'popGrid',
		store : 'PopStore',
		flex : 1,
		header : false,
		style : 'border: 1px solid #659DDC; padding: 5px;',
		columns : [ {
			xtype : 'rownumberer'
		}, {
			xtype : 'gridcolumn',
			style : 'text-align: center; font-weight: bold;',
			dataIndex : 'V_TYPE',
			text : 'V_TYPE',
			width : 80,
			hidden : true
		}, {
			xtype : 'gridcolumn',
			style : 'text-align: center; font-weight: bold;',
			dataIndex : 'AR_NO',
			text : '발생번호',
			width : 150
		}, {
			xtype : 'gridcolumn',
			style : 'text-align: center; font-weight: bold;',
			dataIndex : 'AR_TYPE',
			text : '발생구분',
			width : 110,
			hidden : true
		}, {
	    	xtype: 'datecolumn',
	    	style: 'text-align: center; font-weight: bold;',
	    	text: '발생일',
	    	dataIndex: 'AR_DT',
	    	format: 'Y-m-d',
	    	width: 100,
	    }, {
			xtype : 'gridcolumn',
			style : 'text-align: center; font-weight: bold;',
			dataIndex : 'S_BP_CD',
			text : '거래처',
			width : 110
		}, {
			xtype : 'gridcolumn',
			style : 'text-align: center; font-weight: bold;',
			dataIndex : 'BP_NM',
			text : '거래처명',
			width : 150
		}, {
			xtype : 'gridcolumn',
			style : 'text-align: center; font-weight: bold;',
			width : 110,
			dataIndex : 'ACCT_CD',
			text : '계정코드',
		}, {
			xtype : 'gridcolumn',
			style : 'text-align: center; font-weight: bold;',
			width : 150,
			dataIndex : 'ACCT_NM',
			text : '계정명',
		}, {
			xtype : 'gridcolumn',
			style : 'text-align: center; font-weight: bold;',
			width : 100,
			dataIndex : 'CUR',
			text : '통화',
		}, {
			xtype : 'numbercolumn',
			style : 'text-align: center; font-weight: bold;',
			width : 120,
			align : 'end',
			dataIndex : 'XCH_RATE',
			text : '환율',
			format : '0,000.00',
		}, {
			xtype : 'numbercolumn',
			style : 'text-align: center; font-weight: bold;',
			width : 120,
			align : 'end',
			dataIndex : 'DOC_AMT',
			text : '발생외화금액',
			format : '0,000.00',
			summaryType: 'sum',
            summaryRenderer: function (value, summaryData, dataIndex) {
	            return "<font color='green'>"+Ext.util.Format.number(value, '0,000.0000')+"<font>"; 
	        },
		}, {
			xtype : 'numbercolumn',
			style : 'text-align: center; font-weight: bold;',
			width : 120,
			align : 'end',
			dataIndex : 'LOC_AMT',
			text : '발생원화금액',
			format : '0,000',
			summaryType: 'sum',
            summaryRenderer: function (value, summaryData, dataIndex) {
	            return "<font color='green'>"+Ext.util.Format.number(value, '0,000')+"<font>"; 
	        },
		},{
			xtype : 'numbercolumn',
			style : 'text-align: center; font-weight: bold;',
			width : 120,
			align : 'end',
			dataIndex : 'BAL_DOC_AMT',
			text : '외화잔액',
			format : '0,000.00',
			summaryType: 'sum',
            summaryRenderer: function (value, summaryData, dataIndex) {
	            return "<font color='green'>"+Ext.util.Format.number(value, '0,000.0000')+"<font>"; 
	        },
		}, {
			xtype : 'numbercolumn',
			style : 'text-align: center; font-weight: bold;',
			width : 120,
			align : 'end',
			dataIndex : 'BAL_LOC_AMT',
			text : '원화잔액',
			format : '0,000',
			summaryType: 'sum',
            summaryRenderer: function (value, summaryData, dataIndex) {
	            return "<font color='green'>"+Ext.util.Format.number(value, '0,000')+"<font>"; 
	        },
		}, {
			xtype : 'gridcolumn',
			style : 'text-align: center; font-weight: bold;',
			width : 150,
			dataIndex : 'REMARK',
			text : '비고',
		}, ],
		plugins : [ {
			ptype : 'gridexporter'
		}, {
			ptype : 'cellediting'
		} ],
		selModel : {
			selType : 'checkboxmodel',
//			getHeaderConfig: function() {
//		        var me = this;
//		        return {
//		            isCheckerHd: true,
//		            text : '&#160;',
//		            width: me.headerWidth,
//		            sortable: false,
//		            draggable: false,
//		            resizable: false,
//		            hideable: false,
//		            menuDisabled: true,
//		            cls: Ext.baseCSSPrefix + 'column-header-checkbox ',
//		            locked: true,
//					locked: view.headerCt.lockedCt,
//		            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
//		                metaData.tdCls = Ext.baseCSSPrefix + 'grid-cell-special';
//		                return '<div class="' + Ext.baseCSSPrefix + 'grid-row-checker">&#160;</div>';
//		            },
//		        };
//		    },
			listeners : {
				select : function(rowmodel, record, index, eOpts) {
					var gridRecord = Ext.getCmp('popGrid').getSelectionModel().getSelection();
					var store1 = Ext.getStore('MyStore1');
					var selectedAmt = 0;
					var totArAmt = 0;
					var remainAmt = 0;
					
			    	for(var i in gridRecord){
			    		selectedAmt += Number(gridRecord[i].get('BAL_LOC_AMT'));
			    	}
			    	
			    	store1.each(function(rec, idx) {
			        	totArAmt += rec.get('REMAIN_AMT');
					});
			    	
			    	remainAmt = Ext.getCmp('W_TOT_AMT').getValue() - selectedAmt - totArAmt;
			    	Ext.getCmp('W_REMAIN_AMT').setValue(remainAmt);
				},
				deselect : function(rowmodel, record, index, eOpts) {
					var gridRecord = Ext.getCmp('popGrid').getSelectionModel().getSelection();
					var store1 = Ext.getStore('MyStore1');
					var selectedAmt = 0;
					var totArAmt = 0;
					var remainAmt = 0;
					
			    	for(var i in gridRecord){
			    		selectedAmt += Number(gridRecord[i].get('BAL_LOC_AMT'));
			    	}
			    	
			    	store1.each(function(rec, idx) {
			        	totArAmt += rec.get('REMAIN_AMT');
					});
			    	
			    	remainAmt = Ext.getCmp('W_TOT_AMT').getValue() - selectedAmt - totArAmt;
			    	Ext.getCmp('W_REMAIN_AMT').setValue(remainAmt);
				}
			}
		},
		features : [ {
			ftype : 'summary',
			dock : 'bottom'
		} ],
		viewConfig : {
			enableTextSelection : true,
		},
	}, {
		xtype : 'container',
		height : 50,
		maxHeight : 50,
		minHeight : 50,
		layout : {
			type : 'hbox',
			align : 'middle',
			pack : 'center'
		},
		items : [ {
			xtype : 'button',
			flex : 1,
			id : 'w_selBtn',
			maxWidth : 100,
			minWidth : 100,
			width : 100,
			text : '조회',
			margin : '0 0 0 3'
		}, {
			xtype : 'button',
			flex : 1,
			id : 'w_regBtn',
			maxWidth : 100,
			minWidth : 100,
			width : 100,
			text : '선택'
		} ]
	} ]

});