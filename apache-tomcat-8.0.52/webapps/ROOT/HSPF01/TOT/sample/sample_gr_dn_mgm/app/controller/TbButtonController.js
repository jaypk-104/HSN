/*
 * File: app/controller/TbButtonController.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SAMPLE_GR_DN_MGM.controller.TbButtonController', {
    extend: 'Ext.app.Controller',

    stores: ['MyStore','Popup.store.WinBpPopStore'],
    
    control: {
        "#selBtn": {
            click: 'selBtnClick'
        },
        "#saveBtn": {
            click: 'saveBtnClick'
        },
        "#clrBtn": {
            click: 'clrBtnClick'
        },
        "#clsBtn": {
            click: 'clsBtnClick'
        },
        "myform textfield[name=search_field]": {
            specialkey: 'tfEnter'
        },
    },

    selBtnClick: function(button, e, eOpts) {
    	var store = this.getMyStoreStore();
    	store.removeAll();
    	store.load({
    		params: {
    			V_TYPE: 'S',
    			V_COMP_ID: parent.Ext.getCmp('GCOMP_ID').getValue(),
    			V_USR_ID: parent.Ext.getCmp('GUSER_ID').getValue(),
    			V_ITEM_CD: Ext.getCmp('V_ITEM_CD').getValue(),
    			V_ITEM_NM: Ext.getCmp('V_ITEM_NM').getValue(),
    			V_HOPE_DT_FROM: Ext.getCmp('V_HOPE_DT_FROM').getValue(),
    			V_HOPE_DT_TO: Ext.getCmp('V_HOPE_DT_TO').getValue(),
    		},
    		callback: function(records,operations,success){
    		}
    	})
    },

    saveBtnClick: function(button, e, eOpts) {
    	var store = Ext.getStore('MyStore');
		var grid = Ext.getCmp('myGrid');
		var records = grid.getSelectionModel().getSelection();
		
		var flag = 'T';
		var msg = '';
		
		for(var i = 0 ; i < records.length ; i ++){
			if(records[i].data['MGM_NO'] == '' || records[i].data['MGM_NO'] == null || records[i].data['MGM_NO'] == undefined){
				if(records[i].data['MONEY_YN'] == '' || records[i].data['MONEY_YN'] == null || records[i].data['MONEY_YN'] == undefined){
					flag = 'F';
					msg = '유/무상 구분을 입력하세요.';
				}
				else if(records[i].data['ITEM_NM'] == '' || records[i].data['ITEM_NM'] == null || records[i].data['ITEM_NM'] == undefined){
					flag = 'F';
					msg = '품명을 입력하세요.';
				}
				else if(records[i].data['BP_NM'] == '' || records[i].data['BP_NM'] == null || records[i].data['BP_NM'] == undefined){
					flag = 'F';
					msg = '공급사를 입력하세요.';
				}
				else if(records[i].data['HOPE_SL_CD'] == '' || records[i].data['HOPE_SL_CD'] == null || records[i].data['HOPE_SL_CD'] == undefined){
					flag = 'F';
					msg = '입고예정창고를 입력하세요.';
				}
				else if(records[i].data['HOPE_GR_DT'] == '' || records[i].data['HOPE_GR_DT'] == null || records[i].data['HOPE_GR_DT'] == undefined){
					flag = 'F';
					msg = '입고예정일을 입력하세요.';
				}
				else if(records[i].data['HOPE_GR_QTY'] == '' || records[i].data['HOPE_GR_QTY'] == null || records[i].data['HOPE_GR_QTY'] == undefined){
					flag = 'F';
					msg = '입고예정수량을 입력하세요.';
				}
				else if(records[i].data['HOPE_USR_NM'] == '' || records[i].data['HOPE_USR_NM'] == null || records[i].data['HOPE_USR_NM'] == undefined){
					flag = 'F';
					msg = '요청자를 입력하세요.';
				}
				records[i].set('V_TYPE', 'I');
			}
			else{
				records[i].set('V_TYPE', 'U');
			}
		}
		
		if (flag == 'F'){
			Ext.Msg.alert('확인', msg);
		} 
		else{
			if(records.length >= 1){
				Ext.MessageBox.confirm('확인', '저장 하시겠습니까?', function(btn) {
					if (btn == 'yes') {
						store.sync({
							params : {
								V_TYPE : 'SYNC',
								V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
								V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
							},
							callback : function(records, operation, success) {
								var res = records.operations[0]._response.responseText;
			
								if (res.match('Exception')) {
									Ext.Msg.alert('확인', res);
								} 
								else {
									store.reload();
									Ext.toast({
										title : ' ',
										timeout : 1000,
										html : '저장완료',
										style : 'text-align: center',
										align : 't',
										width : 130,
									});
								}
								
							},
						});
					}
				});
			}
			else{
				Ext.Msg.alert('확인', '저장할 행을 선택하세요.');
			}
		}
		
		

		
    },

    clrBtnClick: function(button, e, eOpts) {
    	var store = this.getMyStoreStore();
    	store.removeAll();

    	Ext.getCmp('V_ITEM_CD').setValue('');
    },

    clsBtnClick: function(button, e, eOpts) {
        var tab=parent.Ext.getCmp('myTab');
        var activeTab=tab.getActiveTab();
        var tabIndex=tab.items.indexOf(activeTab);
        tab.remove(tabIndex, true);
    },

    tfEnter: function(field, e, eOpts) {
       	if (e.getKey() == e.ENTER) {
       		this.selBtnClick();
       	}
    },
    
    onLaunch: function() {
//    	var BPstore = Ext.getStore('WinBpPopStore');
//        BPstore.load();
    }

});
