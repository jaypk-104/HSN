/*
 * File: app/view/MyGrid.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('B_AUTONUM_PONO.view.MyGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.myGrid',

    requires: [
        'B_AUTONUM_PONO.view.MyGridViewModel',
        'Ext.grid.column.RowNumberer',
        'Ext.grid.column.Number',
        'Ext.view.Table',
        'Ext.selection.CheckboxModel',
        'Ext.grid.plugin.Exporter',
        'Ext.grid.plugin.CellEditing'
    ],

    config: {
        tbar: [
            {
                id: 'gridAddBtn',
                text: '',
                margin: '0 3 0 0',
                glyph: 'xf055@FontAwesome',
                iconCls: 'grid-add-btn',
            },
            {
                id: 'gridDelBtn',
                text: '',
                margin: '0 3 0 0',
                glyph: 'xf056@FontAwesome',
                iconCls: 'grid-del-btn',
            },
            {
                xtype: 'container',
                flex: 1
            },
            {
                xtype: 'button',
                glyph: 'xf1c3@FontAwesome',
                id: 'xlsxDown',
                cfg: {
                    type: 'excel07',
                    ext: 'xlsx'
                },
                iconCls: 'grid-excel-btn',
                margin: '0 3 0 0',
            }
        ]
    },

    viewModel: {
        type: 'mygrid'
    },
    style: 'border: 1px solid lightgray; padding: 5px;',
    header: false,
    title: 'My Grid Panel',
    store: 'MyStore',
    id: 'myGrid',
    
    columns: [
        {
            xtype: 'rownumberer',
            width: 40
        },
        {
            xtype: 'gridcolumn',
            style: 'font-size: 12px; text-align: center; font-weight: bold;',
            width: 114,
            dataIndex: 'V_TYPE',
            text: 'V_TYPE',
            hidden: true
        },
        {
            xtype: 'gridcolumn',
            style: 'font-size: 12px; text-align: center; font-weight: bold;',
            width: 80,
            dataIndex: 'BP_CD',
            text: '거래처코드'
        },
        {
            xtype: 'gridcolumn',
            style: 'font-size: 12px; text-align: center; font-weight: bold; color: #3367d6',
            width: 400,
            dataIndex: 'BP_NM',
            text: '거래처명',
            editor: {
                xtype: 'combobox',
                displayField: 'BP_NM',
                valueField: 'BP_CD',
                enableRegEx: true,
                minChars: 2,
                queryMode: 'local',
                store: 'WinBpPopStore',
                listeners   : {
                    beforequery: function(record){  
                        record.query = new RegExp(record.query, 'i');
                        record.forceAll = true;
                    },
                }
            },
        	renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                if(Ext.data.StoreManager.lookup('WinBpPopStore').findRecord('BP_CD',value) !==null)
                {
                    return Ext.data.StoreManager.lookup('WinBpPopStore').findRecord('BP_CD',value).get('BP_NM');
                }
                return value;
            },
        },
        {
            xtype: 'gridcolumn',
            style: 'font-size: 12px; text-align: center; font-weight: bold; color: #3367d6',
            width: 114,
            dataIndex: 'PREFIX_NO',
            text: 'PREFIX NO',
            editor: {
            	xtype: 'textfield'
            }
        },
        {
            xtype: 'gridcolumn',
            style: 'font-size: 12px; text-align: center; font-weight: bold; color: #3367d6',
            width: 149,
            dataIndex: 'DATE_TYPE',
            text: '날짜형식',
            editor: {
            	xtype : 'combobox',
            	editable: false,
            	displayField : 'DTL_NM',
            	valueField : 'DTL_CD',
            	store : Ext.create('Ext.data.Store',
            		{
            			id:'date_type_store',
            			fields : [ 'DTL_CD', 'DTL_NM' ],
            			data : [[ 'A1', 'YYYYMMDD' ],[ 'A2','YYMMDD' ],[ 'A3', 'MMDDYY' ],[ 'A4','MMDDYYYY' ]]
        		}),
        		listConfig: {
                    itemTpl: [
                        '<div>{DTL_NM} ({DTL_CD}) </div>'
                    ]
                }
            },
        	renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                if(Ext.data.StoreManager.lookup('date_type_store').findRecord('DTL_CD',value) !==null)
                {
                    return Ext.data.StoreManager.lookup('date_type_store').findRecord('DTL_CD',value).get('DTL_NM');
                }
                return value;
            },
        },
        {
            xtype: 'numbercolumn',
            style: 'font-size: 12px; text-align: center; font-weight: bold; color: #3367d6',
            align: 'end',
            dataIndex: 'LEN_INT',
            text: '채번숫자길이',
            format: '0,000.',
            editor: {
            	xtype: 'numberfield'
            }
        }
    ],
    viewConfig: {
        enableTextSelection: true
        },
    selModel: {
        selType: 'checkboxmodel',
        listeners: {
        	select: function(rowmodel, record, index, eOpts) {
            	record.set('V_TYPE', 'V');
            },
            deselect: function(rowmodel, record, index, eOpts) {
            	record.set('V_TYPE', '');
            }
        }
    },
    plugins: [
        {
            ptype: 'gridexporter'
        },
        {
            ptype: 'cellediting',
            listeners: {
            	afteredit: function(editor, context, eOpts) {
            		if(context.column.dataIndex=='BP_NM') {
            			context.record.set('BP_CD', context.record.get('BP_NM'));
            		}
            	},
            }
        },
    ]

});