/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.52
 * Generated at: 2021-02-07 23:08:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.HSPF01.HSPF03.mm3.po.m_005fcol_005fsteel.sql;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.json.simple.JSONArray;
import org.json.simple.JSONValue;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONObject;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URLDecoder;
import java.util.HashMap;
import org.apache.commons.lang.StringUtils;
import java.sql.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import java.sql.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import java.net.*;
import java.io.*;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.beanutils.BeanUtils;

public final class M_005fCOL_005fSTEEL_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/HSPF01/common/DB_Connection.jsp", Long.valueOf(1551915626000L));
    _jspx_dependants.put("/HSPF01/common/DB_Connection_ERP.jsp", Long.valueOf(1548838900000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.net");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("javax.naming.InitialContext");
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("org.json.simple.parser.JSONParser");
    _jspx_imports_classes.add("org.apache.commons.beanutils.BeanUtils");
    _jspx_imports_classes.add("java.io.StringWriter");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("javax.naming.NamingException");
    _jspx_imports_classes.add("org.json.simple.JSONArray");
    _jspx_imports_classes.add("java.lang.reflect.InvocationTargetException");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("org.json.simple.JSONObject");
    _jspx_imports_classes.add("org.json.simple.JSONValue");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("javax.sql.DataSource");
    _jspx_imports_classes.add("javax.naming.Context");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	Connection conn = null;
	PreparedStatement pstmt = null;
	Statement stmt = null;

	try {
		Context initCtx = new InitialContext();
		Context envCtx = (Context) initCtx.lookup("java:comp/env");
		DataSource dataSource = (DataSource) envCtx.lookup("jdbc/Tibero");
		conn = dataSource.getConnection();
		stmt = conn.createStatement();

	} catch (NamingException e) {

	}

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

// 	String driver = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
// 	String url = "jdbc:sqlserver://123.142.124.141:1433";
// 	String user = "sa";
// 	String password = "hsnadmin";

// 	String connectionString = "jdbc:sqlserver://123.142.124.141:1433;" + "databaseName=UNIERP_HSN;user=sa;password=hsnadmin";

// 	Class.forName(driver);
// 	Connection e_conn = DriverManager.getConnection(connectionString);
// 	Statement e_stmt = null;
// 	e_stmt = e_conn.createStatement();
// 	ResultSet e_rs = null;
// 	CallableStatement e_cs = null;

	Connection e_conn = null;
	Statement e_stmt = null;
	ResultSet e_rs = null;
	CallableStatement e_cs = null;

	try {
		Context initCtx = new InitialContext();
		Context envCtx = (Context) initCtx.lookup("java:comp/env");
		DataSource dataSource = (DataSource) envCtx.lookup("jdbc/UNIERP_HSN");
		e_conn = dataSource.getConnection();
		e_stmt = e_conn.createStatement();

	} catch (NamingException e) {

	}
	

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("utf-8");
	ResultSet rs = null;
	CallableStatement cs = null;
	JSONObject jsonObject = new JSONObject();
	JSONArray jsonArray = new JSONArray();
	JSONObject subObject = null;

	try {
		String V_TYPE = request.getParameter("V_TYPE") == null ? "" : request.getParameter("V_TYPE");
		String V_COMP_ID = request.getParameter("V_COMP_ID") == null ? "" : request.getParameter("V_COMP_ID").toUpperCase();
		String V_USR_ID = request.getParameter("V_USR_ID") == null ? "" : request.getParameter("V_USR_ID").toUpperCase();
		String V_COL_NO = request.getParameter("V_COL_NO") == null ? "" : request.getParameter("V_COL_NO").toUpperCase();
		String V_APPROV_MGM_NO = request.getParameter("V_APPROV_MGM_NO") == null ? "" : request.getParameter("V_APPROV_MGM_NO").toUpperCase();
		String V_BS_DT_FR = request.getParameter("V_BS_DT_FR") == null ? "" : request.getParameter("V_BS_DT_FR").substring(0, 10);
		String V_BS_DT_TO = request.getParameter("V_BS_DT_TO") == null ? "" : request.getParameter("V_BS_DT_TO").substring(0, 10);
		String V_MAST_DB_NO = request.getParameter("V_MAST_DB_NO") == null ? "" : request.getParameter("V_MAST_DB_NO").toUpperCase();
		String V_S_BP_NM = request.getParameter("V_S_BP_NM") == null ? "" : request.getParameter("V_S_BP_NM").toUpperCase();
		String V_PO_NO = request.getParameter("V_PO_NO") == null ? "" : request.getParameter("V_PO_NO").toUpperCase();
		String V_PO_SEQ = request.getParameter("V_PO_SEQ") == null ? "" : request.getParameter("V_PO_SEQ").toUpperCase();
		
		//담보헤더조회
		if (V_TYPE.equals("SH")) {
			cs = conn.prepareCall("call USP_001_M_COL_H_STEEL(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			cs.setString(1, V_TYPE);//V_TYPE
			cs.setString(2, V_COMP_ID);//V_COMP_ID
			cs.setString(3, "");//V_BS_DT_FR
			cs.setString(4, "");//V_BS_DT_TO
			cs.setString(5, V_MAST_DB_NO);//V_MAST_DB_NO
			cs.setString(6, "");//V_COL_DT
			cs.setString(7, "");//V_COL_AVL_AMT
			cs.setString(8, "");//V_COL_TYPE
			cs.setString(9, "");//V_M_BP_CD
			cs.setString(10, "");//V_PO_NO
			cs.setString(11, "");//V_APPROV_NO
			cs.setString(12, "");//V_REF_COL_NO
			cs.setString(13, "");//V_COL_MGM_NO
			cs.setString(14, "");//V_COL_TITLE
			cs.setString(15, "");//V_COL_TOT_AMT
			cs.setString(16, "");//V_S_BP_CD
			cs.setString(17, "");//V_COL_NON_AMT
			cs.setString(18, V_USR_ID);//V_USR_ID
			cs.registerOutParameter(19, com.tmax.tibero.TbTypes.CURSOR);
			cs.executeQuery();

			rs = (ResultSet) cs.getObject(19);

			while (rs.next()) {
				subObject = new JSONObject();
				// 				subObject.put("COL_NO", rs.getString("COL_NO"));
				subObject.put("COL_DT", rs.getString("COL_DT"));
				subObject.put("COL_AVL_AMT", rs.getString("COL_AVL_AMT"));
				subObject.put("M_BP_CD", rs.getString("M_BP_CD"));
				subObject.put("M_BP_NM", rs.getString("M_BP_NM"));
				subObject.put("S_BP_CD", rs.getString("S_BP_CD"));
				subObject.put("S_BP_NM", rs.getString("S_BP_NM"));
				subObject.put("PO_NO", rs.getString("PO_NO"));
				subObject.put("APPROV_NO", rs.getString("APPROV_NO"));
				subObject.put("REF_COL_NO", rs.getString("REF_COL_NO"));
				subObject.put("COL_MGM_NO", rs.getString("COL_MGM_NO"));
				subObject.put("COL_TITLE", rs.getString("COL_TITLE"));
				subObject.put("COL_TOT_AMT", rs.getString("COL_TOT_AMT"));
				subObject.put("COL_NON_AMT", rs.getString("COL_NON_AMT"));
				subObject.put("COL_TYPE", rs.getString("COL_TYPE"));
				subObject.put("CLS_AR_NO", rs.getString("CLS_AR_NO"));
				jsonArray.add(subObject);
			}

			jsonObject.put("success", true);
			jsonObject.put("resultList", jsonArray);

			// 			System.out.println(jsonObject);

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(jsonObject);
			pw.flush();
			pw.close();
		} else if (V_TYPE.equals("SH2")) {
			cs = conn.prepareCall("call USP_001_M_COL_H_STEEL(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			cs.setString(1, V_TYPE);//V_TYPE
			cs.setString(2, V_COMP_ID);//V_COMP_ID
			cs.setString(3, "");//V_BS_DT_FR
			cs.setString(4, "");//V_BS_DT_TO
			cs.setString(5, V_MAST_DB_NO);//V_MAST_DB_NO
			cs.setString(6, "");//V_COL_DT
			cs.setString(7, "");//V_COL_AVL_AMT
			cs.setString(8, "");//V_COL_TYPE
			cs.setString(9, "");//V_M_BP_CD
			cs.setString(10, V_PO_NO);//V_PO_NO
			cs.setString(11, "");//V_APPROV_NO
			cs.setString(12, "");//V_REF_COL_NO
			cs.setString(13, "");//V_COL_MGM_NO
			cs.setString(14, "");//V_COL_TITLE
			cs.setString(15, "");//V_COL_TOT_AMT
			cs.setString(16, "");//V_S_BP_CD
			cs.setString(17, "");//V_COL_NON_AMT
			cs.setString(18, V_USR_ID);//V_USR_ID
			cs.registerOutParameter(19, com.tmax.tibero.TbTypes.CURSOR);
			cs.executeQuery();

			rs = (ResultSet) cs.getObject(19);
			while (rs.next()) {
				subObject = new JSONObject();
				// 				subObject.put("COL_NO", rs.getString("COL_NO"));
				subObject.put("ITEM_NM", rs.getString("ITEM_NM"));
				subObject.put("DOC_AMT", rs.getString("DOC_AMT"));
				subObject.put("LOC_AMT", rs.getString("LOC_AMT"));
				subObject.put("PO_NO", rs.getString("PO_NO"));
				subObject.put("PO_SEQ", rs.getString("PO_SEQ"));
				jsonArray.add(subObject);
			}

			jsonObject.put("success", true);
			jsonObject.put("resultList", jsonArray);

// 			System.out.println(jsonObject);

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(jsonObject);
			pw.flush();
			pw.close();
		}
		//발주팝업
		else if (V_TYPE.equals("O1")) {

			cs = conn.prepareCall("call USP_001_M_COL_CONT_MGM_STEEL(?,?,?,?)");
			cs.setString(1, "I");//V_TYPE
			cs.setString(2, V_COMP_ID);//V_COMP_ID
			cs.setString(3, V_PO_NO);//V_BS_DT_FR
			cs.setString(4, V_USR_ID);//V_BS_DT_TO
			cs.executeQuery();

		} else if (V_TYPE.equals("O")) {

			cs = conn.prepareCall("call USP_001_M_COL_H_STEEL(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			cs.setString(1, V_TYPE);//V_TYPE
			cs.setString(2, V_COMP_ID);//V_COMP_ID
			cs.setString(3, V_BS_DT_FR);//V_BS_DT_FR
			cs.setString(4, V_BS_DT_TO);//V_BS_DT_TO
			cs.setString(5, "");//V_MAST_DB_NO
			cs.setString(6, "");//V_COL_DT
			cs.setString(7, "");//V_COL_AVL_AMT
			cs.setString(8, "");//V_COL_TYPE
			cs.setString(9, "");//V_M_BP_CD
			cs.setString(10, V_PO_NO);//V_PO_NO
			cs.setString(11, "");//V_APPROV_NO
			cs.setString(12, "");//V_REF_COL_NO
			cs.setString(13, "");//V_COL_MGM_NO
			cs.setString(14, "");//V_COL_TITLE
			cs.setString(15, "");//V_COL_TOT_AMT
			cs.setString(16, "");//V_S_BP_CD
			cs.setString(17, "");//V_COL_NON_AMT
			cs.setString(18, V_USR_ID);//V_USR_ID
			cs.registerOutParameter(19, com.tmax.tibero.TbTypes.CURSOR);
			cs.executeQuery();

			rs = (ResultSet) cs.getObject(19);

			while (rs.next()) {
				subObject = new JSONObject();
				subObject.put("PO_NO", rs.getString("PO_NO"));
				subObject.put("APPROV_NO", rs.getString("APPROV_NO"));
				subObject.put("APPROV_NM", rs.getString("APPROV_NM"));
				subObject.put("BRAND", rs.getString("BRAND"));
				subObject.put("M_BP_CD", rs.getString("M_BP_CD"));
				subObject.put("M_BP_NM", rs.getString("M_BP_NM"));
				subObject.put("S_BP_CD", rs.getString("S_BP_CD"));
				subObject.put("S_BP_NM", rs.getString("S_BP_NM"));
				subObject.put("PO_DT", rs.getString("PO_DT"));
				subObject.put("PO_AMT", rs.getString("PO_AMT"));
				subObject.put("PO_LOC_AMT", rs.getString("PO_LOC_AMT"));
				subObject.put("PO_USR_NM", rs.getString("PO_USR_NM"));
				subObject.put("COL_MGM_NO", rs.getString("COL_MGM_NO"));
				jsonArray.add(subObject);
			}

			jsonObject.put("success", true);
			jsonObject.put("resultList", jsonArray);

			// 			System.out.println(jsonObject);

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(jsonObject);
			pw.flush();
			pw.close();

			//담보팝업
		} else if (V_TYPE.equals("P")) {

			V_MAST_DB_NO = request.getParameter("V_MAST_DB_NO") == null ? "" : request.getParameter("V_MAST_DB_NO").toUpperCase();

			cs = conn.prepareCall("call USP_001_M_COL_H_STEEL(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			cs.setString(1, V_TYPE);//V_TYPE
			cs.setString(2, V_COMP_ID);//V_COMP_ID
			cs.setString(3, V_BS_DT_FR);//V_BS_DT_FR
			cs.setString(4, V_BS_DT_TO);//V_BS_DT_TO
			cs.setString(5, V_MAST_DB_NO);//V_MAST_DB_NO
			cs.setString(6, "");//V_APPROV_SEQ
			cs.setString(7, "");//V_APPROV_DT
			cs.setString(8, "");//V_RISK_REF_NO
			cs.setString(9, "");//V_S_BP_CD
			cs.setString(10, V_PO_NO);//V_PO_NO
			cs.setString(11, "");//V_SALE_TYPE
			cs.setString(12, "");//V_IV_TYPE
			cs.setString(13, "");//V_REGION
			cs.setString(14, "");//V_PO_NO
			cs.setString(15, "");//
			cs.setString(16, V_S_BP_NM);//V_S_BP_CD
			cs.setString(17, "");//V_ETC2_SL_TEXT
			cs.setString(18, V_USR_ID);//V_USR_ID
			cs.registerOutParameter(19, com.tmax.tibero.TbTypes.CURSOR);
			cs.executeQuery();

			rs = (ResultSet) cs.getObject(19);

			while (rs.next()) {
				subObject = new JSONObject();
				subObject.put("APPROV_NO", rs.getString("APPROV_NO"));
				subObject.put("COL_MGM_NO", rs.getString("COL_MGM_NO"));
				subObject.put("MAST_DB_NO", rs.getString("MAST_DB_NO"));
				subObject.put("COL_TYPE", rs.getString("COL_TYPE"));
				subObject.put("COL_TYPE_NM", rs.getString("COL_TYPE_NM"));
				subObject.put("M_BP_CD", rs.getString("M_BP_CD"));
				subObject.put("M_BP_NM", rs.getString("M_BP_NM"));
				subObject.put("S_BP_CD", rs.getString("S_BP_CD"));
				subObject.put("S_BP_NM", rs.getString("S_BP_NM"));
				subObject.put("PO_NO", rs.getString("PO_NO"));
				subObject.put("COL_TOT_AMT", rs.getString("COL_TOT_AMT"));
				subObject.put("COL_AVL_AMT", rs.getString("COL_AVL_AMT"));
				subObject.put("COL_DT", rs.getString("COL_DT"));
				subObject.put("COL_TITLE", rs.getString("COL_TITLE"));
				subObject.put("REF_COL_NO", rs.getString("REF_COL_NO"));
				subObject.put("ERP_CREATE_YN", rs.getString("ERP_CREATE_YN"));
				subObject.put("TEMP_GL_NO", rs.getString("TEMP_GL_NO"));
				subObject.put("COL_DOC_AMT", rs.getString("COL_DOC_AMT"));
				subObject.put("USE_YN", rs.getString("USE_YN"));
				subObject.put("CLS_AR_NO", rs.getString("CLS_AR_NO"));
				jsonArray.add(subObject);
			}

			jsonObject.put("success", true);
			jsonObject.put("resultList", jsonArray);

			// 			System.out.println(jsonObject);

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(jsonObject);
			pw.flush();
			pw.close();

		}  else if (V_TYPE.equals("HI") || V_TYPE.equals("D") || V_TYPE.equals("HI_ADD")) {
			V_COL_NO = request.getParameter("V_COL_NO") == null ? "" : request.getParameter("V_COL_NO").toUpperCase();
			String V_COL_TYPE = request.getParameter("V_COL_TYPE") == null ? "" : request.getParameter("V_COL_TYPE").toUpperCase();
			V_PO_NO = request.getParameter("V_PO_NO") == null ? "" : request.getParameter("V_PO_NO").toUpperCase();
			String V_M_BP_CD = request.getParameter("V_M_BP_CD") == null ? "" : request.getParameter("V_M_BP_CD").toString();
			String V_COL_DT = request.getParameter("V_COL_DT") == null ? "" : request.getParameter("V_COL_DT").toUpperCase().substring(0, 10);
			String V_COL_AVL_AMT = request.getParameter("V_COL_AVL_AMT") == null ? "" : request.getParameter("V_COL_AVL_AMT").toUpperCase();
			String V_COL_MGM_NO = request.getParameter("V_COL_MGM_NO") == null ? "" : request.getParameter("V_COL_MGM_NO").toUpperCase();
			String V_REF_COL_NO = request.getParameter("V_REF_COL_NO") == null ? "" : request.getParameter("V_REF_COL_NO").toUpperCase();
			String V_COL_TITLE = request.getParameter("V_COL_TITLE") == null ? "" : request.getParameter("V_COL_TITLE");
			String V_COL_TOT_AMT = request.getParameter("V_COL_TOT_AMT") == null ? "" : request.getParameter("V_COL_TOT_AMT").toUpperCase();
			String V_APPROV_NO = request.getParameter("V_APPROV_NO") == null ? "" : request.getParameter("V_APPROV_NO").toUpperCase();
			String V_S_BP_CD = request.getParameter("V_S_BP_CD") == null ? "" : request.getParameter("V_S_BP_CD").toUpperCase();
			String V_COL_NON_AMT = request.getParameter("V_COL_NON_AMT") == null ? "" : request.getParameter("V_COL_NON_AMT").toUpperCase();

			String V_OLD_MAST_DB_NO = request.getParameter("V_OLD_MAST_DB_NO") == null ? "" : request.getParameter("V_OLD_MAST_DB_NO");

// 			System.out.println("V_TYPE: " + V_TYPE);
// 			System.out.println("V_MAST_DB_NO: " + V_MAST_DB_NO);
// 			System.out.println("V_OLD_MAST_DB_NO: " + V_OLD_MAST_DB_NO);

			cs = conn.prepareCall("call USP_001_M_COL_H_STEEL(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			cs.setString(1, V_TYPE);//V_TYPE
			cs.setString(2, V_COMP_ID);//V_COMP_ID
			cs.setString(3, "");//V_BS_DT_FR
			cs.setString(4, "");//V_BS_DT_TO
			cs.setString(5, V_MAST_DB_NO);//V_MAST_DB_NO
			cs.setString(6, V_COL_DT);//V_COL_DT
			cs.setString(7, V_COL_AVL_AMT);//V_COL_AVL_AMT
			cs.setString(8, V_COL_TYPE);//V_COL_TYPE
			cs.setString(9, V_M_BP_CD);//V_M_BP_CD
			cs.setString(10, V_PO_NO);//V_PO_NO
			cs.setString(11, V_APPROV_NO);//V_APPROV_NO
			cs.setString(12, V_REF_COL_NO);//V_REF_COL_NO
			cs.setString(13, V_COL_MGM_NO);//V_COL_MGM_NO

			if (V_TYPE.equals("HI_ADD")) {
				cs.setString(14, V_OLD_MAST_DB_NO);// 추가담보 등록시 입력param 변경
			} else {
				cs.setString(14, V_COL_TITLE);//V_COL_TITLE
			}
			cs.setString(15, V_COL_TOT_AMT);//V_COL_TOT_AMT
			cs.setString(16, V_S_BP_CD);//V_S_BP_CD
			cs.setString(17, V_COL_NON_AMT);//V_COL_NON_AMT
			cs.setString(18, V_USR_ID);//V_USR_ID
			cs.registerOutParameter(19, com.tmax.tibero.TbTypes.CURSOR);
			cs.executeQuery();

			String res = "";
			if (V_TYPE.equals("HI")) {
				rs = (ResultSet) cs.getObject(19);
				while (rs.next()) {
					res = rs.getString("res");
				}
			} else {
				res = "success";
			}

			// 			System.out.println(res);

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(res);
			pw.flush();
			pw.close();

		} else if (V_TYPE.equals("SYNC")) {
			request.setCharacterEncoding("utf-8");
			String[] findList = { "#", "+", "&", "%", " " };
			String[] replList = { "%23", "%2B", "%26", "%25", "%20" };

			String data = request.getParameter("data");
			data = StringUtils.replaceEach(data, findList, replList);
			String jsonData = URLDecoder.decode(data, "UTF-8");

// 			System.out.println(jsonData);

			if (jsonData.lastIndexOf("},{") > 0) { //배열일경우
				JSONArray jsonAr = (JSONArray) JSONValue.parse(jsonData);

				for (int i = 0; i < jsonAr.size(); i++) {
					HashMap hashMap = (HashMap) jsonAr.get(i);
					V_TYPE = hashMap.get("V_TYPE") == null ? "" : hashMap.get("V_TYPE").toString();

					V_COL_NO = hashMap.get("COL_NO") == null ? "" : hashMap.get("COL_NO").toString();
					String V_COL_SEQ = hashMap.get("COL_SEQ") == null ? "" : hashMap.get("COL_SEQ").toString();
					String V_COL_DOC_AMT = hashMap.get("DOC_AMT") == null ? "" : hashMap.get("DOC_AMT").toString();
					String V_COL_LOC_AMT = hashMap.get("LOC_AMT") == null ? "" : hashMap.get("LOC_AMT").toString();
					String V_BL_DOC_NO = hashMap.get("BL_DOC_NO") == null ? "" : hashMap.get("BL_DOC_NO").toString();
					String V_USE_DT = hashMap.get("USE_DT") == null ? "" : hashMap.get("USE_DT").toString().substring(0, 10);
					String V_TEMP_GL_NO = hashMap.get("TEMP_GL_NO") == null ? "" : hashMap.get("TEMP_GL_NO").toString();
					String V_REMARK = hashMap.get("REMARK") == null ? "" : hashMap.get("REMARK").toString();
					String V_COL_TYPE = hashMap.get("COL_TYPE") == null ? "" : hashMap.get("COL_TYPE").toString();
					String V_COL_AVL_AMT = hashMap.get("COL_AVL_AMT") == null ? "" : hashMap.get("COL_AVL_AMT").toString();
					String V_COL_AMT = hashMap.get("COL_AMT") == null ? "" : hashMap.get("COL_AMT").toString();
					String V_CONT_REMARK = hashMap.get("CONT_REMARK") == null ? "" : hashMap.get("CONT_REMARK").toString();
					String V_CONT_MGM_NO = hashMap.get("CONT_MGM_NO") == null ? "" : hashMap.get("CONT_MGM_NO").toString();
					V_PO_NO = hashMap.get("PO_NO") == null ? "" : hashMap.get("PO_NO").toString();
					 V_PO_SEQ = hashMap.get("PO_SEQ") == null ? "" : hashMap.get("PO_SEQ").toString();
					String V_DEPOSIT_DT = hashMap.get("DEPOSIT_DT") == null ? "" : hashMap.get("DEPOSIT_DT").toString();
					
					if(V_DEPOSIT_DT.length() > 10){
						V_DEPOSIT_DT = V_DEPOSIT_DT.substring(0,10);
					}

					if (V_TYPE.equals("U") || V_TYPE.equals("D")) {
						V_MAST_DB_NO = hashMap.get("MAST_DB_NO") == null ? "" : hashMap.get("MAST_DB_NO").toString();
					}

					cs = conn.prepareCall("call USP_001_M_COL_D_STEEL(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
					cs.setString(1, V_TYPE);//V_TYPE
					cs.setString(2, V_COMP_ID);//V_COMP_ID
					cs.setString(3, V_COL_NO);//V_APPROCOL_NO
					cs.setString(4, V_COL_SEQ);//V_COL_SEQ
					cs.setString(5, V_COL_DOC_AMT);//V_COL_DOC_AMT
					cs.setString(6, V_COL_LOC_AMT);//V_COL_LOC_AMT
					cs.setString(7, V_BL_DOC_NO);//V_BL_DOC_NO
					cs.setString(8, "");//V_USE_YN
					cs.setString(9, V_TEMP_GL_NO);//V_TEMP_GL_NO
					cs.setString(10, V_USE_DT);//V_USE_DT
					cs.setString(11, V_USR_ID);//V_USR_ID
					cs.setString(12, V_REMARK);//V_REMARK
					cs.registerOutParameter(13, com.tmax.tibero.TbTypes.CURSOR);
					cs.setString(14, V_MAST_DB_NO);//V_MAST_DB_NO
					cs.setString(15, V_COL_TYPE);//V_COL_TYPE
					cs.setString(16, V_COL_AVL_AMT);//V_COL_AVL_AMT
					cs.setString(17, V_COL_AMT);//V_COL_AMT
					cs.setString(18, V_CONT_REMARK);//V_CONT_REMARK
					cs.setString(19, V_CONT_MGM_NO);//V_CONT_MGM_NO
					cs.setString(20, V_PO_NO);//V_CONT_MGM_NO
					cs.setString(21, V_PO_SEQ);//V_CONT_MGM_NO
					cs.setString(22, V_DEPOSIT_DT);//V_DEPOSIT_DT
					cs.executeQuery();

					response.setContentType("text/plain; charset=UTF-8");
					PrintWriter pw = response.getWriter();
					pw.print("success");
					pw.flush();
					pw.close();

				}
			} else {
// 				JSONObject jsondata = JSONObject.fromObject(jsonData);  //큰수에 소수점이 있는경우 숫자계산이 이상해서 수정함. 20200108 김장운
				
				JSONParser parser = new JSONParser();
				Object obj = parser.parse(jsonData);					
				JSONObject jsondata = (JSONObject) obj;
				
				V_TYPE = jsondata.get("V_TYPE") == null ? "" : jsondata.get("V_TYPE").toString();
				V_COL_NO = jsondata.get("COL_NO") == null ? "" : jsondata.get("COL_NO").toString();
				String V_COL_SEQ = jsondata.get("COL_SEQ") == null ? "" : jsondata.get("COL_SEQ").toString();
				String V_COL_DOC_AMT = jsondata.get("DOC_AMT") == null ? "" : jsondata.get("DOC_AMT").toString();
				String V_COL_LOC_AMT = jsondata.get("LOC_AMT") == null ? "" : jsondata.get("LOC_AMT").toString();
				String V_BL_DOC_NO = jsondata.get("BL_DOC_NO") == null ? "" : jsondata.get("BL_DOC_NO").toString();
				String V_USE_DT = jsondata.get("USE_DT") == null ? "" : jsondata.get("USE_DT").toString().substring(0, 10);
				String V_TEMP_GL_NO = jsondata.get("TEMP_GL_NO") == null ? "" : jsondata.get("TEMP_GL_NO").toString();
				String V_REMARK = jsondata.get("REMARK") == null ? "" : jsondata.get("REMARK").toString();
				String V_COL_TYPE = jsondata.get("COL_TYPE") == null ? "" : jsondata.get("COL_TYPE").toString();
				String V_COL_AVL_AMT = jsondata.get("COL_AVL_AMT") == null ? "" : jsondata.get("COL_AVL_AMT").toString();
				String V_COL_AMT = jsondata.get("COL_AMT") == null ? "" : jsondata.get("COL_AMT").toString();
				String V_CONT_REMARK = jsondata.get("CONT_REMARK") == null ? "" : jsondata.get("CONT_REMARK").toString();
				String V_CONT_MGM_NO = jsondata.get("CONT_MGM_NO") == null ? "" : jsondata.get("CONT_MGM_NO").toString();
				V_PO_NO = jsondata.get("PO_NO") == null ? "" : jsondata.get("PO_NO").toString();
				 V_PO_SEQ = jsondata.get("PO_SEQ") == null ? "" : jsondata.get("PO_SEQ").toString();
				String V_DEPOSIT_DT = jsondata.get("DEPOSIT_DT") == null ? "" : jsondata.get("DEPOSIT_DT").toString();
					
					if(V_DEPOSIT_DT.length() > 10){
						V_DEPOSIT_DT = V_DEPOSIT_DT.substring(0,10);
					}

				if (V_TYPE.equals("U") || V_TYPE.equals("D")) {
					V_MAST_DB_NO = jsondata.get("MAST_DB_NO") == null ? "" : jsondata.get("MAST_DB_NO").toString();
				}

				cs = conn.prepareCall("call USP_001_M_COL_D_STEEL(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				cs.setString(1, V_TYPE);//V_TYPE
				cs.setString(2, V_COMP_ID);//V_COMP_ID
				cs.setString(3, V_COL_NO);//V_APPROCOL_NO
				cs.setString(4, V_COL_SEQ);//V_COL_SEQ
				cs.setString(5, V_COL_DOC_AMT);//V_COL_DOC_AMT
				cs.setString(6, V_COL_LOC_AMT);//V_COL_LOC_AMT
				cs.setString(7, V_BL_DOC_NO);//V_BL_DOC_NO
				cs.setString(8, "");//V_USE_YN
				cs.setString(9, V_TEMP_GL_NO);//V_TEMP_GL_NO
				cs.setString(10, V_USE_DT);//V_USE_DT
				cs.setString(11, V_USR_ID);//V_USR_ID
				cs.setString(12, V_REMARK);//V_REMARK
				cs.registerOutParameter(13, com.tmax.tibero.TbTypes.CURSOR);
				cs.setString(14, V_MAST_DB_NO);//V_MAST_DB_NO
				cs.setString(15, V_COL_TYPE);//V_COL_TYPE
				cs.setString(16, V_COL_AVL_AMT);//V_COL_AVL_AMT
				cs.setString(17, V_COL_AMT);//V_COL_AMT
				cs.setString(18, V_CONT_REMARK);//V_CONT_REMARK
				cs.setString(19, V_CONT_MGM_NO);//V_CONT_MGM_NO
				cs.setString(20, V_PO_NO);//V_CONT_MGM_NO
				cs.setString(21, V_PO_SEQ);//V_CONT_MGM_NO
				cs.setString(22, V_DEPOSIT_DT);//V_DEPOSIT_DT
				cs.executeQuery();

				response.setContentType("text/plain; charset=UTF-8");
				PrintWriter pw = response.getWriter();
				pw.print("success");
				pw.flush();
				pw.close();
			}

			//담보등록디테일조회
		} else if (V_TYPE.equals("SD")) {

			cs = conn.prepareCall("call USP_001_M_COL_D_STEEL(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			cs.setString(1, V_TYPE);//V_TYPE
			cs.setString(2, V_COMP_ID);//V_COMP_ID
			cs.setString(3, V_COL_NO);//V_APPROCOL_NO
			cs.setString(4, "");//V_COL_SEQ
			cs.setString(5, "");//V_COL_DOC_AMT
			cs.setString(6, "");//V_COL_LOC_AMT
			cs.setString(7, "");//V_BL_DOC_NO
			cs.setString(8, "");//VV_BL_DOC_NO
			cs.setString(9, "");//V_TEMP_GL_NO
			cs.setString(10, "");//V_USE_DT
			cs.setString(11, V_USR_ID);//V_USR_ID
			cs.setString(12, "");//V_REMARK
			cs.registerOutParameter(13, com.tmax.tibero.TbTypes.CURSOR);
			cs.setString(14, V_MAST_DB_NO);//V_MAST_DB_NO
			cs.setString(15, "");//V_MAST_DB_NO
			cs.setString(16, "");//V_MAST_DB_NO
			cs.setString(17, "");//V_MAST_DB_NO
			cs.setString(18, "");//V_CONT_REMARK
			cs.setString(19, "");//V_CONT_MGM_NO
			cs.setString(20, V_PO_NO);//V_CONT_MGM_NO
			cs.setString(21, V_PO_SEQ);//V_CONT_MGM_NO
			cs.setString(22, "");//
			cs.executeQuery();

			rs = (ResultSet) cs.getObject(13);

			while (rs.next()) {
				subObject = new JSONObject();
				subObject.put("MAST_DB_NO", rs.getString("MAST_DB_NO"));
				subObject.put("COL_NO", rs.getString("COL_NO"));
				subObject.put("COL_SEQ", rs.getString("COL_SEQ"));
				subObject.put("ITEM_NM", rs.getString("ITEM_NM"));
				subObject.put("DOC_AMT", rs.getString("DOC_AMT"));
				subObject.put("LOC_AMT", rs.getString("LOC_AMT"));
				subObject.put("COL_TYPE", rs.getString("COL_TYPE"));
				subObject.put("COL_AVL_AMT", rs.getString("COL_AVL_AMT"));
				subObject.put("COL_AMT", rs.getString("COL_AMT"));
				subObject.put("PO_NO", rs.getString("PO_NO"));
				subObject.put("PO_SEQ", rs.getString("PO_SEQ"));
				subObject.put("DEPOSIT_DT", rs.getString("DEPOSIT_DT"));

				jsonArray.add(subObject);
			}

			jsonObject.put("success", true);
			jsonObject.put("resultList", jsonArray);

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(jsonObject);
			pw.flush();
			pw.close();

		} else if (V_TYPE.equals("BN")) {

			cs = conn.prepareCall("call USP_001_M_COL_H_STEEL(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			cs.setString(1, V_TYPE);//V_TYPE
			cs.setString(2, V_COMP_ID);//V_COMP_ID
			cs.setString(3, "");//V_BS_DT_FR
			cs.setString(4, "");//V_BS_DT_TO
			cs.setString(5, V_COL_NO);//V_COL_NO
			cs.setString(6, "");//V_COL_DT
			cs.setString(7, "");//V_COL_AVL_AMT
			cs.setString(8, "");//V_COL_TYPE
			cs.setString(9, "");//V_M_BP_CD
			cs.setString(10, V_PO_NO);//V_PO_NO
			cs.setString(11, "");//V_APPROV_NO
			cs.setString(12, "");//V_REF_COL_NO
			cs.setString(13, "");//V_COL_MGM_NO
			cs.setString(14, "");//V_COL_TITLE
			cs.setString(15, "");//V_COL_TOT_AMT
			cs.setString(16, "");//V_S_BP_CD
			cs.setString(17, "");//V_COL_NON_AMT
			cs.setString(18, V_USR_ID);//V_USR_ID
			cs.registerOutParameter(19, com.tmax.tibero.TbTypes.CURSOR);
			cs.executeQuery();

			rs = (ResultSet) cs.getObject(19);

			while (rs.next()) {
				subObject = new JSONObject();
				subObject.put("DTL_CD", rs.getString("DTL_CD"));
				subObject.put("DTL_NM", rs.getString("DTL_NM"));
				subObject.put("LOAN_RT", rs.getString("LOAN_RT"));
				jsonArray.add(subObject);
			}

			jsonObject.put("success", true);
			jsonObject.put("resultList", jsonArray);

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(jsonObject);
			pw.flush();
			pw.close();

		} else if (V_TYPE.equals("ERP_DB")) {

			String V_APPROV_NO = request.getParameter("V_APPROV_NO") == null ? "" : request.getParameter("V_APPROV_NO").toUpperCase();
			String V_S_BP_CD = request.getParameter("V_S_BP_CD") == null ? "" : request.getParameter("V_S_BP_CD").toUpperCase();
			String V_DATE = request.getParameter("V_DATE") == null ? "" : request.getParameter("V_DATE").substring(0, 10);

			e_cs = e_conn.prepareCall("{call USP_HSPF_DB_SELECT(?,?)}");
			e_cs.setString(1, V_S_BP_CD);
			e_cs.setString(2, V_DATE);

			e_rs = e_cs.executeQuery();

			if (e_rs.next()) {
				subObject = new JSONObject();
				subObject.put("BP_CD", e_rs.getObject("BP_CD"));
				subObject.put("BP_NM", e_rs.getObject("BP_NM"));
				subObject.put("BO_JAN_AMT", e_rs.getObject("DBB_JAN_AMT")); //보증서
				subObject.put("BU_JAN_AMT", e_rs.getObject("DBD_JAN_AMT")); //부동산

				jsonArray.add(subObject);
			} else {
				subObject = new JSONObject();
				subObject.put("BO_JAN_AMT", 0); //보증서
				subObject.put("BU_JAN_AMT", 0); //부동산

				jsonArray.add(subObject);
			}

			jsonObject.put("success", true);
			jsonObject.put("resultList", jsonArray);
			
// 			System.out.println(jsonObject);

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(jsonObject);
			pw.flush();
			pw.close();

		} else if (V_TYPE.equals("ERP")) {

			String U_TYPE = request.getParameter("U_TYPE") == null ? "" : request.getParameter("U_TYPE").toUpperCase();

// 			System.out.println("U_TYPE" + U_TYPE);
			V_MAST_DB_NO = request.getParameter("V_MAST_DB_NO") == null ? "" : request.getParameter("V_MAST_DB_NO").toUpperCase();
			JSONObject anyObject = new JSONObject();
			JSONArray anyArray = new JSONArray();
			JSONObject anySubObject = new JSONObject();
			URL url = null;
			String result = null;
			String V_TEMP_GL_NO = "";

			/*담보생성/취소*/
			if (U_TYPE.equals("I") || U_TYPE.equals("D")) {
				url = new URL("http://123.142.124.155:8088/http/erp_db_insert");

				anySubObject.put("V_MAST_DB_NO", V_MAST_DB_NO);
				anySubObject.put("V_USR_ID", V_USR_ID);
				anySubObject.put("V_TYPE", U_TYPE);

				/*결의전표생성/취소*/
			} else {
				V_TYPE = U_TYPE.substring(0, 1);

				cs = conn.prepareCall("call USP_001_A_TEMP_DB(?,?,?,?,?)");

				cs.setString(1, V_COMP_ID);//V_COMP_ID
				cs.setString(2, V_TYPE);//V_TYPE
				cs.setString(3, V_MAST_DB_NO);//V_BL_NO
				cs.setString(4, V_USR_ID);//V_BL_SEQ
				cs.registerOutParameter(5, com.tmax.tibero.TbTypes.CURSOR);
				cs.executeQuery();

				rs = (ResultSet) cs.getObject(5);

				if (rs.next()) {
					V_TEMP_GL_NO = rs.getString("V_TEMP_GL_NO");
				}

				// 				System.out.println("V_TEMP_GL_NO" + V_TEMP_GL_NO);
				if (V_TEMP_GL_NO.contains("TG")) {
					if (V_TYPE.equals("I")) { //확정
						url = new URL("http://123.142.124.155:8088/http/hspf_erp_temp_gl_insert");
					} else if (V_TYPE.equals("D")) { //확정취소
						url = new URL("http://123.142.124.155:8088/http/hspf_erp_temp_gl_cancel");
					}

					anySubObject.put("V_TEMP_GL_NO", V_TEMP_GL_NO);
					anySubObject.put("V_USR_ID", V_USR_ID);
					anySubObject.put("V_DB_ID", "sa");
					anySubObject.put("V_DB_PW", "hsnadmin");

					result = V_TEMP_GL_NO;
				}
			}

			URLConnection con = url.openConnection();
			con.setRequestProperty("Accept-Language", "ko-kr,ko;q=0.8,en-us;q=0.5,en;q=0.3");
			con.setDoOutput(true);

			anyArray.add(anySubObject);
			anyObject.put("data", anyArray);
			String parameter = anyObject + "";

			// 			System.out.println(parameter);

			OutputStreamWriter wr = new OutputStreamWriter(con.getOutputStream());
			wr.write(parameter);
			wr.flush();

			BufferedReader rd = null;

			rd = new BufferedReader(new InputStreamReader(con.getInputStream(), "UTF-8"));
			String line = null;
			while ((line = rd.readLine()) != null) {
				result = URLDecoder.decode(line, "UTF-8");
			}

			// 			System.out.println(result);

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(result);
			pw.flush();
			pw.close();

			String sql = "";
			String sql2 = "";
			if (U_TYPE.equals("I_GL")) {

// 				System.out.println("======================================================================");
				sql = "";
				sql += "INSERT                                                                         ";
				sql += "INTO   M_DB_GL_LIST                                                            ";
				sql += "       (                                                                       ";
				sql += "              DB_NO, TEMP_GL_NO, GL_DT, ITEM_LOC_AMT, ITEM_DESC, INSRT_USER_ID, ";
				sql += "              INSRT_DT                                                          ";
				sql += "       )                                                                        ";
				sql += "SELECT REF_NO, TEMP_GL_NO, TEMP_GL_DT, CR_AMT, TEMP_GL_DESC, '" + V_USR_ID + "',  ";
				sql += "       GETDATE()                                                     ";
				sql += "FROM   A_TEMP_GL A                                                   ";
				sql += "       JOIN M_DB_HDR B                                               ";
				sql += "       ON     A.REF_NO = B.DB_NO                                     ";
				sql += "WHERE  REF_NO          = '" + V_MAST_DB_NO + "'                           ";
				sql += "AND    B.DB_TYPE       = 'A'                                         ";

				e_stmt.execute(sql);	

				sql2 += "UPDATE M_DB_HDR SET COLLATERAL_NO = '" + V_TEMP_GL_NO + "' WHERE DB_NO = '" + V_MAST_DB_NO + "'";
				e_stmt.execute(sql2);

// 				System.out.println(sql);
// 				System.out.println(sql2);

			} else if (U_TYPE.equals("D_GL")) {
// 				System.out.println("======================================================================");
				sql += "DELETE FROM M_DB_GL_LIST ";
				sql += " WHERE TEMP_GL_NO =  '" + V_TEMP_GL_NO + "'        ";
				e_stmt.execute(sql);

				sql2 += "UPDATE M_DB_HDR SET COLLATERAL_NO = '' WHERE DB_NO = '" + V_MAST_DB_NO + "'";
				e_stmt.execute(sql2);

// 				System.out.println(sql);
// 				System.out.println(sql2);
			}

		} else if (V_TYPE.equals("ADD_COL_S")) {
			String V_MVMT_NO = request.getParameter("V_MVMT_NO") == null ? "" : request.getParameter("V_MVMT_NO").toUpperCase();
// 			System.out.println("V_MVMT_NO" + V_MVMT_NO);

			cs = conn.prepareCall("call USP_001_M_COL_ADD_REF_STEEL(?,?,?)");
			cs.setString(1, V_COMP_ID);//V_TYPE
			cs.setString(2, V_MVMT_NO);//V_COMP_ID
			cs.registerOutParameter(3, com.tmax.tibero.TbTypes.CURSOR);
			cs.executeQuery();

			rs = (ResultSet) cs.getObject(3);

			while (rs.next()) {
				subObject = new JSONObject();
				subObject.put("COL_TYPE", rs.getString("COL_TYPE"));
				subObject.put("MAST_DB_NO", rs.getString("MAST_DB_NO"));
				subObject.put("COL_NO", rs.getString("COL_NO"));
				subObject.put("OLD_MAST_DB_NO", rs.getString("OLD_MAST_DB_NO"));
				subObject.put("BL_DOC_NO", rs.getString("BL_DOC_NO"));
				subObject.put("CONT_REMARK", rs.getString("CONT_REMARK"));
				jsonArray.add(subObject);
			}

			jsonObject.put("success", true);
			jsonObject.put("resultList", jsonArray);

// 			System.out.println("jsonObject" + jsonObject);

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(jsonObject);
			pw.flush();
			pw.close();

		} else if (V_TYPE.equals("WD_COL")) {
			String V_CUR = request.getParameter("V_CUR") == null ? "" : request.getParameter("V_CUR").toUpperCase();
			String V_CLS_AR_NO = request.getParameter("V_CLS_AR_NO") == null ? "" : request.getParameter("V_CLS_AR_NO").toUpperCase();
			String V_CLS_DT = request.getParameter("V_CLS_DT") == null ? "" : request.getParameter("V_CLS_DT").toString().substring(0, 10);
				
				request.setCharacterEncoding("utf-8");
				String[] findList = { "#", "+", "&", "%", " " };
				String[] replList = { "%23", "%2B", "%26", "%25", "%20" };

				String data = request.getParameter("data");
				data = StringUtils.replaceEach(data, findList, replList);
				String jsonData = URLDecoder.decode(data, "UTF-8");
				
				if (jsonData.lastIndexOf("},{") > 0) { //배열일경우
					JSONArray jsonAr = (JSONArray) JSONValue.parse(jsonData);

					for (int i = 0; i < jsonAr.size(); i++) {
						HashMap hashMap = (HashMap) jsonAr.get(i);
//	 					V_TYPE = hashMap.get("V_TYPE") == null ? "" : hashMap.get("V_TYPE").toString();
						String V_SEQ = hashMap.get("SEQ") == null ? "" : hashMap.get("SEQ").toString();
						String V_BC_NO = hashMap.get("BC_NO") == null ? "" : hashMap.get("BC_NO").toString();
//	 					String V_BC_TYPE = hashMap.get("BC_TYPE") == null ? "" : hashMap.get("BC_TYPE").toString();
						String V_AR_NO = hashMap.get("AR_NO") == null ? "" : hashMap.get("AR_NO").toString();
						String V_CLS_IN_AMT = hashMap.get("COL_AMT") == null ? "" : hashMap.get("COL_AMT").toString();
//	 					String V_CLS_OUT_AMT = hashMap.get("CLS_OUT_AMT") == null ? "" : hashMap.get("CLS_OUT_AMT").toString();
						String V_BAL_IN_AMT = hashMap.get("REMAIN_AMT") == null ? "" : hashMap.get("REMAIN_AMT").toString();
//	 					String V_BAL_OUT_AMT = hashMap.get("BAL_OUT_AMT") == null ? "" : hashMap.get("BAL_OUT_AMT").toString();

						cs = conn.prepareCall("call USP_A_BANK_REMAIN_HSPF(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
						cs.setString(1, V_COMP_ID);//V_COMP_ID
						cs.setString(2, V_TYPE);//V_TYPE
						cs.setString(3, V_CLS_AR_NO);//V_CLS_AR_NO
						cs.setString(4, V_BC_NO);//V_BC_NO
						cs.setString(5, "B");//V_BC_TYPE
						cs.setString(6, V_MAST_DB_NO);//V_AR_NO
						cs.setString(7, V_CLS_DT);//V_CLS_DT
						cs.setString(8, V_CUR);//V_CUR
						cs.setString(9, V_CLS_IN_AMT);//V_CLS_IN_AMT
						cs.setString(10, "");//V_CLS_OUT_AMT
						cs.setString(11, V_BAL_IN_AMT);//V_BAL_IN_AMT
						cs.setString(12, "");//V_BAL_OUT_AMT
						cs.setString(13, V_USR_ID);//V_USR_ID
						cs.setString(14, "");//V_SEQ
						if(!V_BC_NO.equals("")) cs.executeQuery();

						response.setContentType("text/plain; charset=UTF-8");
						PrintWriter pw = response.getWriter();
						pw.print("success");
						pw.flush();
						pw.close();

					}
				} else {
					JSONParser parser = new JSONParser();
					Object obj = parser.parse(jsonData);					
					JSONObject jsondata = (JSONObject) obj;
					
//	 				V_TYPE = jsondata.get("V_TYPE") == null ? "" : jsondata.get("V_TYPE").toString();
					String V_SEQ = jsondata.get("SEQ") == null ? "" : jsondata.get("SEQ").toString();
					String V_BC_NO = jsondata.get("BC_NO") == null ? "" : jsondata.get("BC_NO").toString();
//	 				String V_BC_TYPE = jsondata.get("BC_TYPE") == null ? "" : jsondata.get("BC_TYPE").toString();
					String V_AR_NO = jsondata.get("AR_NO") == null ? "" : jsondata.get("AR_NO").toString();
					String V_CLS_IN_AMT = jsondata.get("COL_AMT") == null ? "" : jsondata.get("COL_AMT").toString();
//	 				String V_CLS_OUT_AMT = jsondata.get("CLS_OUT_AMT") == null ? "" : jsondata.get("CLS_OUT_AMT").toString();
					String V_BAL_IN_AMT = jsondata.get("REMAIN_AMT") == null ? "" : jsondata.get("REMAIN_AMT").toString();
//	 				String V_BAL_OUT_AMT = jsondata.get("BAL_OUT_AMT") == null ? "" : jsondata.get("BAL_OUT_AMT").toString();

					cs = conn.prepareCall("call USP_A_BANK_REMAIN_HSPF(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
					cs.setString(1, V_COMP_ID);//V_COMP_ID
					cs.setString(2, V_TYPE);//V_TYPE
					cs.setString(3, V_CLS_AR_NO);//V_CLS_AR_NO
					cs.setString(4, V_BC_NO);//V_BC_NO
					cs.setString(5, "B");//V_BC_TYPE
					cs.setString(6, V_MAST_DB_NO);//V_AR_NO
					cs.setString(7, V_CLS_DT);//V_CLS_DT
					cs.setString(8, V_CUR);//V_CUR
					cs.setString(9, V_CLS_IN_AMT);//V_CLS_IN_AMT
					cs.setString(10, "");//V_CLS_OUT_AMT
					cs.setString(11, V_BAL_IN_AMT);//V_BAL_IN_AMT
					cs.setString(12, "");//V_BAL_OUT_AMT
					cs.setString(13, V_USR_ID);//V_USR_ID
					cs.setString(14, "");//V_SEQ
					cs.executeQuery();

					response.setContentType("text/plain; charset=UTF-8");
					PrintWriter pw = response.getWriter();
					pw.print("success");
					pw.flush();
					pw.close();

				}
			}

	} catch (

	Exception e) {
		response.setContentType("text/plain; charset=UTF-8");
		PrintWriter pw = response.getWriter();
		pw.print(e.toString());
		pw.flush();
		pw.close();

		e.printStackTrace();
	} finally {
		if (cs != null) try {
			cs.close();
		} catch (SQLException ex) {}
		if (rs != null) try {
			rs.close();
		} catch (SQLException ex) {}
		if (stmt != null) try {
			stmt.close();
		} catch (SQLException ex) {}
		if (conn != null) try {
			conn.close();
		} catch (SQLException ex) {}

		//MSSQL
		if (e_cs != null) try {
			e_cs.close();
		} catch (SQLException ex) {}
		if (e_rs != null) try {
			e_rs.close();
		} catch (SQLException ex) {}
		if (e_stmt != null) try {
			e_stmt.close();
		} catch (SQLException ex) {}
		if (e_conn != null) try {
			e_conn.close();
		} catch (SQLException ex) {}
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
