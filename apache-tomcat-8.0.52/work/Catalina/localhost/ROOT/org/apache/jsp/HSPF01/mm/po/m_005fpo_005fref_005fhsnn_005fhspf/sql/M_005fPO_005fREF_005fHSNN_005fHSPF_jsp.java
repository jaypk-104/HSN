/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.52
 * Generated at: 2021-03-10 04:40:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.HSPF01.mm.po.m_005fpo_005fref_005fhsnn_005fhspf.sql;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.PrintWriter;
import java.util.HashMap;
import org.json.simple.JSONArray;
import org.json.simple.JSONValue;
import net.sf.json.JSONObject;
import java.net.URLDecoder;
import java.sql.*;
import java.sql.*;
import java.util.Enumeration;
import java.util.Map;
import java.util.TreeMap;
import org.apache.commons.lang.StringUtils;
import java.sql.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

public final class M_005fPO_005fREF_005fHSNN_005fHSPF_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/HSPF01/common/DB_Connection.jsp", Long.valueOf(1551915626000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("javax.naming.InitialContext");
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("javax.naming.NamingException");
    _jspx_imports_classes.add("org.json.simple.JSONArray");
    _jspx_imports_classes.add("java.util.TreeMap");
    _jspx_imports_classes.add("org.json.simple.JSONValue");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("javax.sql.DataSource");
    _jspx_imports_classes.add("net.sf.json.JSONObject");
    _jspx_imports_classes.add("javax.naming.Context");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	Connection conn = null;
	PreparedStatement pstmt = null;
	Statement stmt = null;

	try {
		Context initCtx = new InitialContext();
		Context envCtx = (Context) initCtx.lookup("java:comp/env");
		DataSource dataSource = (DataSource) envCtx.lookup("jdbc/Tibero");
		conn = dataSource.getConnection();
		stmt = conn.createStatement();

	} catch (NamingException e) {

	}

      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("utf-8");
	ResultSet rs = null;
	CallableStatement cs = null;
	try {

		JSONObject jsonObject = new JSONObject();
		JSONArray jsonArray = new JSONArray();
		JSONObject subObject = null;
		String V_TYPE = request.getParameter("V_TYPE").toUpperCase();
		String V_USR_ID = request.getParameter("V_USR_ID") == null ? "" : request.getParameter("V_USR_ID");

		System.out.println("V_TYPE" + V_TYPE);

		if (V_TYPE.equals("S")) {
			String u_na_dt_to = request.getParameter("u_na_dt_to").substring(0, 10);
			String u_na_dt_from = request.getParameter("u_na_dt_from").substring(0, 10);
			String u_dt_to = request.getParameter("u_dt_to").substring(0, 10);
			String u_dt_from = request.getParameter("u_dt_from").substring(0, 10);
			String u_po_no = request.getParameter("u_po_no");
			String poradio = request.getParameter("poradio");

			String V_chk_AA = request.getParameter("V_chk_AA");
			String V_chk_AU = request.getParameter("V_chk_AU");
			String V_chk_AM = request.getParameter("V_chk_AM");
			String V_chk_TN = request.getParameter("V_chk_TN");

			String V_PLANT_CD = "";

			cs = conn.prepareCall("call USP_M_PO_REF_HSNN_HSPF(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			cs.setString(1, "S");
			cs.setString(2, u_po_no);
			cs.setString(3, "");
			cs.setString(4, u_na_dt_from);
			cs.setString(5, u_na_dt_to);
			cs.setString(6, u_dt_from);
			cs.setString(7, u_dt_to);
			cs.setString(8, poradio);
			cs.setString(9, V_chk_AA);
			cs.setString(10, V_chk_AU);
			cs.setString(11, V_chk_AM);
			cs.setString(12, V_chk_TN);
			cs.registerOutParameter(13, com.tmax.tibero.TbTypes.CURSOR);
			cs.setString(14, V_USR_ID);
			cs.setString(15, "");
			cs.setString(16, "");

			cs.executeQuery();
			rs = (ResultSet) cs.getObject(13);

			while (rs.next()) {
				subObject = new JSONObject();
				subObject.put("PO_CFM", rs.getString("PO_CFM"));
				subObject.put("PO_YN", rs.getString("PO_YN"));
				subObject.put("PO_NO", rs.getString("PO_NO"));
				subObject.put("PO_SEQ", Integer.parseInt(rs.getString("PO_SEQ")));
				subObject.put("PO_DT", rs.getString("PO_DT").substring(0, 10));
				subObject.put("PLANT_CD", rs.getString("PLANT_CD"));
				subObject.put("BP_ITEM_CD", rs.getString("BP_ITEM_CD"));
				subObject.put("ITEM_CD", rs.getString("ITEM_CD"));
				subObject.put("ITEM_NM", rs.getString("ITEM_NM"));
				subObject.put("SPEC", rs.getString("SPEC"));
				subObject.put("SL_QTY", rs.getFloat("SL_QTY"));
				subObject.put("SL_PRC", rs.getFloat("SL_PRC"));
				subObject.put("SL_AMT", rs.getFloat("SL_AMT"));
				subObject.put("BASE_SL_PRC", rs.getFloat("BASE_SL_PRC"));
				subObject.put("DLV_DT", rs.getString("DLV_DT").substring(0, 10));
				subObject.put("REMARK", rs.getString("REMARK"));
				subObject.put("M_BP_CD", rs.getString("M_BP_CD"));
				subObject.put("M_BP_NM", rs.getString("M_BP_NM"));
				subObject.put("M_PRC", rs.getFloat("M_PRC"));
				subObject.put("PLANT_NM", rs.getString("PLANT_NM"));

				jsonArray.add(subObject);
			}
			jsonObject.put("success", true);
			jsonObject.put("resultList", jsonArray);

// 			System.out.println(jsonObject);

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(jsonObject);
			pw.flush();
			pw.close();
		} else if (V_TYPE.equals("SYNC")) {

			request.setCharacterEncoding("utf-8");

			String[] findList = { "#", "+", "&", "%", " " };
			String[] replList = { "%23", "%2B", "%26", "%25", "%20" };

			String data = request.getParameter("data");
			data = StringUtils.replaceEach(data, findList, replList);
			String jsonData = URLDecoder.decode(data, "UTF-8");

			if (jsonData.lastIndexOf("},{") > 0) { //배열일경우
				JSONArray jsonAr = (JSONArray) JSONValue.parse(jsonData);
				int roop_flag = 0;
				String NEW_PO_NO = "";

				for (int i = 0; i < jsonAr.size(); i++) {
					HashMap hashMap = (HashMap) jsonAr.get(i);
					V_TYPE = hashMap.get("V_TYPE") == null ? "" : hashMap.get("V_TYPE").toString();
					String V_PO_NO = hashMap.get("PO_NO") == null ? "" : hashMap.get("PO_NO").toString();
					String V_PO_SEQ = hashMap.get("PO_SEQ") == null ? "" : hashMap.get("PO_SEQ").toString();
					String V_M_BP_CD = hashMap.get("M_BP_CD") == null ? "" : hashMap.get("M_BP_CD").toString();

					if (V_TYPE.equals("I")) {

						if (roop_flag == 0) {
							cs = conn.prepareCall("call USP_M_PO_REF_HSNN_HSPF(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
							cs.setString(1, "IH");
							cs.setString(2, V_PO_NO);
							cs.setString(3, V_PO_SEQ);
							cs.setString(4, "");
							cs.setString(5, "");
							cs.setString(6, "");
							cs.setString(7, "");
							cs.setString(8, "");
							cs.setString(9, "");
							cs.setString(10, "");
							cs.setString(11, "");
							cs.setString(12, "");
							cs.registerOutParameter(13, com.tmax.tibero.TbTypes.CURSOR);
							cs.setString(14, V_USR_ID);
							cs.setString(15, V_M_BP_CD);
							cs.setString(16, "");
							cs.execute();
							roop_flag++;

							rs = (ResultSet) cs.getObject(13);

							if (rs.next()) {
								NEW_PO_NO = rs.getString("NEW_PO_NO");
							}
						}

						cs = conn.prepareCall("call USP_M_PO_REF_HSNN_HSPF(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
						cs.setString(1, "ID");
						cs.setString(2, V_PO_NO);
						cs.setString(3, V_PO_SEQ);
						cs.setString(4, "");
						cs.setString(5, "");
						cs.setString(6, "");
						cs.setString(7, "");
						cs.setString(8, "");
						cs.setString(9, "");
						cs.setString(10, "");
						cs.setString(11, "");
						cs.setString(12, "");
						cs.registerOutParameter(13, com.tmax.tibero.TbTypes.CURSOR);
						cs.setString(14, V_USR_ID);
						cs.setString(15, V_M_BP_CD);
						cs.setString(16, NEW_PO_NO);
						cs.execute();
					}

				}
			} else {

				JSONObject jsondata = JSONObject.fromObject(jsonData);
				V_TYPE = jsondata.get("V_TYPE") == null ? "" : jsondata.get("V_TYPE").toString();
				String V_PO_NO = jsondata.get("PO_NO") == null ? "" : jsondata.get("PO_NO").toString();
				String V_PO_SEQ = jsondata.get("PO_SEQ") == null ? "" : jsondata.get("PO_SEQ").toString();
				String V_M_BP_CD = jsondata.get("M_BP_CD") == null ? "" : jsondata.get("M_BP_CD").toString();

				System.out.println("V_TYPE" + V_TYPE);
				System.out.println("V_PO_NO" + V_PO_NO);
				System.out.println("V_PO_SEQ" + V_PO_SEQ);
				System.out.println("V_M_BP_CD" + V_M_BP_CD);

				String NEW_PO_NO = "";

				if (V_TYPE.equals("I")) {
					cs = conn.prepareCall("call USP_M_PO_REF_HSNN_HSPF(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
					cs.setString(1, "IH");
					cs.setString(2, V_PO_NO);
					cs.setString(3, V_PO_SEQ);
					cs.setString(4, "");
					cs.setString(5, "");
					cs.setString(6, "");
					cs.setString(7, "");
					cs.setString(8, "");
					cs.setString(9, "");
					cs.setString(10, "");
					cs.setString(11, "");
					cs.setString(12, "");
					cs.registerOutParameter(13, com.tmax.tibero.TbTypes.CURSOR);
					cs.setString(14, V_USR_ID);
					cs.setString(15, V_M_BP_CD);
					cs.setString(16, "");
					cs.execute();

					rs = (ResultSet) cs.getObject(13);

					if (rs.next()) {
						NEW_PO_NO = rs.getString("NEW_PO_NO");
					}

					cs = conn.prepareCall("call USP_M_PO_REF_HSNN_HSPF(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
					cs.setString(1, "ID");
					cs.setString(2, V_PO_NO);
					cs.setString(3, V_PO_SEQ);
					cs.setString(4, "");
					cs.setString(5, "");
					cs.setString(6, "");
					cs.setString(7, "");
					cs.setString(8, "");
					cs.setString(9, "");
					cs.setString(10, "");
					cs.setString(11, "");
					cs.setString(12, "");
					cs.registerOutParameter(13, com.tmax.tibero.TbTypes.CURSOR);
					cs.setString(14, V_USR_ID);
					cs.setString(15, V_M_BP_CD);
					cs.setString(16, NEW_PO_NO);
					cs.execute();
				}
			}
		}

	} catch (Exception e) {
		e.printStackTrace();
	} finally {
		if (rs != null) try {
			rs.close();
		} catch (SQLException ex) {}
		if (stmt != null) try {
			stmt.close();
		} catch (SQLException ex) {}
		if (conn != null) try {
			conn.close();
		} catch (SQLException ex) {}
	}

      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
