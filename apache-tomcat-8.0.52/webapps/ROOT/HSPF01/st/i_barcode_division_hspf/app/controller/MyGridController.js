/*
 * File: app/controller/MyGridController.js
 *
 * This file was generated by Sencha Architect version 4.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('I_BARCODE_DIVISION_HSPF.controller.MyGridController', {
    extend: 'Ext.app.Controller',

    stores: [
        'MyStore'
    ],

    control: {
        "#gridAddBtn": {
            click: 'gridAddBtnClick'
        },
        "#gridDelBtn": {
            click: 'gridDelBtnClick'
        },
        "#gridDelBtn1": {
        	click: 'gridDelBtn1Click'
        },
        "#xlsxDown": {
            click: 'xlsxDownClick'
        },
        "#xlsxDown1": {
        	click: 'xlsxDown1Click'
        },
        "#xmlDown": {
            click: 'xmlDownClick'
        },
        "#divBtn": {
            click: 'divBtnClick'
        },
        "#gridSaveBtn1": {
        	click: 'gridSaveBtn1Click'
        },
        '#myGrid' : {
			cellclick: 'gridClick'
		},
		'#divCfmBtn' : {
			click: 'divCfmBtnClick'
		},
		'#divBcPrintBtn' : {
			click: 'divBcPrintBtnClick'
		},
		'#gridSaveBtnBtn' : {
			click: 'gridSaveBtnBtnClick'
		},
    },

    gridAddBtnClick: function(button, e, eOpts) {
        //var popup = Ext.create("B_COMP_HSPF.view.WinAddRow");
        //popup.show();
        //Ext.getCmp('rowCount').setValue(1);
    },

    gridDelBtnClick: function(button, e, eOpts) {
        var store = Ext.getStore('MyStore');
            	var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();

            	if(gridRecord.length > 0) {
            		Ext.Msg.confirm('확인','삭제하시겠습니까?', function(button){
            			if(button == 'yes') {
            				for(var i=0; i<gridRecord.length; i++) {
            		    		if(gridRecord[i].data['V_TYPE']=='V') {
            		    			gridRecord[i].data['V_TYPE'] = 'D';
            		    		}
            		    	}
            		    	store.sync({
            					params: {
            						V_USR_ID : 'admin',//parent.Ext.getCmp('GUSER_ID').getValue(),
            					},
            		    		callback: function(records, operation, success) {
            		    			store.reload();
            					}
            		    	});
            			}
            		});
            	}
    },
    
    gridDelBtn1Click: function(button, e, eOpts) {
    	var store = Ext.getStore('MyStore');
    	var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
    	var store1 = Ext.getStore('MyStore1');
    	var gridRecord1 = Ext.getCmp('myGrid1').getSelectionModel().getSelection();
    	
    	if(gridRecord[0].data['DIV_YN'] == 'Y'){
    		Ext.Msg.alert('확인', '이미 확정되어 삭제 불가능합니다.');
    	}
    	else{
    		if(gridRecord1.length > 0) {
        		Ext.Msg.confirm('확인','삭제하시겠습니까?', function(button){
        			if(button == 'yes') {
        				for(var i=0; i<gridRecord1.length; i++) {
        					if(gridRecord1[i].data['V_TYPE']=='V') {
        						gridRecord1[i].set('V_TYPE', 'DD');
        					}
        				}
        				store1.sync({
        					params: {
        						V_TYPE : 'DD',
        						V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
            					V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
        					},
        					callback: function(records, operation, success) {
        						store1.reload();
        					}
        				});
        			}
        		});
        	}
    	}
    	
    },

    xlsxDownClick: function(button, e, eOpts) {
        var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d His');
            	var grid = Ext.getCmp('myGrid');
            	grid.saveDocumentAs({
                    type: 'xlsx',
                    title: 'test', //엑셀내타이틀
                    fileName: currentDate+'.xlsx' //엑셀파일이름
        		});
    },
    xlsxDown1Click: function(button, e, eOpts) {
    	var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d His');
    	var grid = Ext.getCmp('myGrid1');
    	grid.saveDocumentAs({
    		type: 'xlsx',
    		title: 'test', //엑셀내타이틀
    		fileName: currentDate+'.xlsx' //엑셀파일이름
    	});
    },

    xmlDownClick: function(button, e, eOpts) {
        var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d His');
            	var grid = Ext.getCmp('myGrid');
            	grid.saveDocumentAs({
                    type: 'xml',
                    title: 'test', //엑셀내타이틀
                    fileName: currentDate+'.xml' //엑셀파일이름
        		});
    },

    divBtnClick: function(button, e, eOpts) {
        var grid = Ext.getCmp('myGrid');
        var gridRecord = grid.getSelectionModel().getSelection();
        var store1 = Ext.getCmp('myGrid1').getStore();
        if(gridRecord.length >= 1){
//        	Ext.Msg.confirm('확인','분할 하시겠습니까?',
//    			    function(button){
//                	    if(button=='yes') {
//                	    	Ext.Ajax.request({
//                				url:'sql/i_barcode_division_hspf.jsp',
//                				method: 'post',
//                				params: {
//                					V_TYPE: 'DI',
//                					V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
//                					V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
//                					V_LOT_BC_NO: gridRecord[0].data['LOT_BC_NO'],
//                				},
//                				success : function(response) {
//                					store1.load({
//                						params: {
//                						V_TYPE: 'SD',
//                						V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
//                						V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
//                						V_LOT_BC_NO: gridRecord[0].data['LOT_BC_NO'],
//                					},
//                					callback: function(records,operations,success){
//                					}
//                					});
//                				}
//                	        });
//                	    }
//        	});
        	var popup = Ext.create("I_BARCODE_DIVISION_HSPF.view.WinAddRow");
            popup.show();
            Ext.getCmp('rowCount').setValue(1);
        }
        else{
    		Ext.Msg.alert('확인', '목록을 선택하고 버튼을 눌러주세요.');
    	}
    },
    
    gridClick : function(dataview, record, item, index, e) {
    	var grid = Ext.getCmp('myGrid');
        var gridRecord = grid.getSelectionModel().getSelection();
    	var store1 = Ext.getCmp('myGrid1').getStore();
    	store1.load({
			params: {
			V_TYPE: 'SD',
			V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
			V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
			V_LOT_BC_NO: gridRecord[0].data['LOT_BC_NO'],
		},
		callback: function(records,operations,success){
		}
		});
    },
    
    gridSaveBtn1Click: function(button, e, eOpts) {
    	var grid = Ext.getCmp('myGrid');
    	
    	var record = grid.getSelectionModel().getSelection();
    	var store1 = Ext.getStore('MyStore1');
    	var grid1 = Ext.getCmp('myGrid1');
    	grid1.getSelectionModel().selectAll();
    	var record1 = grid1.getSelectionModel().getSelection();
    	if(record[0].data['DIV_YN'] == 'Y'){
    		Ext.Msg.alert('확인', '이미 확정된 품목입니다. 저장할 수 없습니다.');
    	}
    	else{
    		if(record.length >= 1){
        		Ext.Msg.confirm('확인','저장하시겠습니까?',
        			    function(button){
                    	    if(button=='yes') {
                    	    	for( var i = 0 ; i < record1.length ; i ++){
                        			if(record1[i].data['V_TYPE'] == 'V'){
                        				record1[i].set('V_TYPE', 'DU');
                        			}
                        			record1[i].set('CHG_QTY_FLAG', '');
                        		}
                        		store1.sync({
                        			params:{
                        				V_TYPE : 'DU',
                        				V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
                    					V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
                    					
                        			},
                        			callback: function(records,operations,success){
//                        				store1.reload();
                        				Ext.Msg.alert('확인', '저장 완료되었습니다.');
                        				
                        				for( var i = 0 ; i < record1.length ; i ++){
                        					store1.getAt(i).commit();
                                		}
                        				
                        				
                        				grid1.getSelectionModel().deselectAll();
                        				
                    				}
                        		});
                    	    }
        		});
        	}
        	else{
        		Ext.Msg.alert('확인', '저장할 목록을 선택해주세요.');
        	}
    	}
    	
    },
    
    divCfmBtnClick: function(button, e, eOpts) {
    	var grid = Ext.getCmp('myGrid');
    	var grid1 = Ext.getCmp('myGrid1');
    	var store = grid.getStore();
    	var store1 = grid1.getStore();
    	var grid1_all = grid1.getStore().data.items
    	var chg_flag = 0
    	for( var i = 0 ; i < grid1_all.length; i ++){
    		if(grid1_all[i].data['CHG_QTY_FLAG'] == 'T'){
    			chg_flag = 1;
    		}
    			
    	}
    	
    	grid1.getSelectionModel().deselectAll();
    	grid1.getSelectionModel().selectAll();
    	if(chg_flag == 1){
    		Ext.Msg.alert('확인', '수량을 저장하고 진행해주세요.');
    	}
    	else{
    		var record = grid.getSelectionModel().getSelection();
        	var record1 = grid1.getSelectionModel().getSelection();
        	if(record[0].data['DIV_YN'] == 'Y'){
        		Ext.Msg.alert('확인', '이미 확정된 항목입니다.');
        	}
        	else{
//        		grid1.getSelectionModel().selectAll();
        		var empty_flag = 0; // 로트넘버(1), 제조일(2), 유효일(3) 판단 플래그
        		for(var i=0; i<record1.length; i++) {
					if(record1[i].data['LOT_NO']=='' || record1[i].data['LOT_NO']== null) {
						empty_flag = 1;
					}
					if(record1[i].data['MAKE_DT']=='' || record1[i].data['MAKE_DT']== null) {
						empty_flag = 2;
					}
					if(record1[i].data['VALID_DT']=='' || record1[i].data['VALID_DT']== null) {
						empty_flag = 3;
					}
					if (record1[i].data['TO_LOT_QTY']==0 || record1[i].data['TO_LOT_QTY']=='' || record1[i].data['TO_LOT_QTY']==null) {
						empty_flag = 4;
					}
				}
        		var bf_lot_qty = Number(record[0].data['LOT_BC_QTY']);
        		var to_lot_qty = 0;
        		for(var i = 0 ; i < record1.length ; i ++){
        			to_lot_qty += Number(record1[i].data['TO_LOT_QTY']);
        		}
        		
        		bf_lot_qty = Math.round(bf_lot_qty * 100) / 100; // 합계 때리니 소수점 2째자리 이하를 9999999 라고 표현해서 소수점2째자리 반올림 추가.
        		to_lot_qty = Math.round(to_lot_qty * 100) / 100;
        		
        		
        		if(bf_lot_qty != to_lot_qty){
        			Ext.Msg.alert('확인', 'LOT수량이 일치하지 않습니다.<br>다시 확인바랍니다.');
        		}
        		else if (empty_flag == 1){
        			Ext.Msg.alert('확인', '빈 LOT번호가 존재합니다.<br>다시 확인바랍니다.');
        		}
        		else if (empty_flag == 2){
        			Ext.Msg.alert('확인', '빈 제조일이 존재합니다.<br>다시 확인바랍니다.');
        		}
        		else if (empty_flag == 3){
        			Ext.Msg.alert('확인', '빈 유효일이 존재합니다.<br>다시 확인바랍니다.');
        		}
        		else if (empty_flag == 4){
        			Ext.Msg.alert('확인', 'LOT수량을 다시 확인해주세요.');
        		}
        		else{
        			Ext.Msg.confirm('확인','확정하시겠습니까?',
            			    function(button){
                        	    if(button=='yes') {
                        	    	for(var i = 0 ; i < record1.length ; i ++){
                        	    		if( record1[i].data['V_TYPE'] == 'V'){
                        	    			record1[i].set('V_TYPE', 'DC');
                        	    		}
                            		}
                        	    	store1.sync({
                        	    		params:{
                        	    			V_TYPE : 'DC',
                        	    			V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
                        					V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
                        					V_ID_NO : record[0].data['ID_NO']
                        	    		},
                        	    		callback: function(records,operations,success){
                        	    			store.reload();
                            				store1.reload();
                        				}
                        	    	});
                        	    	
                        	    }
        			});
        		}
        	}
    	}
    	
    },
    
    divBcPrintBtnClick: function(button, e, eOpts) {
    	var grid = Ext.getCmp('myGrid');
    	var record = grid.getSelectionModel().getSelection();
    	var grid1 = Ext.getCmp('myGrid1');
    	var record1 = grid1.getSelectionModel().getSelection();
    	if(record.length < 1){
    		Ext.Msg.alert('확인', '항목을 선택해주세요.');
    	}
    	else{
    		if(record[0].data['DIV_YN'] == 'N'){
        		Ext.Msg.alert('확인', '바코드 출력은 분할 확정 이후에 가능합니다.');
        	}
    		else{
    			if(record1.length < 1){
    				Ext.Msg.alert('확인', '아래쪽에서 출력할 항목을 선택해주세요.');
    			}
    			else{
//    				var V_BOX_BC_NO = record1[0].data['TO_BOX_BC_NO'];
//    				var V_LOT_BC_NO = record1[0].data['TO_LOT_BC_NO'];
    				var V_MIX = record1[0].data['TO_BOX_BC_NO'] + record1[0].data['TO_LOT_BC_NO'];
    				for( var i = 1 ; i < record1.length ; i ++){
    	    			if(record1[i].data['V_TYPE'] == 'V'){
    	    				record1[i].set('V_TYPE', 'P');
//    	    				V_BOX_BC_NO += '<>';
//    	    				V_LOT_BC_NO += '<>';
    	    				V_MIX += '<>';
//    	    				V_BOX_BC_NO += record1[i].data['TO_BOX_BC_NO'];
//    	    				V_LOT_BC_NO += record1[i].data['TO_LOT_BC_NO'];
    	    				V_MIX += (record1[i].data['TO_BOX_BC_NO'] + record1[i].data['TO_LOT_BC_NO']);
    	    			}
    	    		}
//    				console.log(V_BOX_BC_NO);
//    				console.log(V_LOT_BC_NO);
//    				console.log(V_MIX);
    				V_MIX = encodeURI(V_MIX);
    				var myWin=new Ext.Window(
    						{
    							title : '분할바코드',
    							html : '<iframe name="xxx" border =0 src="http://123.142.124.170:8080/aireport/on_server/DLVY_BARCODE_DIV.jsp?V_MIX='+V_MIX+'" width="100%" height="100%"></iframe>',
    							width :1000,
    							height:768,
    							modal: true
    						});
    				myWin.show();
    				myWin.setSize(Ext.getBody().getViewSize());
    				myWin.setPagePosition(0, 0);
    			}
    			
    		}
    	}
    	
    }

});
