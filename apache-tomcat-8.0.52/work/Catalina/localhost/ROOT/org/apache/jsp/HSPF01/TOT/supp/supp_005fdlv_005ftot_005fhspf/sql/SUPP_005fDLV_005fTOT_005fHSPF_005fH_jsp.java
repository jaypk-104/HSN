/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.52
 * Generated at: 2021-01-29 04:39:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.HSPF01.TOT.supp.supp_005fdlv_005ftot_005fhspf.sql;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.json.simple.JSONArray;
import org.json.simple.JSONValue;
import net.sf.json.JSONObject;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URLDecoder;
import java.util.HashMap;
import org.apache.commons.lang.StringUtils;
import java.sql.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

public final class SUPP_005fDLV_005fTOT_005fHSPF_005fH_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/HSPF01/common/DB_Connection.jsp", Long.valueOf(1551915626000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("javax.naming.InitialContext");
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("org.json.simple.JSONValue");
    _jspx_imports_classes.add("java.io.StringWriter");
    _jspx_imports_classes.add("javax.sql.DataSource");
    _jspx_imports_classes.add("net.sf.json.JSONObject");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("javax.naming.Context");
    _jspx_imports_classes.add("javax.naming.NamingException");
    _jspx_imports_classes.add("org.json.simple.JSONArray");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	Connection conn = null;
	PreparedStatement pstmt = null;
	Statement stmt = null;

	try {
		Context initCtx = new InitialContext();
		Context envCtx = (Context) initCtx.lookup("java:comp/env");
		DataSource dataSource = (DataSource) envCtx.lookup("jdbc/Tibero");
		conn = dataSource.getConnection();
		stmt = conn.createStatement();

	} catch (NamingException e) {

	}

      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("utf-8");
	ResultSet rs = null;
	CallableStatement cs = null;
	JSONObject jsonObject = new JSONObject();
	JSONArray jsonArray = new JSONArray();
	JSONObject subObject = null;

	try {
		String V_TYPE = request.getParameter("V_TYPE") == null ? "" : request.getParameter("V_TYPE");
		String V_COMP_ID = request.getParameter("V_COMP_ID") == null ? "" : request.getParameter("V_COMP_ID").toUpperCase();
		String V_DLVY_DT_FR = request.getParameter("V_DLVY_DT_FR") == null ? "" : request.getParameter("V_DLVY_DT_FR").substring(0, 10);
		String V_DLVY_DT_TO = request.getParameter("V_DLVY_DT_TO") == null ? "" : request.getParameter("V_DLVY_DT_TO").substring(0, 10);
		String V_PO_NO = request.getParameter("V_PO_NO") == null ? "" : request.getParameter("V_PO_NO").toUpperCase();
		String V_PO_SEQ = request.getParameter("V_PO_SEQ") == null ? "" : request.getParameter("V_PO_SEQ").toUpperCase();
		String V_PO_DT_FR = request.getParameter("V_PO_DT_FR") == null ? "" : request.getParameter("V_PO_DT_FR").substring(0, 10);
		String V_PO_DT_TO = request.getParameter("V_PO_DT_TO") == null ? "" : request.getParameter("V_PO_DT_TO").substring(0, 10);
		String V_BP_CD = request.getParameter("V_BP_CD") == null ? "" : request.getParameter("V_BP_CD").toUpperCase();
		String V_DLVY_AVL_DT = request.getParameter("V_DLVY_AVL_DT") == null ? "" : request.getParameter("V_DLVY_AVL_DT").substring(0, 10);
		String V_DLVY_AVL_QTY = request.getParameter("V_DLVY_AVL_QTY") == null ? "" : request.getParameter("V_DLVY_AVL_QTY").substring(0, 10);
		String V_USR_ID = request.getParameter("V_USR_ID") == null ? "" : request.getParameter("V_USR_ID").toUpperCase();
		String V_ITEM_CD = request.getParameter("V_ITEM_CD") == null ? "" : request.getParameter("V_ITEM_CD").toUpperCase();
		String V_ITEM_NM = request.getParameter("V_ITEM_NM") == null ? "" : request.getParameter("V_ITEM_NM").toUpperCase();
		String V_M_BP_CD = request.getParameter("V_M_BP_CD") == null ? "" : request.getParameter("V_M_BP_CD").toUpperCase();
		String V_M_BP_NM = request.getParameter("V_M_BP_NM") == null ? "" : request.getParameter("V_M_BP_NM").toUpperCase();

		String V_ASN_NO = request.getParameter("V_ASN_NO") == null ? "" : request.getParameter("V_ASN_NO").toUpperCase();
		String V_ASN_NO_TF = request.getParameter("V_ASN_NO_TF") == null ? "" : request.getParameter("V_ASN_NO_TF").toUpperCase();
		String V_BL_NO = request.getParameter("V_BL_NO") == null ? "" : request.getParameter("V_BL_NO").toUpperCase();

		//납기현황조회[상단HEADER 조회]
		if (V_TYPE.equals("HS")) {
			cs = conn.prepareCall("call USP_003_SUPP_DLV_TOT_HSPF_H(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			cs.setString(1, V_TYPE);//V_TYPE
			cs.setString(2, V_COMP_ID);//V_COMP_ID
			cs.setString(3, V_DLVY_DT_FR);//V_DLVY_DT_FR
			cs.setString(4, V_DLVY_DT_TO);//V_DLVY_DT_TO
			cs.setString(5, V_PO_NO);//V_PO_NO
			cs.setString(6, V_PO_SEQ);//V_PO_SEQ
			cs.setString(7, V_PO_DT_FR);//V_PO_DT_FR
			cs.setString(8, V_PO_DT_TO);//V_PO_DT_TO
			cs.setString(9, V_BP_CD);//V_BP_CD
			cs.setString(10, V_ASN_NO_TF);//V_ASN_NO ( 검색조건 )
			cs.setString(11, V_DLVY_AVL_DT);//V_DLVY_AVL_DT
			cs.setString(12, V_DLVY_AVL_QTY);//V_DLVY_AVL_QTY
			cs.setString(13, V_ITEM_CD);//V_ITEM_CD
			cs.setString(14, V_ITEM_NM);//V_ITEM_NM
			cs.setString(15, V_M_BP_CD);//V_M_BP_CD
			cs.setString(16, V_M_BP_NM);//V_M_BP_NM
			cs.setString(17, V_USR_ID);//V_USR_ID
			cs.setString(18, V_BL_NO);//V_BL_NO
			cs.registerOutParameter(19, com.tmax.tibero.TbTypes.CURSOR);
			cs.setString(20, "");//V_CC_NO
			cs.setString(21, "");//V_CC_SEQ
			cs.setString(22, "");//
			cs.setString(23, "");//
			cs.executeQuery();

			rs = (ResultSet) cs.getObject(19);

			while (rs.next()) {
				subObject = new JSONObject();
				subObject.put("PO_NO", rs.getString("PO_NO"));
				subObject.put("PO_SEQ", rs.getString("PO_SEQ"));
				subObject.put("ITEM_CD", rs.getString("ITEM_CD"));
				subObject.put("ITEM_NM", rs.getString("ITEM_NM"));
				subObject.put("SPEC", rs.getString("SPEC"));
				subObject.put("UNIT", rs.getString("UNIT"));
				subObject.put("PO_DT", rs.getString("PO_DT"));
				subObject.put("DLVY_HOPE_DT", rs.getString("DLVY_HOPE_DT"));
				subObject.put("PO_QTY", rs.getString("PO_QTY"));
				subObject.put("DLVY_AVL_DT", rs.getString("DLVY_AVL_DT"));
				subObject.put("SL_CD", rs.getString("SL_CD"));
				subObject.put("SL_NM", rs.getString("SL_NM"));
				subObject.put("BAR_CD_CNT", rs.getString("BAR_CD_CNT"));
				subObject.put("ASN_NO_QTY", rs.getString("ASN_NO_QTY"));
				subObject.put("DLVY_AVL_QTY", rs.getString("DLVY_AVL_QTY"));
				subObject.put("GR_QTY", rs.getString("GR_QTY"));
				subObject.put("ASN_STS", rs.getString("ASN_STS"));
				subObject.put("ASN_NO", rs.getString("ASN_NO"));
				subObject.put("SUPP_REMARK", rs.getString("SUPP_REMARK"));
				subObject.put("BL_DOC_NO", rs.getString("BL_NO"));
				subObject.put("REMARK", rs.getString("REMARK"));
				subObject.put("SYS_TYPE", rs.getString("SYS_TYPE"));
				subObject.put("CC_NO", rs.getString("CC_NO"));
				subObject.put("CC_SEQ", rs.getString("CC_SEQ"));
				subObject.put("REAL_SL_NM", rs.getString("REAL_SL_NM"));
				subObject.put("BL_NO2", rs.getString("BL_NO2"));
				subObject.put("BL_SEQ2", rs.getString("BL_SEQ2"));
				subObject.put("DN_QTY", rs.getString("DN_QTY"));
				subObject.put("M_BP_NM", rs.getString("M_BP_NM"));
				subObject.put("PLANT", rs.getString("PLANT"));
				subObject.put("CLS_YN", rs.getString("CLS_YN"));
				jsonArray.add(subObject);

			}

			jsonObject.put("success", true);
			jsonObject.put("resultList", jsonArray);

			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(jsonObject);
			pw.flush();
			pw.close();

		}

		//납기현황조회[하단DETAIL 조회]
		else if (V_TYPE.equals("DS")) {
			cs = conn.prepareCall("call USP_003_SUPP_DLV_TOT_HSPF_H(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			cs.setString(1, V_TYPE);//V_TYPE
			cs.setString(2, V_COMP_ID);//V_COMP_ID
			cs.setString(3, V_DLVY_DT_FR);//V_DLVY_DT_FR
			cs.setString(4, V_DLVY_DT_TO);//V_DLVY_DT_TO
			cs.setString(5, V_PO_NO);//V_PO_NO
			cs.setString(6, V_PO_SEQ);//V_PO_SEQ
			cs.setString(7, V_PO_DT_FR);//V_PO_DT_FR
			cs.setString(8, V_PO_DT_TO);//V_PO_DT_TO
			cs.setString(9, V_BP_CD);//V_BP_CD
			cs.setString(10, V_ASN_NO);//V_ASN_NO
			cs.setString(11, V_DLVY_AVL_DT);//V_DLVY_AVL_DT
			cs.setString(12, V_DLVY_AVL_QTY);//V_DLVY_AVL_QTY
			cs.setString(13, V_ITEM_CD);//V_ITEM_CD
			cs.setString(14, V_ITEM_NM);//V_ITEM_NM
			cs.setString(15, V_M_BP_CD);//V_M_BP_CD
			cs.setString(16, V_M_BP_NM);//V_M_BP_NM
			cs.setString(17, V_USR_ID);//V_USR_ID
			cs.setString(18, "");//V_BL_NO
			cs.registerOutParameter(19, com.tmax.tibero.TbTypes.CURSOR);
			cs.setString(20, "");//V_CC_NO
			cs.setString(21, "");//V_CC_SEQ
			cs.setString(22, "");//
			cs.setString(23, "");//
			cs.executeQuery();

			rs = (ResultSet) cs.getObject(19);

			while (rs.next()) {
				subObject = new JSONObject();

				subObject.put("ASN_NO", rs.getString("ASN_NO"));
				subObject.put("PO_NO", rs.getString("PO_NO"));
				subObject.put("PO_SEQ", rs.getString("PO_SEQ"));
				subObject.put("ITEM_CD", rs.getString("ITEM_CD"));
				subObject.put("ITEM_NM", rs.getString("ITEM_NM"));
				subObject.put("SPEC", rs.getString("SPEC"));
				subObject.put("UNIT", rs.getString("UNIT"));
				subObject.put("ASN_STS", rs.getString("ASN_STS"));
				subObject.put("ASN_STS_NM", rs.getString("ASN_STS_NM"));
				subObject.put("CFM_YN", rs.getString("CFM_YN"));
				subObject.put("PO_QTY", rs.getString("PO_QTY"));
				subObject.put("DLVY_REQ_DT", rs.getString("DLVY_REQ_DT"));
				subObject.put("PO_QTY", rs.getString("PO_QTY"));
				subObject.put("DLVY_AVL_QTY", rs.getString("DLVY_AVL_QTY"));
				subObject.put("DLVY_AVL_DT", rs.getString("DLVY_AVL_DT"));
				subObject.put("SYS_TYPE", rs.getString("SYS_TYPE"));
				jsonArray.add(subObject);

			}

			jsonObject.put("success", true);
			jsonObject.put("resultList", jsonArray);
			
// 			System.out.println(jsonObject);
			response.setContentType("text/plain; charset=UTF-8");
			PrintWriter pw = response.getWriter();
			pw.print(jsonObject);
			pw.flush();
			pw.close();

		}
		//납기현황조회[상단 품목1개 삭제 가능한지 체크]
				else if (V_TYPE.equals("CHECK")) {
					cs = conn.prepareCall("call USP_003_SUPP_DLV_TOT_HSPF_H(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
					cs.setString(1, V_TYPE);//V_TYPE
					cs.setString(2, V_COMP_ID);//V_COMP_ID
					cs.setString(3, "");//V_DLVY_DT_FR
					cs.setString(4, "");//V_DLVY_DT_TO
					cs.setString(5, V_PO_NO);//V_PO_NO
					cs.setString(6, V_PO_SEQ);//V_PO_SEQ
					cs.setString(7, "");//V_PO_DT_FR
					cs.setString(8, "");//V_PO_DT_TO
					cs.setString(9, "");//V_BP_CD
					cs.setString(10, V_ASN_NO);//V_ASN_NO
					cs.setString(11, "");//V_DLVY_AVL_DT
					cs.setString(12, "");//V_DLVY_AVL_QTY
					cs.setString(13, "");//V_ITEM_CD
					cs.setString(14, "");//V_ITEM_NM
					cs.setString(15, "");//V_M_BP_CD
					cs.setString(16, "");//V_M_BP_NM
					cs.setString(17, V_USR_ID);//V_USR_ID
					cs.setString(18, "");//V_BL_NO
					cs.registerOutParameter(19, com.tmax.tibero.TbTypes.CURSOR);
					cs.setString(20, "");//V_CC_NO
					cs.setString(21, "");//V_CC_SEQ
					cs.setString(22, "");//V_CC_NO
					cs.setString(23, "");//V_CC_SEQ
					cs.executeQuery();

					rs = (ResultSet) cs.getObject(19);
					String responseText = "";
					while (rs.next()) {
						subObject = new JSONObject();

						subObject.put("STATUS", rs.getString("STATUS"));
						jsonArray.add(subObject);
						
						responseText = rs.getString("STATUS");

					}

					jsonObject.put("success", true);
					jsonObject.put("resultList", jsonArray);
					
//		 			System.out.println(jsonObject);
					response.setContentType("text/plain; charset=UTF-8");
					PrintWriter pw = response.getWriter();
// 					pw.print(jsonObject);
					pw.print(responseText);
					pw.flush();
					pw.close();

				}
				else if (V_TYPE.equals("D_ITEM")) {
					cs = conn.prepareCall("call USP_003_SUPP_DLV_TOT_HSPF_H(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
					cs.setString(1, V_TYPE);//V_TYPE
					cs.setString(2, V_COMP_ID);//V_COMP_ID
					cs.setString(3, "");//V_DLVY_DT_FR
					cs.setString(4, "");//V_DLVY_DT_TO
					cs.setString(5, V_PO_NO);//V_PO_NO
					cs.setString(6, V_PO_SEQ);//V_PO_SEQ
					cs.setString(7, "");//V_PO_DT_FR
					cs.setString(8, "");//V_PO_DT_TO
					cs.setString(9, "");//V_BP_CD
					cs.setString(10, V_ASN_NO);//V_ASN_NO
					cs.setString(11, "");//V_DLVY_AVL_DT
					cs.setString(12, "");//V_DLVY_AVL_QTY
					cs.setString(13, "");//V_ITEM_CD
					cs.setString(14, "");//V_ITEM_NM
					cs.setString(15, "");//V_M_BP_CD
					cs.setString(16, "");//V_M_BP_NM
					cs.setString(17, V_USR_ID);//V_USR_ID
					cs.setString(18, "");//V_BL_NO
					cs.registerOutParameter(19, com.tmax.tibero.TbTypes.CURSOR);
					cs.setString(20, "");//V_CC_NO
					cs.setString(21, "");//V_CC_SEQ
					cs.setString(22, "");//V_CC_NO
					cs.setString(23, "");//V_CC_SEQ
					cs.executeQuery();

				}
		//납기현황조회[상단HEADER - I(저장)]
		else if (V_TYPE.equals("SYNC")) {
			request.setCharacterEncoding("utf-8");
			String[] findList = { "#", "+", "&", "%", " " };
			String[] replList = { "%23", "%2B", "%26", "%25", "%20" };

			String data = request.getParameter("data");
			data = StringUtils.replaceEach(data, findList, replList);
			String jsonData = URLDecoder.decode(data, "UTF-8");

			if (jsonData.lastIndexOf("},{") > 0) { //배열일경우
				JSONArray jsonAr = (JSONArray) JSONValue.parse(jsonData);

				for (int i = 0; i < jsonAr.size(); i++) {
					HashMap hashMap = (HashMap) jsonAr.get(i);
					V_TYPE = hashMap.get("V_TYPE") == null ? "" : hashMap.get("V_TYPE").toString();
					V_PO_NO = hashMap.get("PO_NO") == null ? "" : hashMap.get("PO_NO").toString();
					V_PO_SEQ = hashMap.get("PO_SEQ") == null ? "" : hashMap.get("PO_SEQ").toString();
					String V_CC_NO = hashMap.get("CC_NO") == null ? "" : hashMap.get("CC_NO").toString();
					String V_CC_SEQ = hashMap.get("CC_SEQ") == null ? "" : hashMap.get("CC_SEQ").toString();
					V_DLVY_AVL_DT = hashMap.get("DLVY_AVL_DT") == null ? "" : hashMap.get("DLVY_AVL_DT").toString().substring(0, 10);
					V_DLVY_AVL_QTY = hashMap.get("DLVY_AVL_QTY") == null ? "" : hashMap.get("DLVY_AVL_QTY").toString();
					String BL_NO2 = hashMap.get("BL_NO2") == null ? "" : hashMap.get("BL_NO2").toString();
					String BL_SEQ2 = hashMap.get("BL_SEQ2") == null ? "" : hashMap.get("BL_SEQ2").toString();
					V_COMP_ID = request.getParameter("V_COMP_ID") == null ? "" : request.getParameter("V_COMP_ID");
					V_USR_ID = request.getParameter("V_USR_ID") == null ? "" : request.getParameter("V_USR_ID");

					//ASN번호 채번
					if (i == 0) {
						cs = conn.prepareCall("call USP_003_SUPP_DLV_TOT_HSPF_H_AUTONUM(?,?,?)");
						cs.setString(1, V_COMP_ID);//V_COMP_ID
						cs.setString(2, V_USR_ID);//V_USR_ID
						cs.registerOutParameter(3, com.tmax.tibero.TbTypes.CURSOR);
						cs.executeQuery();

						rs = (ResultSet) cs.getObject(3);
						while (rs.next()) {
							V_ASN_NO = rs.getString("ASN_NO");
						}
					}
					cs = conn.prepareCall("call USP_003_SUPP_DLV_TOT_HSPF_H(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
					cs.setString(1, V_TYPE);//V_TYPE
					cs.setString(2, V_COMP_ID);//V_COMP_ID
					cs.setString(3, V_DLVY_DT_FR);//V_DLVY_DT_FR
					cs.setString(4, V_DLVY_DT_TO);//V_DLVY_DT_TO
					cs.setString(5, V_PO_NO);//V_PO_NO
					cs.setString(6, V_PO_SEQ);//V_PO_SEQ
					cs.setString(7, V_PO_DT_FR);//V_PO_DT_FR
					cs.setString(8, V_PO_DT_TO);//V_PO_DT_TO
					cs.setString(9, V_BP_CD);//V_BP_CD
					cs.setString(10, V_ASN_NO);//V_ASN_NO
					cs.setString(11, V_DLVY_AVL_DT);//V_DLVY_AVL_DT
					cs.setString(12, V_DLVY_AVL_QTY);//V_DLVY_AVL_QTY
					cs.setString(13, V_ITEM_CD);//V_ITEM_CD
					cs.setString(14, V_ITEM_NM);//V_ITEM_NM
					cs.setString(15, V_M_BP_CD);//V_M_BP_CD
					cs.setString(16, V_M_BP_NM);//V_M_BP_NM
					cs.setString(17, V_USR_ID);//V_USR_ID
					cs.setString(18, "");//V_BL_NO
					cs.registerOutParameter(19, com.tmax.tibero.TbTypes.CURSOR);
					cs.setString(20, V_CC_NO);//V_CC_NO
					cs.setString(21, V_CC_SEQ);//V_CC_SEQ
					cs.setString(22, BL_NO2);//V_CC_NO
					cs.setString(23, BL_SEQ2);//V_CC_SEQ
					cs.executeQuery();

				}

			} else {
				JSONObject jsondata = JSONObject.fromObject(jsonData);

				V_TYPE = jsondata.get("V_TYPE") == null ? "" : jsondata.get("V_TYPE").toString();
				V_PO_NO = jsondata.get("PO_NO") == null ? "" : jsondata.get("PO_NO").toString();
				V_PO_SEQ = jsondata.get("PO_SEQ") == null ? "" : jsondata.get("PO_SEQ").toString();
				String V_CC_NO = jsondata.get("CC_NO") == null ? "" : jsondata.get("CC_NO").toString();
				String V_CC_SEQ = jsondata.get("CC_SEQ") == null ? "" : jsondata.get("CC_SEQ").toString();
				V_DLVY_AVL_DT = jsondata.get("DLVY_AVL_DT") == null ? "" : jsondata.get("DLVY_AVL_DT").toString().substring(0, 10);
				V_DLVY_AVL_QTY = jsondata.get("DLVY_AVL_QTY") == null ? "" : jsondata.get("DLVY_AVL_QTY").toString();
				String BL_NO2 = jsondata.get("BL_NO2") == null ? "" : jsondata.get("BL_NO2").toString();
				String BL_SEQ2 = jsondata.get("BL_SEQ2") == null ? "" : jsondata.get("BL_SEQ2").toString();
				V_COMP_ID = request.getParameter("V_COMP_ID") == null ? "" : request.getParameter("V_COMP_ID");
				V_USR_ID = request.getParameter("V_USR_ID") == null ? "" : request.getParameter("V_USR_ID");

				cs = conn.prepareCall("call USP_003_SUPP_DLV_TOT_HSPF_H_AUTONUM(?,?,?)");
				cs.setString(1, V_COMP_ID);//V_COMP_ID
				cs.setString(2, V_USR_ID);//V_USR_ID
				cs.registerOutParameter(3, com.tmax.tibero.TbTypes.CURSOR);
				cs.executeQuery();

				rs = (ResultSet) cs.getObject(3);
				while (rs.next()) {
					V_ASN_NO = rs.getString("ASN_NO");
				}

				cs = conn.prepareCall("call USP_003_SUPP_DLV_TOT_HSPF_H(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				cs.setString(1, V_TYPE);//V_TYPE
				cs.setString(2, V_COMP_ID);//V_COMP_ID
				cs.setString(3, V_DLVY_DT_FR);//V_DLVY_DT_FR
				cs.setString(4, V_DLVY_DT_TO);//V_DLVY_DT_TO
				cs.setString(5, V_PO_NO);//V_PO_NO
				cs.setString(6, V_PO_SEQ);//V_PO_SEQ
				cs.setString(7, V_PO_DT_FR);//V_PO_DT_FR
				cs.setString(8, V_PO_DT_TO);//V_PO_DT_TO
				cs.setString(9, V_BP_CD);//V_BP_CD
				cs.setString(10, V_ASN_NO);//V_ASN_NO
				cs.setString(11, V_DLVY_AVL_DT);//V_DLVY_AVL_DT
				cs.setString(12, V_DLVY_AVL_QTY);//V_DLVY_AVL_QTY
				cs.setString(13, V_ITEM_CD);//V_ITEM_CD
				cs.setString(14, V_ITEM_NM);//V_ITEM_NM
				cs.setString(15, V_M_BP_CD);//V_M_BP_CD
				cs.setString(16, V_M_BP_NM);//V_M_BP_NM
				cs.setString(17, V_USR_ID);//V_USR_ID
				cs.setString(18, "");//V_BL_NO
				cs.registerOutParameter(19, com.tmax.tibero.TbTypes.CURSOR);
				cs.setString(20, V_CC_NO);//V_CC_NO
				cs.setString(21, V_CC_SEQ);//V_CC_SEQ
				cs.setString(22, BL_NO2);//
				cs.setString(23, BL_SEQ2);//
				cs.executeQuery();

			}
		}
	} catch (Exception e) {
		e.printStackTrace();
	} finally {
		if (cs != null) try {
			cs.close();
		} catch (SQLException ex) {}
		if (rs != null) try {
			rs.close();
		} catch (SQLException ex) {}
		if (stmt != null) try {
			stmt.close();
		} catch (SQLException ex) {}
		if (conn != null) try {
			conn.close();
		} catch (SQLException ex) {}
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
