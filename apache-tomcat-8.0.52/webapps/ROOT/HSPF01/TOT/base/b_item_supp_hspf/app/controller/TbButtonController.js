/*
 * File: app/controller/TbButtonController.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('B_ITEM_SUPP_HSPF.controller.TbButtonController', {
    extend: 'Ext.app.Controller',
    stores: ['MyStore'],
    control: {
        "#selBtn": {
            click: 'selBtnClick'
        },
        "#saveBtn": {
            click: 'saveBtnClick'
        },
        "#delBtn": {
            click: 'delBtnClick'
        },
        "#clsBtn": {
            click: 'clsBtnClick'
        },
        '#V_BP_CD' : { //고객사조회
    		afterrender: 'V_BP_CD_DblClick'
    	},
        "mysearchform textfield[name=search_field]": {
            specialkey: 'tfEnter'
        }
    },

    /* 매입처단가등록 최상단버튼 */
    
    /*[ 조회 ] 버튼*/
    selBtnClick: function(button, e, eOpts) {
    	var store = this.getMyStoreStore();
    	store.removeAll();
    	store.load({
    		params: {
    			V_TYPE: 'S',
    			V_COMP_ID: parent.Ext.getCmp('GCOMP_ID').getValue(),
    			V_USR_ID: parent.Ext.getCmp('GUSER_ID').getValue(),
    			V_ITEM_CD: Ext.getCmp('V_ITEM_CD').getValue(),
    			V_ITEM_NM: Ext.getCmp('V_ITEM_NM').getValue(),
    			V_M_BP_NM: Ext.getCmp('V_M_BP_NM').getValue()
    		},
    		callback: function(records,operations,success){
    		}
    	})
    },

    /*[ 저장 ] 버튼*/
    saveBtnClick: function(button, e, eOpts) {
    	var store = this.getMyStoreStore();
    	var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
    	var msg = '';
    	var flag = '';
    	
    	if(gridRecord.length > 0) {
    		for(var i=0; i<gridRecord.length; i++) {
    			if(gridRecord[i].data['ITEM_CD']==undefined) {
    				flag = 'F';
    				msg = '품목코드를 입력하세요.';
    			}
    			else if(gridRecord[i].data['BP_CD']==undefined) {
    				flag = 'F';
    				msg = '거래처코드를 입력하세요.';
    			}
    			else if(gridRecord[i].data['VALID_DT']==undefined) {
    				flag = 'F';
    				msg = '기준일을 입력하세요.';
    			}
    			else if(gridRecord[i].data['M_PRICE']==undefined) {
    				flag = 'F';
    				msg = '단가를 입력하세요.';
    			}
    			else {
    				flag = 'T';
    			}
    		}
    		
    		if(flag == 'T') {
    			Ext.Msg.confirm('확인','저장하시겠습니까?', function(button){
    				if(button == 'yes') {
    					for(var i=0; i<gridRecord.length; i++) {
    						if (gridRecord[i].data['V_TYPE'] == 'V') {
    							if (gridRecord[i].crudState == 'C') { // 저장
    								gridRecord[i].set('V_TYPE', 'I');
    							} else if (gridRecord[i].crudState == 'U') { // 수정
    								gridRecord[i].set('V_TYPE', 'U');
    							}
    						}
    					}
    					
    					store.sync({
    						params: {
    							V_TYPE: 'SYNC',
    							V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
    							V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
    						},
    						callback: function(records, operation, success) {
    							store.reload();
    							Ext.toast({
									title : ' ',
									timeout : 1000,
									html : '저장완료',
									style : 'text-align: center',
									align : 't',
									width : 130,
								});
    						}
    					});
    				}
    			});
    		} else {
    			Ext.Msg.alert('확인', msg);
    		}
    	}
    },

    /*[ 삭제 ] 버튼*/
    delBtnClick: function(button, e, eOpts) {
        alert('delete');
    },

    /*[ 닫기 ] 버튼*/
    clsBtnClick: function(button, e, eOpts) {
    	var tab=parent.Ext.getCmp('myTab');
        var activeTab=tab.getActiveTab();
        var tabIndex=tab.items.indexOf(activeTab);

        tab.remove(tabIndex,true);
    },

    tfEnter: function(field, e, eOpts) {
        	if (e.getKey() == e.ENTER) {
        		this.selBtnClick();
        	}
    }

});
