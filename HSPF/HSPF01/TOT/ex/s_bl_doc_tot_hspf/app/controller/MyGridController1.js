/*
 * File: app/controller/MyGridController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('S_BL_DOC_TOT_HSPF.controller.MyGridController1', {
	extend : 'Ext.app.Controller',
	stores : [ 'MyStore1' ],
	control : {
		"#gridAddBtn1" : {
			click : 'gridAddBtn1Click'
		},
		"#gridDelBtn1" : {
			click : 'gridDelBtn1Click'
		},
		"#gridSaveBtn1" : {
			click : 'gridSaveBtn1Click'
		},
		"#xlsxDown1" : {
			click : 'xlsxDown1Click'
		}
	},
	
	gridAddBtn1Click : function(button, e, eOpts) {
		if (!!!Ext.getCmp('V_INV_NO').getValue()) {
			Ext.Msg.alert('확인', '인보이스 등록 후 가능합니다.');
			return;
		}
		
		var popup = Ext.create("S_BL_DOC_TOT_HSPF.view.WinAddRow");
		popup.show();
		Ext.getCmp('rowCount').setValue(1);
	},
	
	gridSaveBtn1Click : function(button, e, eOpts) {
		var store1 = Ext.getStore('MyStore1');
		var flag = '';
		var msg = '';
		
		if (!!!Ext.getCmp('V_INV_NO').getValue()) {
			flag = 'F';
			msg = '인보이스 등록 후 가능합니다.';
		} else if (Ext.getCmp('V_CFM_YN').getValue() == 'Y') {
			flag = 'F';
			msg = '확정취소 후 가능합니다.';
		} else {
			flag = 'T';
			
			store1.each(function(rec,idx) {
				if (!!rec.get('INV_NO') && rec.get('V_TYPE') != 'I') {
					rec.set('V_TYPE', 'U');
				}
			});
		}
		
		if (flag == 'T') {
			Ext.Msg.confirm('확인', '저장하시겠습니까?', function(button) {
				if (button == 'yes') {
					store1.sync({ 
						params : {
							V_TYPE : 'SYNC1',
							V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
							V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
							V_INV_NO: Ext.getCmp('V_INV_NO').getValue(),
						},
						callback : function(records, operation, success) {
				    		var tbController = S_BL_DOC_TOT_HSPF.app.getController("TbButtonController");
				    		tbController.selBtnClick();
						}, 
					});
				}
			});
		} else {
			Ext.Msg.alert('확인', msg);
		}
		
	},
	
	gridDelBtn1Click : function(button, e, eOpts) {
		var store1 = Ext.getStore('MyStore1');
		var store2 = Ext.getStore('MyStore2');
		var flag = '';
		var msg = '';
		
		var gridRecord1 = Ext.getCmp('myGrid1').getSelectionModel().getSelection();
		for(var i=0; i<gridRecord1.length; i++) {
			if(gridRecord1[i].get('V_TYPE') == 'I') {
				store1.remove(gridRecord1[i]);
				store2.remove(gridRecord1[i]);
			} else {
				gridRecord1[i].set('V_TYPE', 'D');
				flag = 'T';
			}
		}
		
		if(flag == 'T') {
			Ext.Msg.confirm('확인', '삭제하시겠습니까?', function(button) {
				if (button == 'yes') {
					
					store1.sync({
						params : {
							V_TYPE : 'SYNC2',
							V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
							V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
							V_INV_NO: Ext.getCmp('V_INV_NO').getValue(),
						},
						callback : function(records, operation, success) {
							store1.reload();
							store2.reload();
						}, 
						success: function() {
						}
					});
				}
			});
		}
	},
	
	xlsxDown1Click: function(button, e, eOpts) {
        var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d His');
    	var grid = Ext.getCmp('myGrid1');
    	grid.saveDocumentAs({
            type: 'xlsx',
            title: 'Invoice 내역', //엑셀내타이틀
            fileName: currentDate+'.xlsx' //엑셀파일이름
		});
    }
});
