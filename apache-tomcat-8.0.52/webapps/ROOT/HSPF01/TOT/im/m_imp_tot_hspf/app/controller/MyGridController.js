/*
 * File: app/controller/MyGridController.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('M_IMP_TOT_HSPF.controller.MyGridController', {
	extend : 'Ext.app.Controller',

	stores : [ 'MyStore', 'BlQtyStore', ],

	control : {
		"#gridAddBtn" : {
			click : 'gridAddBtnClick'
		},
		"#gridDelBtn" : {
			click : 'gridDelBtnClick'
		},
		"#gridSearchBtn" : {
			click : 'gridSearchBtnClick'
		},
		"#myGrid" : {
        	cellclick: 'myGridClick'
        },
		"#regLgBtn" : {
			click : 'regLgBtnClick'
		},
		"#regTtBtn" : {
			click : 'regTtBtnClick'
		},
		"#xlsxDown" : {
			click : 'xlsxDownClick'
		},
		"myGrid textfield[name=search_field2]" : {
			specialkey : 'tfEnter2'
		},
	},

	gridAddBtnClick : function(button, e, eOpts) {
		var popup = Ext.create("M_IMP_TOT_HSPF.view.WinAddRow");
		popup.show();
		Ext.getCmp('rowCount').setValue(1);
	},

	gridDelBtnClick : function(button, e, eOpts) {
		var store = Ext.getStore('BlQtyStore');
		var gridRecord = Ext.getCmp('blQtyGrid').getSelectionModel().getSelection();
		var flag = '';
		var msg = '';

		for (var i = 0; i < gridRecord.length; i++) {
			gridRecord[i].set('V_TYPE', 'WD');
			flag = 'T';
		}

		if (flag == 'T') {
			Ext.Msg.confirm('확인', '삭제하시겠습니까?', function(button) {
				if (button == 'yes') {
					store.sync({
						params : {
							V_TYPE : 'WI',
							V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
							V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
							V_PO_NO: Ext.getCmp('W_PO_NO').getValue(),
			    			V_PO_SEQ: Ext.getCmp('W_PO_SEQ').getValue(),
						},
						callback : function(records, operation, success) {
							var res = records.operations[0]._response.responseText;

							if (res.match('Exception')) {
								Ext.Msg.alert('확인', res);
							} else {
								store.reload();
								Ext.toast({
									title : ' ',
									timeout : 1000,
									html : '저장완료',
									style : 'text-align: center',
									align : 't',
									width : 130,
								});
							}
							
						},
						success : function(response) {
						}
					});
				}
			});

		} else {
			Ext.Msg.alert('확인', '선택된 행이 없습니다.');
		}
	},

	gridSearchBtnClick : function(button, e, eOpts) {
		var store = Ext.getStore('MyStore');
		var grid = Ext.getCmp('myGrid');
		//    	var columns = grid.getColumns();
		var selModel = grid.getSelectionModel();
		var success = false;

		var searchValue = Ext.getCmp('V_SEARCH_VALUE').getValue();
		if (!!!searchValue) {
			return;
		} else {
			searchValue = searchValue.toUpperCase();
		}

		var lastSel = selModel.getCurrentPosition();
		var lastSelPos = 0;
		if (!!lastSel) {
			lastSelPos = lastSel.rowIdx + 1;
		}

		for (var i = lastSelPos; i < store.getData().length; i++) {
			var record = grid.getStore().getAt(i);
			var fields = record.getFields();

			for (var j = 0; j < fields.length; j++) {
				var dataIdx = fields[j].name;
				if (!!dataIdx && String(record.get(dataIdx)).indexOf(searchValue) >= 0) {
					selModel.select(i);
					grid.editingPlugin.startEdit(record, 0);

					//					grid.editingPlugin.startEdit(record, j+1)
					//					grid.getView().initFocusable();

					//					var column = grid.getColumnManager().getHeaderAtIndex(j); 
					//					var cellContext = Ext.create('Ext.grid.CellContext',{ view: grid.getView()});
					//					cellContext.setAll(grid.getView(), i, j+1, record, column);
					//					grid.getView().focusCell(cellContext);

					success = true;
					break;
				}
			}

			if (success)
				break;
		}

		if (!success) {
			selModel.deselectAll();
			selModel.clearSelections();
		}
	},
	
	regLgBtnClick : function(button, e, eOpts) {
		var selectedRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();

		if (selectedRecord.length < 1) {
			Ext.Msg.alert('확인', '선택된 행이 없습니다.');
			return;
		} else if (selectedRecord.length > 1) {
			Ext.Msg.alert('확인', '한 건씩 출력 가능합니다.');
			return;
		} else if (!!!selectedRecord[0].get('BL_DOC_NO')) {
			Ext.Msg.alert('확인', 'B/L NO 가 존재하지 않는 행이 선택되었습니다.');
			return;
		} else {
			var popup = Ext.create("M_IMP_TOT_HSPF.view.MyWindow");
			popup.center();
	        popup.show();
	        
	        Ext.getCmp('W_BL_DOC_NO').setValue(selectedRecord[0].get('BL_DOC_NO'));
	        if(selectedRecord[0].get('PAY_METH').substr(0,1) == 'L'){
	        	Ext.getCmp('W_LC_DOC_NO').setValue(selectedRecord[0].get('LC_DOC_NO'));
	        }
	        
	        Ext.Ajax.request({
				url:'sql/M_LG_FORM_TOT_HSPF.jsp',
				method: 'post',
				params: {
	    			V_COMP_ID: parent.Ext.getCmp('GCOMP_ID').getValue(),
	    			V_USR_ID: parent.Ext.getCmp('GUSER_ID').getValue(),
					V_TYPE: 'S', //조회
					V_BL_DOC_NO: Ext.getCmp('W_BL_DOC_NO').getValue(),
				},
				callback : function(records,operations,success){
					
			    },
			    success : function(response) {
			    	var res = Ext.JSON.decode(response.responseText).resultList[0];
			    	
					if(!!res){
						Ext.getCmp('W_BP_NM').setValue(res.BP_NM);
						Ext.getCmp('W_SHPNG_COMPANY').setValue(res.SHPNG_COMPANY);
						Ext.getCmp('W_VESSEL_NM').setValue(res.VESSEL_NM);
						Ext.getCmp('W_VOYAGE_NO').setValue(res.VOYAGE_NO);
						Ext.getCmp('W_LOADING_PORT').setValue(res.LOADING_PORT);
						Ext.getCmp('W_DISCHGE_PORT').setValue(res.DISCHGE_PORT);
						Ext.getCmp('W_PACKAGE_CNT').setValue(res.PACKAGE_CNT);
						Ext.getCmp('W_BANK_CD').setValue(res.BANK_CD);
					}
			    },
				scope: this
			});
		}
	},
	
	regTtBtnClick : function(button, e, eOpts) {
		var store = Ext.getStore('MyStore');
		var selectedRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
		var isBayItem = false;

		if (selectedRecord.length < 1) {
			Ext.Msg.alert('확인', '선택된 행이 없습니다.');
			return;
		} else {
			for(var i=0; i<selectedRecord.length; i++){
				if (!!!selectedRecord[i].get('BL_DOC_NO')) {
					Ext.Msg.alert('확인', 'B/L NO 가 존재하지 않는 행이 선택되었습니다.');
					return;
				} else if (selectedRecord[i].get('PAY_METH').substr(0,1) != 'T') {
					Ext.Msg.alert('확인', '결제조건이 T/T가 아닌 행이 선택되었습니다.');
					return;
				}
				
				if(i > 0) {
					if(isBayItem && selectedRecord[i].get('ITEM_NM').indexOf("BAY") < 0){
						Ext.Msg.alert('확인', 'BAY와 BAY가 아닌 품목이 함께 선택되었습니다.');
						return;
					} else if(!isBayItem && selectedRecord[i].get('ITEM_NM').indexOf("BAY") >= 0){
						Ext.Msg.alert('확인', 'BAY와 BAY가 아닌 품목이 함께 선택되었습니다.');
						return;
					}	
				}
				
				if(selectedRecord[i].get('ITEM_NM').indexOf("BAY") >= 0){
					isBayItem = true;
				} else {
					isBayItem = false;
				}
			}
		}
		
		Ext.Ajax.request({
			url : 'sql/M_IMP_TOT_HSPF.jsp',
			method : 'post',
			params : {
				V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
				V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
				V_TYPE : 'NEW', // 조회
			},
			success : function(response) {
				var V_TT_NO = response.responseText;

				for (var i = 0; i < selectedRecord.length; i++) {
					selectedRecord[i].set('V_TYPE', 'I');
				}

				store.sync({
					params : {
						V_TYPE : 'TT',
						V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
						V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
						V_TT_NO : V_TT_NO,
					},
					callback : function(records, operation, success) {
						var res = records.operations[0]._response.responseText;

						if (res.match('Exception')) {
							Ext.Msg.alert('확인', res);
						} else {
							var url = '';

							// 향후 은행별로 리포트 분기 가능성 있음
							if (parent.Ext.getCmp('MAIN_SERVER_YN').getValue() == 'Y') {
								url = 'http://123.142.124.170:8080/aireport/on_server/M_TT_TOT_HSPF_BNK.jsp?';
							} else {
								url = 'http://123.142.124.170:8080/aireport/on_server/M_TT_TOT_HSPF_BNK.jsp?';
							}

							if (!!V_TT_NO) {
								var params = 'V_TT_NO=' + V_TT_NO;
								url = url + params;

								Ext.Msg.confirm('확인', '외화신청서를 출력하시겠습니까?', function(button) {
									if (button == 'yes') {
										var myWin = new Ext.Window({
											title : '외화신청서',
											html : '<iframe name="xxx" border =0 src="' + url + '" width="100%" height="100%"></iframe>',
											width : 1000,
											height : 768,
											modal : true
										});
										myWin.show();
										myWin.setSize(Ext.getBody().getViewSize());
										myWin.setPagePosition(0, 0);
									}
								});
							}

							for (var i = 0; i < selectedRecord.length; i++) {
								selectedRecord[i].set('V_TYPE', '');
								selectedRecord[i].dirty = false;
							}
						}
					},
				});
			},
			scope : this
		});
		
	},
	
	myGridClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
    	var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
    	var selectedAmt = 0;
    	
    	for(var i in gridRecord){
    		selectedAmt += gridRecord[i].get('DOC_AMT');
    	}
    	
    	Ext.getCmp('V_SELECTED_AMT').setValue(Ext.util.Format.number(selectedAmt, '0,000.0000'));
    },
	
	xlsxDownClick : function(button, e, eOpts) {
		var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d His');
		var grid = Ext.getCmp('myGrid');
		grid.saveDocumentAs({
			type : 'xlsx',
			title : '수입물류현황', //엑셀내타이틀
			fileName : currentDate + '.xlsx' //엑셀파일이름
		});
	},

	tfEnter2 : function(field, e, eOpts) {
		if (e.getKey() == e.ENTER) {
			this.gridSearchBtnClick();
		}
	},

});

