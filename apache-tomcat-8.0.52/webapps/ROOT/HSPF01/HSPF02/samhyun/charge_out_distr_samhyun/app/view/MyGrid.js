/*
 * File: app/view/MyGrid.js
 *
 * This file was generated by Sencha Architect version 4.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('M_CHARGE_OUT_DISTR_SAMHYUN.view.MyGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.myGrid',

    requires: [
        'M_CHARGE_OUT_DISTR_SAMHYUN.view.MyGridViewModel',
        'M_CHARGE_OUT_DISTR_SAMHYUN.view.MyGridViewController',
        'Ext.view.Table',
        'Ext.grid.column.RowNumberer',
        'Ext.form.field.ComboBox',
        'Ext.grid.column.Date',
        'Ext.form.field.Date',
        'Ext.grid.column.Number',
        'Ext.form.field.Number',
        'Ext.grid.plugin.Exporter',
        'Ext.grid.plugin.CellEditing',
        'Ext.grid.feature.Summary',
        'Ext.form.field.Hidden',
        'Ext.selection.CheckboxModel'
    ],

    config: {
        tbar: [
            {
                id: 'gridAddBtn',
                text: '',
                margin: '0 3 0 0',
                glyph: 'xf055@FontAwesome',
                iconCls: 'grid-add-btn',
                
            },
            {
                id: 'gridDelBtn',
                text: '',
                margin: '0 3 0 0',
                glyph: 'xf056@FontAwesome',
                iconCls: 'grid-del-btn',
                
            },
            {
                xtype: 'button',
                text: '비용코드변경',
                id: 'changeChargeBtn'
            },
            {
                xtype: 'container',
                flex: 1
            },
            {
                xtype: 'button',
                glyph: 'xf1c3@FontAwesome',
                id: 'xlsxDown',
                cfg: {
                    type: 'excel07',
                    ext: 'xlsx'
                },
                iconCls: 'grid-excel-btn',
                
            }
        ]
    },

    controller: 'mygrid',
    viewModel: {
        type: 'mygrid'
    },
    id: 'myGrid',
    style: 'border: 1px solid #659DDC; padding: 5px;',
    bodyBorder: false,
    header: false,
    sortableColumns: false,
    store: 'MyStore',
    defaultListenerScope: true,

    viewConfig: {
        enableTextSelection: true
    },
    columns: [
        {
            xtype: 'rownumberer',
            menuDisabled: true
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            text: 'V_TYPE'
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            style: 'font-size: 12px; text-align: center; font-weight: bold;',
            width: 100,
            sortable: false,
            dataIndex: 'M_CHARGE_SEQ',
            enableTextSelection: true,
            menuDisabled: true,
            text: '순번'
        },
        {
            xtype: 'gridcolumn',
            style: 'font-size: 12px; text-align: center; font-weight: bold;',
            width: 70,
            sortable: false,
            dataIndex: 'CHARGE_TYPE',
            enableTextSelection: true,
            menuDisabled: true,
            text: '비용코드'
        },
        {
            xtype: 'gridcolumn',
            style: 'font-size: 12px; text-align: center; font-weight: bold;',
            width: 150,
            sortable: false,
            dataIndex: 'CHARGE_NAME',
            enableTextSelection: true,
            menuDisabled: true,
            text: '비용명'
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                if(Ext.data.StoreManager.lookup('BPStore').findRecord('DTL_CD',value) !==null)
                {
                    return Ext.data.StoreManager.lookup('BPStore').findRecord('DTL_CD',value).get('DTL_NM');
                }
                return value;
            },
            style: 'font-size: 12px; text-align: center; font-weight: bold;',
            width: 150,
            sortable: false,
            dataIndex: 'M_BP_CD',
            enableTextSelection: true,
            menuDisabled: true,
            text: '비용발생처',
            editor: {
                xtype: 'combobox',
                id: 'BP_COMBO',
                style: 'text-align:left',
                displayField: 'DTL_NM',
                enableRegEx: true,
                minChars: 2,
                queryMode: 'local',
                store: 'BPStore',
                valueField: 'DTL_CD',
                listeners: {
                    change: 'onComboboxChange'
                }
            }
        },
        {
            xtype: 'gridcolumn',
            style: 'font-size: 12px; text-align: center; font-weight: bold;',
            width: 150,
            sortable: false,
            dataIndex: 'REG_NO',
            emptyCellText: '<span style=\'color:#A8A8A8\'> 업체 조회가 안되면 입력</span>',
            enableTextSelection: true,
            menuDisabled: true,
            text: '사업자등록번호',
            editor: {
                xtype: 'textfield',
                cls: 'REG_NO_EDIT',
                style: 'text-align:left',
                listeners: {
                    change: 'onTextfieldChange'
                }
            }
        },
        {
            xtype: 'datecolumn',
            style: 'font-size: 12px; text-align: center; font-weight: bold;',
            width: 100,
            sortable: false,
            dataIndex: 'CHARGE_DT',
            enableTextSelection: true,
            menuDisabled: true,
            text: '비용발생일',
            format: 'Y-m-d',
            editor: {
                xtype: 'datefield',
                style: 'text-align:left',
                valuePublishEvent: [
                    'change',
                    'select',
                    'blur'
                ],
                allowBlank: false,
                blankText: '필수 입력사항입니다.',
                format: 'Ymd'
            }
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                if(Ext.data.StoreManager.lookup('taxStore').findRecord('DTL_CD',value) !==null)
                {
                    return Ext.data.StoreManager.lookup('taxStore').findRecord('DTL_CD',value).get('DTL_NM');
                }
                return value;
            },
            style: 'font-size: 12px; text-align: center; font-weight: bold;',
            width: 105,
            sortable: false,
            dataIndex: 'VAT_CD',
            enableTextSelection: true,
            menuDisabled: true,
            text: '부가세유형',
            editor: {
                xtype: 'combobox',
                editable: false,
                displayField: 'DTL_NM',
                store: 'taxStore',
                valueField: 'DTL_CD',
                listeners: {
                    change: 'onComboboxChange1'
                }
            }
        },
        {
            xtype: 'numbercolumn',
            summaryRenderer: function(value, summaryData, dataIndex) {
                /*
                var allRecord = Ext.getCmp('myGrid').getStore().getRange();
                for ( var i = 0 ; i < allRecord.length ; i ++){
                if(allRecord[i].data['VAT_CD'] == 'V02' || allRecord[i].data['VAT_CD'] == 'V03'){
                value = value - allRecord[i].data['CHARGE_AMT'];
                }
                }
                */
                return "<font color='green'>"+Ext.util.Format.number(value, '0,000')+"<font>";
            },
            summaryType: 'sum',
            style: 'font-size: 12px; text-align: center; font-weight: bold;',
            width: 100,
            sortable: false,
            align: 'end',
            dataIndex: 'CHARGE_AMT',
            enableTextSelection: true,
            exportStyle: {
                format: 'Currency',
                alignment: {
                    horizontal: 'Right'
                }
            },
            menuDisabled: true,
            text: '발생금액',
            format: '0,000',
            editor: {
                xtype: 'numberfield',
                style: 'text-align:right',
                allowExponential: false,
                minValue: 0,
                listeners: {
                    change: 'onNumberfieldChange'
                }
            }
        },
        {
            xtype: 'numbercolumn',
            summaryRenderer: function(value, summaryData, dataIndex) {
                return "<font color='green'>"+Ext.util.Format.number(value, '0,000')+"<font>";
            },
            summaryType: 'sum',
            style: 'font-size: 12px; text-align: center; font-weight: bold;',
            width: 100,
            sortable: false,
            align: 'end',
            dataIndex: 'VAT_AMT',
            enableTextSelection: true,
            exportStyle: {
                format: 'Currency',
                alignment: {
                    horizontal: 'Right'
                }
            },
            menuDisabled: true,
            text: '부가세액',
            format: '0,000',
            editor: {
                xtype: 'numberfield',
                style: 'text-align:right',
                allowExponential: false,
                minValue: 0,
                listeners: {
                    change: 'onNumberfieldChange1'
                }
            }
        },
        {
            xtype: 'gridcolumn',
            style: 'font-size: 12px; text-align: center; font-weight: bold;',
            width: 300,
            sortable: true,
            dataIndex: 'REMARK',
            enableTextSelection: true,
            text: '비고',
            editor: {
                xtype: 'textfield',
                style: 'text-align:left'
            }
        }
    ],
    plugins: [
        {
            ptype: 'gridexporter'
        },
        {
            ptype: 'cellediting',
            clicksToEdit: 1,
            listeners: {
                validateedit: 'onCellEditingValidateedit',
                edit: 'onCellEditingEdit'
            }
        }
    ],
    features: [
        {
        	ftype: 'summary',
            dock: 'bottom'
        }
    ],
    dockedItems: [
        {
            xtype: 'hiddenfield',
            dock: 'left',
            id: 'H_RECORD',
            width: 100,
            fieldLabel: 'Label'
        }
    ],
    selModel: {
        selType: 'checkboxmodel',
        listeners: {
            select: 'onCheckboxModelSelect',
            deselect: 'onCheckboxModelDeselect'
        }
    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {
        var store = field.store;
        var record = field.up('editor').context.record;
        var BPrecord = store.findRecord('DTL_CD',newValue);
        if(BPrecord){
            record.set('REG_NO', BPrecord.data['REG_NO']);
        }
    },

    onTextfieldChange: function(field, newValue, oldValue, eOpts) {
        //var store = Ext.getCmp('BP_COMBO').store;
        var store = Ext.getStore('BPStore');
        var record = field.up('editor').context.record;

        var BPrecord = store.findRecord('REG_NO',newValue,0, false, false, true);
        var BPrecord2 = store.findRecord('REG_NO2',newValue,0, false, false, true);
        if(BPrecord){
            record.set('M_BP_CD', BPrecord.data['DTL_CD']);
        }
        if(BPrecord2){
            record.set('M_BP_CD', BPrecord2.data['DTL_CD']);
            record.set('REG_NO', BPrecord2.data['REG_NO']);
        }
    },

    onComboboxChange1: function(field, newValue, oldValue, eOpts) {
        //var record = Ext.getCmp('myGrid').getSelectionModel().getSelection();
        var record = field.up('editor').context.record;

        if(newValue == 'V01'){ //일반세금계산서
            record.set('VAT_AMT', Math.round(Number(record.data['CHARGE_AMT']) / 10));
        }
        else if (newValue == 'V02'){ // 영세율
            record.set('VAT_AMT', 0);
        }
        else if (newValue == 'V04'){ // 종이세금계산서
            record.set('VAT_AMT', Math.round(Number(record.data['CHARGE_AMT']) / 10));
        }
        else if (newValue == 'V05'){ // 경비
            record.set('VAT_AMT', 0);
        }
        else if (newValue == 'V07'){ // 매입세액불공제(B)
            record.set('VAT_AMT', Math.round(Number(record.data['CHARGE_AMT']) / 10));
        }

    },

    onNumberfieldChange: function(field, newValue, oldValue, eOpts) {

        /*
        var record = Ext.getCmp('myGrid').getSelectionModel().getSelection();

        if(record[0].data['VAT_CD'] == 'V01' || record[0].data['VAT_CD'] == 'V04'){ // 일반세금계산서. 종이세금계산서.
            var vat_amt = Math.round(Number(newValue) / 10);
            var vat_amt_old = Math.round(Number(oldValue) / 10);
            record[0].set('VAT_AMT',vat_amt);
            var V_RK_AMT = Number(Ext.getCmp('V_RK_AMT').getValue());
            if(newValue == '' || newValue == null || newValue == undefined  ){
                newValue = 0;
            }
            Ext.getCmp('V_RK_AMT').setValue(V_RK_AMT + newValue - oldValue + vat_amt - vat_amt_old);
        }
        else if(record[0].data['VAT_CD'] == 'V02'){ // 영세율.
            record[0].set('VAT_AMT',0);
        }
        else if(record[0].data['VAT_CD'] == 'V05'){ // 경비.
            record[0].set('VAT_AMT',0);
            var V_RK_AMT = Number(Ext.getCmp('V_RK_AMT').getValue());
            Ext.getCmp('V_RK_AMT').setValue(V_RK_AMT + newValue - oldValue);
        }
        */

        var store = field.store;
        var record = field.up('editor').context.record;
        var V_RK_AMT = Number(Ext.getCmp('V_RK_AMT').getValue());

        if(record.data['VAT_CD'] == 'V01' || record.data['VAT_CD'] == 'V04' || record.data['VAT_CD'] == 'V07'){
            // 일반세금계산서. 종이세금계산서. 매입세액불공제
            var vat_amt = Math.round(Number(newValue) / 10);
            var vat_amt_old = Math.round(Number(oldValue) / 10);
            record.set('VAT_AMT',vat_amt);
            if(newValue == '' || newValue == null || newValue == undefined  ){
                newValue = 0;
            }
            Ext.getCmp('V_RK_AMT').setValue(V_RK_AMT + newValue - oldValue + vat_amt - vat_amt_old);
        }
        else if(record.data['VAT_CD'] == 'V02'){ // 영세율.
            record.set('VAT_AMT',0);
            Ext.getCmp('V_RK_AMT').setValue(V_RK_AMT + newValue - oldValue);
        }
        else if(record.data['VAT_CD'] == 'V05' || record.data['VAT_CD'] == 'V08'){ // 경비.
            record.set('VAT_AMT',0);

            Ext.getCmp('V_RK_AMT').setValue(V_RK_AMT + newValue - oldValue);
        }
        else{
            if(newValue == '' || newValue == null || newValue == undefined  ){
                newValue = 0;
            }
            Ext.getCmp('V_RK_AMT').setValue(V_RK_AMT + newValue - oldValue);
        }

    },

    onNumberfieldChange1: function(field, newValue, oldValue, eOpts) {
        var V_RK_AMT = Number(Ext.getCmp('V_RK_AMT').getValue());
        if(newValue == '' || newValue == null || newValue == undefined  ){
            newValue = 0;
        }
        Ext.getCmp('V_RK_AMT').setValue(V_RK_AMT + newValue - oldValue);
    },

    onCellEditingValidateedit: function(editor, context, eOpts) {
        if(context.value == null && context.field == 'M_BP_CD'){

            var V_RK_AMT = Number(Ext.getCmp('V_RK_AMT').getValue());

            Ext.getCmp('V_RK_AMT').setValue(V_RK_AMT - context.record.data['CHARGE_AMT'] - context.record.data['VAT_AMT']);
            context.record.set('REG_NO','');
            context.record.set('M_BP_CD','');
            context.record.set('VAT_CD','');
            context.record.set('CHARGE_DT','');
            context.record.set('CHARGE_AMT',0);
            context.record.set('VAT_AMT',0);
            context.record.crudState = 'C';
            context.record.crudStateWas = 'C';
            context.record.dirty = false;
            context.record.commit();
        }

    },

    onCellEditingEdit: function(editor, context, eOpts) {



        var record = Ext.getCmp('myGrid').getSelectionModel().getSelection();
        //var store = Ext.getCmp('BP_COMBO').store;
        var store = Ext.getStore('BPStore');

        if(context.field == 'M_BP_CD'){ // 비용발생처 수정
            var BPrecord = store.findRecord('DTL_CD',context.value); //
            if(BPrecord){
                context.record.set('REG_NO',BPrecord.data['REG_NO']);
            }
            context.record.set('CHARGE_DT', Ext.getCmp('V_BASE_DT').getValue());
        }
        else if(context.field== 'REG_NO'){ // 사업자등록번호 수정
            var BPrecord = store.findRecord('REG_NO',context.value,0, false, false, true);
            var BPrecord2 = store.findRecord('REG_NO2',context.value,0, false, false, true);
            if(BPrecord){
                context.record.set('M_BP_CD',BPrecord.data['DTL_CD']);
            }
            if(BPrecord2){
                context.record.set('M_BP_CD',BPrecord2.data['DTL_CD']);
                context.record.set('REG_NO',BPrecord2.data['REG_NO']);
            }
            context.record.set('CHARGE_DT', Ext.getCmp('V_BASE_DT').getValue());
        }
        /*
        else if(context.field== 'CHARGE_DT'){
            var controller = M_CHARGE_OUT_DISTR2.app.getController('MyController');
            var serverTime = controller.getServerTime();
            var nows = new Date(serverTime);
            var lastMonthStart = new Date(nows);
            var lastMonthEnd = new Date(nows);
            var chargeDate = context.value;
            lastMonthStart.setMonth(lastMonthStart.getMonth() - 1);
            lastMonthStart.setDate(1);
            lastMonthEnd.setMonth(lastMonthEnd.getMonth());
            lastMonthEnd.setDate(0);


            if(chargeDate <= lastMonthStart){
                Ext.Msg.alert('확인', '날짜는 지난달 까지만 설정 가능합니다.');
                context.record.set('CHARGE_DT',null);
            }
            else if (nows.getDate() < 10 && chargeDate < lastMonthEnd ){
                Ext.Msg.alert('확인', '비용발생일이 지난달입니다. 주의바랍니다.');
            }
            else if (nows.getDate() >= 10 && chargeDate < lastMonthEnd ){
                Ext.Msg.alert('확인', '비용발생일을 이번달로 설정해주세요.');
                context.record.set('CHARGE_DT',null);
            }
        }
        */
    },

    onCheckboxModelSelect: function(rowmodel, record, index, eOpts) {
        record.set('V_TYPE', 'V');
    },

    onCheckboxModelDeselect: function(rowmodel, record, index, eOpts) {
        record.set('V_TYPE', '');
    }

});