/*
 * File: app/controller/MyGridController.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('V_ALTMT_ITEM_TOT_HSPF.controller.MyGridController', {
    extend: 'Ext.app.Controller',

    stores: [ 'MyStore', 'MyStore1', 'MyStore2' ],

    control: {
        "#gridAddBtn": {
            click: 'gridAddBtnClick'
        },
        "#gridDelBtn": {
            click: 'gridDelBtnClick'
        },
        "#gridSaveBtn": {
            click: 'gridSaveBtnClick'
        },
        
        "#gridAddBtn1": {
            click: 'gridAddBtnClick'
        },
        "#gridDelBtn1": {
            click: 'gridDelBtnClick'
        },
        "#gridSaveBtn1": {
            click: 'gridSaveBtnClick'
        },
        
        "#gridAddBtn2": {
            click: 'gridAddBtnClick'
        },
        "#gridDelBtn2": {
            click: 'gridDelBtnClick'
        },
        "#gridSaveBtn2": {
            click: 'gridSaveBtnClick'
        },
        
        "#loadItemBtn": {
            click: 'loadItemBtnClick'
        },
        "#myGrid" : {
			cellclick : 'myGridClick'
		},
		"#myGrid1" : {
			cellclick : 'myGrid1Click'
		},
		
        "#xlsxDown": {
            click: 'xlsxDownClick'
        },
        "#xlsxDown1": {
            click: 'xlsxDown1Click'
        },
        "#xlsxDown2": {
            click: 'xlsxDown2Click'
        },
    },

    gridAddBtnClick: function(button, e, eOpts) {
        var popup;
        
        if(button.getId() == 'gridAddBtn'){
        	popup = Ext.create("V_ALTMT_ITEM_TOT_HSPF.view.WinAddRow");
        } else if(button.getId() == 'gridAddBtn1'){
        	popup = Ext.create("V_ALTMT_ITEM_TOT_HSPF.view.WinAddRow1");
        } else if(button.getId() == 'gridAddBtn2'){
        	popup = Ext.create("V_ALTMT_ITEM_TOT_HSPF.view.WinAddRow2");
        }
        
        popup.show();
        Ext.getCmp('rowCount').setValue(1);
    },

    gridDelBtnClick: function(button, e, eOpts) {
		var store, gridRecords;
		var flag = '';
		var msg = '';
		
		if(button.getId() == 'gridDelBtn'){
        	store = Ext.getStore('MyStore');
        	gridRecords = Ext.getCmp('myGrid').getSelectionModel().getSelection();
        } else if(button.getId() == 'gridDelBtn1'){
        	store = Ext.getStore('MyStore1');
        	gridRecords = Ext.getCmp('myGrid1').getSelectionModel().getSelection();
        } else if(button.getId() == 'gridDelBtn2'){
        	store = Ext.getStore('MyStore2');
        	gridRecords = Ext.getCmp('myGrid2').getSelectionModel().getSelection();
        }
        
		for(var i=0; i<gridRecords.length; i++) {
			if(gridRecords[i].get('V_TYPE') == 'I') {
				store.remove(gridRecords[i]);
			} else {
				gridRecords[i].set('V_TYPE', 'D');
				flag = 'T';
			}
		}
		
		if(flag == 'T') {
			Ext.Msg.confirm('확인', '삭제하시겠습니까?', function(button) {
				if (button == 'yes') {
					store.sync({
						params : {
							V_TYPE : 'SYNC',
							V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
							V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
//							V_YEAR: Ext.getCmp('V_YEAR').getValue(),
							V_ITEM_CD: Ext.getCmp('V_ITEM_CD').getValue(),
						},
						callback : function(records, operation, success) {
							store.reload();
						}, 
						success: function() {
						}
					});
				}
			});
		}
    },
    
    gridSaveBtnClick: function(button, e, eOpts) {
    	var store;
		var flag = '';
		var msg = '';
		
		if(button.getId() == 'gridSaveBtn'){
        	store = Ext.getStore('MyStore');
        } else if(button.getId() == 'gridSaveBtn1'){
        	store = Ext.getStore('MyStore1');
        } else if(button.getId() == 'gridSaveBtn2'){
        	store = Ext.getStore('MyStore2');
        }
		
//		if (!!!Ext.getCmp('V_YEAR').getValue()) {
//			flag = 'F';
//			msg = '기준년도를 입력하세요.';
//		} else {
			flag = 'T';
			
			store.each(function(rec,idx) {
				if (rec.get('V_TYPE') != 'I' && rec.isDirty()) {
					rec.set('V_TYPE', 'U');
				}
			});
//		}
		
		if (flag == 'T') {
			Ext.Msg.confirm('확인', '저장하시겠습니까?', function(button) {
				if (button == 'yes') {
					store.sync({ 
						params : {
							V_TYPE : 'SYNC',
							V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
							V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
//							V_YEAR: Ext.getCmp('V_YEAR').getValue(),
							V_ITEM_CD: Ext.getCmp('V_ITEM_CD').getValue(),
						},
						callback : function(records, operation, success) {
//				    		var tbController = V_ALTMT_ITEM_TOT_HSPF.app.getController("TbButtonController");
//				    		tbController.selBtnClick();
							store.reload();
						}, 
					});
				}
			});
		} else {
			Ext.Msg.alert('확인', msg);
		}
		
    },
    
    loadItemBtnClick: function(button, e, eOpts) {
    	var flag = '';
		var msg = '';
		
		if (!!!Ext.getCmp('V_YEAR').getValue()) {
			flag = 'F';
			msg = '기준년도를 입력하세요.';
		} else if (!!!Ext.getCmp('V_ITEM_CD').getValue()) {
			flag = 'F';
			msg = 'HSN 품목코드를 입력하세요.';
		} else {
			flag = 'T';
		}
		
		if (flag == 'T') {
			Ext.Msg.confirm('확인', '미등록 ITEM을 불러오시겠습니까?', function(button) {
				if (button == 'yes') {
					Ext.Ajax.request({
						url : 'sql/V_ALTMT_ITEM_MST_TOT_HSPF.jsp',
						method : 'post',
						params : {
							V_TYPE : 'T',
							V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
							V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
//							V_YEAR: Ext.getCmp('V_YEAR').getValue(),
							V_ITEM_CD: Ext.getCmp('V_ITEM_CD').getValue(),
						},
						success : function(response) {
							Ext.toast({
								title : ' ',
								timeout : 1000,
								html : '불러오기 완료',
								style : 'text-align: center',
								align : 't',
								width : 130,
							});
							
							var tbController = V_ALTMT_ITEM_TOT_HSPF.app.getController("TbButtonController");
				    		tbController.selBtnClick();
						}
					});
				}
			});
		} else {
			Ext.Msg.alert('확인', msg);
		}
    	
    },
    
    myGridClick : function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
    	var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection()[0];
    	var store1 = Ext.getStore('MyStore1');
		var store2 = Ext.getStore('MyStore2');
		store1.removeAll();
		store2.removeAll();
		
		if (!!gridRecord.get('ITEM_CD')) {
			store1.load({
				params : {
					V_TYPE : 'S',
					V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
					V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
//					V_YEAR : Ext.getCmp('V_YEAR').getValue(),
					V_ITEM_CD : gridRecord.get('ITEM_CD'),
				},
				callback : function(records, operations, success) {
				}
			});
		}
	},
	
	myGrid1Click : function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
		var targetDataIdx = tableview.eventPosition.column.dataIndex;
		
		if (e.target.type && e.target.type === 'checkbox') {
			var selModel = Ext.getCmp('myGrid1').getSelectionModel();
			var checkVal = e.target.checked ? 'Y' : 'N';

			if (targetDataIdx == 'USE_YN') {
				record.set('USE_YN', checkVal);
			}
			if (targetDataIdx == 'PROD_YN') {
				record.set('PROD_YN', checkVal);
			}

			selModel.select(record, true);
		} else {
			var gridRecord = Ext.getCmp('myGrid1').getSelectionModel().getSelection()[0];
			var store2 = Ext.getStore('MyStore2');
			store2.removeAll();
			
			if (!!gridRecord.get('ITEM_CD')) {
				store2.load({
					params : {
						V_TYPE : 'S',
						V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
						V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
//						V_YEAR : Ext.getCmp('V_YEAR').getValue(),
						V_ITEM_CD : gridRecord.get('ITEM_CD'),
						V_SEQ : gridRecord.get('SEQ'),
					},
					callback : function(records, operations, success) {
					}
				});
			}
		}
		
	},

    xlsxDownClick: function(button, e, eOpts) {
        var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d His');
        var grid = Ext.getCmp('myGrid');
        grid.saveDocumentAs({
            type: 'xlsx',
            title: '대체품마스터', //엑셀내타이틀
            fileName: currentDate+'.xlsx' //엑셀파일이름
        });
    },
    
    xlsxDown1Click: function(button, e, eOpts) {
        var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d His');
        var grid = Ext.getCmp('myGrid1');
        grid.saveDocumentAs({
            type: 'xlsx',
            title: '대체품현황', //엑셀내타이틀
            fileName: currentDate+'.xlsx' //엑셀파일이름
        });
    },
    
    xlsxDown2Click: function(button, e, eOpts) {
        var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d His');
        var grid = Ext.getCmp('myGrid2');
        grid.saveDocumentAs({
            type: 'xlsx',
            title: 'CLAIM현황', //엑셀내타이틀
            fileName: currentDate+'.xlsx' //엑셀파일이름
        });
    },

});
