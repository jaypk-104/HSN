/*
 * File: app/controller/MyGridController1.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Y_PUMS_DISTR.controller.MyGridController1', {
    extend: 'Ext.app.Controller',

    control: {
    	"#W_gridSaveBtn": {
            click: 'W_gridSaveBtnClick'
        },
        "#W_gridDelBtn": {
        	click: 'W_gridDelBtnClick'
        },
    },

    W_gridSaveBtnClick: function(button, e, eOpts) {

    	 var store1 = Ext.getStore('PopStore_w');
    	 var gridRecord = Ext.getCmp('w_grid').getSelectionModel().getSelection();
         
			 	store1.each(function(rec, idx) {
			 		if(rec.phantom == true) {
			 			rec.set('V_TYPE', 'I');
			 		} else if(rec.phantom == false) {
			 			rec.set('V_TYPE', 'U');
			 		}
			 	});
			 	
		    	store1.sync({
					params: {
						V_TYPE : 'SYNC',
						V_TYPE2 : 'S_RT',
						V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
						V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
						V_RISK_NO : Ext.getCmp('V_RISK_NO').getValue(),
						V_BAS_DT : Ext.getCmp('WW_BAS_DT').getValue(),
						V_S_BP_CD : Ext.getCmp('WW_S_BP_CD').getValue(),
						V_S_TYPE : Ext.getCmp('WW_MID_TYPE').getValue(),
					},
		    		callback: function(records, operation, success) {
						var res = records.operations[0]._response.responseText;
						
						if(res.match('Exception')) {
							Ext.Msg.alert('확인', res);
						} else {
							store1.reload();
							
							var tbController = Y_PUMS_DISTR.app.getController("TbButtonController");
							tbController.selBtnClick();
						}
					}
		    	});

    },
    
    W_gridDelBtnClick: function(button, e, eOpts) {
    	
    	var store1 = Ext.getStore('PopStore_w');
   	 	var gridRecord = Ext.getCmp('w_grid').getSelectionModel().getSelection();
        
    	if(gridRecord.length > 0) {
    		for(var i=0; i<gridRecord.length; i++) {
    			if(gridRecord[i].get('V_TYPE') == 'V' && gridRecord[i].phantom == true) {
    				store1.remove(gridRecord[i]);
    			} else if(gridRecord[i].get('V_TYPE') == 'V' && gridRecord[i].phantom == false) {
    				gridRecord[i].set('V_TYPE', 'D');
    			}
    		}
    		store1.sync({
    			params: {
    				V_TYPE : 'SYNC',
    				V_TYPE2 : 'S_RT',
    				V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
    				V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
    				V_RISK_NO : Ext.getCmp('V_RISK_NO').getValue(),
    			},
    			callback: function(records, operation, success) {
    				var res = records.operations[0]._response.responseText;
//    				console.log(res);
    				
    				if(res.match('Exception')) {
    					Ext.Msg.alert('확인', res);
    				} else {
    					store1.reload();
    				}
    			}
    		});
    	}
    	
    },
    
    



});
