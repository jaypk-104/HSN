/*
 * File: app/controller/TbButtonController.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('I_CHNG_MGM.controller.TbButtonController', {
    extend: 'Ext.app.Controller',
    stores: ['MyStore'],
    control: {
        "#selBtn": {
            click: 'selBtnClick'
        },
        "#saveBtn": {
            click: 'saveBtnClick'
        },
        "#delBtn": {
            click: 'delBtnClick'
        },
        "#clsBtn": {
            click: 'clsBtnClick'
        },
        "mysearchform textfield[name=search_field]": {
            specialkey: 'tfEnter'
        }
    },

    selBtnClick: function(button, e, eOpts) {
    	var store = this.getMyStoreStore();
    	store.removeAll();
    	
    	store.load({
    		params: {
    			V_TYPE: 'SH',
    			V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
				V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
				V_GR_DT_FR : Ext.getCmp('V_GR_DT_FR').getValue(),
				V_GR_DT_TO : Ext.getCmp('V_GR_DT_TO').getValue(),
				V_ITEM_CD : Ext.getCmp('V_ITEM_CD').getValue(),
				V_ITEM_NM : Ext.getCmp('V_ITEM_NM').getValue(),
				V_M_BP_NM : Ext.getCmp('V_M_BP_NM').getValue(),
    		},
    		callback: function(records,operations,success){
    		}
    	})
    },

    saveBtnClick: function(button, e, eOpts) {
        var store = Ext.getStore('MyStore');
        var store1 = Ext.getStore('MyStore1');
    	var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
    	var flag = 0; //1이면 오류. 0이면 정상
    	var msg = '';
    	
    	for(var i=0; i<gridRecord.length; i++) {
    		if(gridRecord[i].get('V_TYPE') == 'V') {
    			gridRecord[i].set('V_TYPE', 'IB');
    		}
    		
    		if(gridRecord[i].get('NEW_MOVE_QTY') == undefined || gridRecord[i].get('NEW_MOVE_QTY') == null || gridRecord[i].get('NEW_MOVE_QTY') == '' || gridRecord[i].get('NEW_MOVE_QTY') == 0 ){
    			flag = 1;
    			msg = '이동수량을 입력해주세요.';
    			break;
    		}
    		if(gridRecord[i].get('NEW_MOVE_QTY') > gridRecord[i].get('STOCK_QTY')){
    			flag = 1;
    			msg = '이동수량이 재고수량보다 많습니다.';
    			break;
    		}
    		if(gridRecord[i].get('INSRT_DT') == undefined || gridRecord[i].get('INSRT_DT') == null || gridRecord[i].get('INSRT_DT') == '' ){
    			flag = 1;
    			msg = '재고이동일을 입력해주세요.';
    			break;
    		}
    	}
    	
    	if(flag == 1){
    		Ext.Msg.alert('확인', msg);
    	}
    	else{
    		Ext.Msg.confirm('확인','창고를 이동 하시겠습니까?', function(button){
    			if(button == 'yes') {
    		    	store.sync({
    					params: {
    						V_TYPE: 'SYNC',
    						V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
    						V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
    					},
    		    		callback: function(records, operation, success) {
    		    			store.reload();
    					}
    		    	});
    			}
    		});
    	}
    	
		
    },

    delBtnClick: function(button, e, eOpts) {
        alert('delete');
    },

    clsBtnClick: function(button, e, eOpts) {
        alert('close');
    },

    tfEnter: function(field, e, eOpts) {
        	if (e.getKey() == e.ENTER) {
        		this.selBtnClick();
        	}
    }

});
