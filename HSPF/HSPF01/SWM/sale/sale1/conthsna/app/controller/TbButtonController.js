/*
 * File: app/controller/TbButtonController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ContHsna.controller.TbButtonController', {
    extend: 'Ext.app.Controller',

    stores: [
        'ContHsnaStore',
        'ContHsnaSaveStore',
        'PopStore',
        'ContHsnaStore1',
        'FileStore1',
    ],

    control: {
        "#selBtn": {
            click: 'selBtnClick'
        },
        "#searchBtn1": {
            click: 'searchBtnClick'
        },
        "#contNumBtn": {
            click: 'contNumBtnClick'
        },
        "#saveBtn": {
            click: 'saveBtnClick'
        },
        "#delBtn": {
            click: 'delBtnClick'
        },
        "#cfmYBtn": {
            click: 'CfmYBtnClick'
        },
        "#cfmNBtn": {
            click: 'CfmNBtnClick'
        },
        "#grid1": {
            beforecontainerclick: 'onGridpanelBeforeContainerClick',
            beforecellclick: 'onGridpanelBeforeCellClick',
            itemclick: 'gridClick'
        },
        "#gridW": {
            celldblclick: 'grid1DblClick'
        },
        "#grid2": {
            beforecontainerclick: 'onGridpanelBeforeContainerClick1',
            beforecellclick: 'onGridpanelBeforeCellClick1'
        },
        "mysearchform textfield[name=search_field]": {
            specialkey: 'tfEnter'
        },
        "#attchFileBtn": {
        	click: 'attchFileBtnClick'
        },
        '#fileGrid' : { /*파일다운더블클릭*/
			celldblclick : 'fileGridDblClick',
		},
		'#fileGrid2' : { /*파일다운더블클릭*/
			celldblclick : 'fileGridDblClick2',
		},
		"#fileDelBtn" : { /*파일삭제*/
        	click : 'fileDelBtnClick'
        },
        "#fileDelBtn2" : { /*파일삭제*/
        	click : 'fileDelBtnClick2'
        },
    },

    selBtnClick: function(button, e, eOpts) {
        var store = this.getContHsnaStoreStore();
            	store.load({
            		params: {
            			V_GRID_NO: '1',
            			V_CONT_NO2: Ext.getCmp('u_cont_no2').getValue(), 
            		},
            		callback: function (records, operation, success){

            		},
            		scope: this
            	});
    },

    searchBtnClick: function(button, e, eOpts) {
        	var store = this.getPopStoreStore();
            	store.load({
                  	params: {
                  		u_cont_dt_from: Ext.getCmp('u_cont_dt_from').getValue(),
                  		u_cont_dt_to: Ext.getCmp('u_cont_dt_to').getValue(),
                  		u_cfm: Ext.ComponentQuery.query('[name=u_cfm]')[0].getGroupValue() //라디오버튼
                  	},
                      callback: function (records, operation, success){

                      },
                     scope: this
                   });
    },

    contNumBtnClick: function(button, e, eOpts) {
        		var store = this.getContHsnaStoreStore();
                		var gridObj = Ext.getCmp('grid1');
                		var gridStore = Ext.getCmp('grid1').getStore();
                		var ContHsnaStore = this.getContHsnaStoreStore();
                		var gridRecord = gridObj.getSelectionModel().getSelection(); // selection
                		var flag = 'N';

                		if (Ext.getCmp('u_cont_no').getValue().length == 0) {
                			Ext.Msg.alert('확인', '변경할 컨테이너번호를 입력하세요.');
                		} else {
                			Ext.Msg.confirm("확인","변경하시겠습니까?", function(button) {
                                if(button == 'yes'){
                			for (var i = 0; i < gridRecord.length; i++) {
                				if (gridRecord[i].data['V_TYPE'] == 'V') {
                					if (gridRecord[i].data['CFM_YN'] == 'N') {
                						gridRecord[i].set('V_TYPE', 'U');
                					} else {
                						Ext.Msg.alert('확인', '컨테이너번호를 변경할 수 없습니다. <br> 이미 확정된 컨테이너입니다.');
                						break;
                					}
                				}
                			}

                		ContHsnaStore.sync({
                			params : {
                				V_TYPE : 'SYNCU',// 임시
                				V_CONT_NO : Ext.getCmp('u_cont_no').getValue(),
                				V_CONT_SIZE : Ext.getCmp('U_CONT_SIZE').getValue(),
                				V_CONT_SEAL_NO : Ext.getCmp('U_CONT_SEAL_NO').getValue(),
                				// V_CONT_MGM_NO : gridRecord[i].data['CONT_MGM_NO'],
                				// V_CONT_MGM_NO : Ext.getCmp('CONT_MGM_NO').getValue(),
                				// V_CONT_SEAL_NO: Ext.getCmp('U_CONT_SEAL_NO').getValue(),
                				// V_CONT_SIZE: Ext.getCmp('U_CONT_SIZE').getValue(),
                				V_USER_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
                				// V_BP_CD: Ext.getCmp('u_BP_CD').getValue(),
                				 V_PLANT_CD: Ext.getCmp('U_PLANT').getValue(),
                				// V_CFM_YN: '',
                				V_GBP_CD : parent.Ext.getCmp('GBP_CD').getValue(),
                			},
                			callback : function(response) {
                				store.reload();
                				Ext.getCmp('u_cont_no').setValue('');
                				Ext.getCmp('U_CONT_SEAL_NO').setValue('');
                			},
                			scope : this
                		});
                            }
                                          });
                        }
    },

    saveBtnClick: function(button, e, eOpts) {
        	var saveStore = this.getContHsnaSaveStoreStore();
        		var gridStore = Ext.getCmp('grid1').getStore();
        		if (Ext.getCmp('u_cont_no').getValue() == null || Ext.getCmp('u_cont_no').getValue() == '') {
        			Ext.Msg.alert('확인', '컨테이너 번호를 입력하세요');
        		} else if (Ext.getCmp('U_CONT_SIZE').getValue() == null || Ext.getCmp('U_CONT_SIZE').getValue() == '') {
        			Ext.Msg.alert('확인', '컨테이너 규격을 입력하세요');
        		} 
        		else if (Ext.getCmp('U_CONT_SEAL_NO').getValue() == null || Ext.getCmp('U_CONT_SEAL_NO').getValue() == '') {
        			Ext.Msg.alert('확인', '컨테이너 SEAL NO를 입력하세요');
        		} 
        		else if (Ext.getCmp('U_PLANT').getValue() == null || Ext.getCmp('U_PLANT').getValue() == '') {
        			Ext.Msg.alert('확인', '출고처를 입력하세요');
        		} 
        		else {
        			saveStore.load({// Grid를 안걸들여서 load
        				params : {
        					V_TYPE : 'I',
        					V_CONT_MGM_NO : Ext.getCmp('u_cont_mgm_no').getValue(),
        					V_CONT_NO : Ext.getCmp('u_cont_no').getValue(),
        					V_BP_CD : Ext.getCmp('u_BP_CD').getValue(),
        					V_PLANT_CD : Ext.getCmp('U_PLANT').getValue(),
        					V_CFM_YN : '',
        					V_GBP_CD : parent.Ext.getCmp('GBP_CD').getValue(),
        					V_USER_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
        					V_CONT_SIZE : Ext.getCmp('U_CONT_SIZE').getValue(),
        					V_CONT_SEAL_NO : Ext.getCmp('U_CONT_SEAL_NO').getValue()
        				},
        				callback : function(records, response, success, result) {
        					Ext.Msg.alert('확인', '저장되었습니다.');
        					// gridStore.reload();
        					gridStore.load({
        						params : {
        							V_GRID_NO : '1',
        							V_CONT_NO : Ext.getCmp('u_cont_no').getValue(),
        						},
        						callback : function(records, operation, success) {

        						},
        						scope : this
        					});

        				},
        				success : function() {
        				},
        				scope : this
        			});
        		}
    },

    delBtnClick: function(button, e, eOpts) {
        	var gridObj = Ext.getCmp('grid1');
        		var gridStore = Ext.getCmp('grid1').getStore();
        		var gridRecord = gridObj.getSelectionModel().getSelection();

        		if (gridRecord.length == 0) {
        			Ext.Msg.alert('확인', '삭제할 행을 선택하세요.');
        		} else {
        			Ext.Msg.confirm("확인", "삭제하시겠습니까?", function(button) {
        				if (button == 'yes') {
        					for (var i = 0; i < gridRecord.length; i++) {
        						if (gridRecord[i].data['V_TYPE'] == 'V') {
        							gridRecord[i].set('V_TYPE', 'D');
        						}
        					}

        					gridStore.sync({
        						params : {
        							V_TYPE : 'SYNCU',
        							V_BP_CD : Ext.getCmp('u_BP_CD').getValue(),
        							V_USER_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
        						},
        						callback : function(response) {
        							gridStore.reload();
        							Ext.getCmp('u_cont_no').setValue('');
        						},
        						scope : this

        					});

        				}
        			});
        		}
    },

    CfmYBtnClick: function(button, e, eOpts) {
        		var gridObj = Ext.getCmp('grid1');
        		var gridStore = Ext.getCmp('grid1').getStore();
        		var gridRecord = gridObj.getSelectionModel().getSelection();

        		if (gridRecord.length == 0) {
        			Ext.Msg.alert('확인', '확정할 행을 선택하세요.');
        		} else {
        			Ext.Msg.confirm("확인", "확정하시겠습니까?", function(button) {
        				if (button === "yes") {
        					for (var i = 0; i < gridRecord.length; i++) {
        						if (gridRecord[i].data['V_TYPE'] == 'V') {
        							gridRecord[i].set('V_TYPE', 'C');
        						}
        					}
        					gridStore.sync({
        						params : {
        							V_TYPE : 'SYNCU',
        							V_BP_CD : Ext.getCmp('u_BP_CD').getValue(),
        							V_USER_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
        						},
        						callback : function(response) {
        							gridStore.reload();
        							Ext.getCmp('u_cont_no').setValue('');
        						},
        						scope : this

        					});
        				}
        			});
        		}
    },

    CfmNBtnClick: function(button, e, eOpts) {
        var gridObj = Ext.getCmp('grid1');
        		var gridStore = Ext.getCmp('grid1').getStore();
        		var gridRecord = gridObj.getSelectionModel().getSelection();

        		if (gridRecord.length == 0) {
        			Ext.Msg.alert('확인', '확정취소할 행을 선택하세요.');
        		} else {
        			Ext.Msg.confirm("확인", "확정취소 하시겠습니까?", function(button) {
        				if (button === "yes") {
        					for (var i = 0; i < gridRecord.length; i++) {
        						if (gridRecord[i].data['V_TYPE'] == 'V') {
        							gridRecord[i].set('V_TYPE', 'A');
        						}
        					}
        					gridStore.sync({
        						params : {
        							V_TYPE : 'SYNCU',
        							V_BP_CD : Ext.getCmp('u_BP_CD').getValue(),
        							V_USER_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
        						},
        						callback : function(response) {
        							gridStore.reload();
        							Ext.getCmp('u_cont_no').setValue('');
        						},
        						success : function(response) {
        							if (response.responseText == "ISCONT") {
        								Ext.Msg.alert('확인', '확정 취소할 수 없습니다. 인보이스 내역이 존재합니다. ');
        								i = gridRecord.length;
        							}
        						},
        						scope : this

        					});
        				}
        			});

        		}
    },

    onGridpanelBeforeContainerClick: function(dataview, e, eOpts) {
           Ext.getCmp('selectGrid').setValue("grid1");
    },

    onGridpanelBeforeCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
         Ext.getCmp('selectGrid').setValue("grid1");
    },

    gridClick: function(dataview, record, item, index, e, eOpts) {
        		var gridObj1 = Ext.getCmp('grid1');
            	var gridObj2 = Ext.getCmp('grid2');
            	var grid2Store=this.getContHsnaStore1Store();
            	
            	

            	if(gridObj1 != null) {
            		var gridRecord1 = gridObj1.getSelectionModel().getSelection();

                    Ext.getCmp('u_cont_no').setValue(gridRecord1[0].data['CONT_NO']);
                    Ext.getCmp('U_CONT_SIZE').setValue(gridRecord1[0].data['CONT_SIZE']);
                    Ext.getCmp('U_CONT_SEAL_NO').setValue(gridRecord1[0].data['CONT_SEAL_NO']);
                    Ext.getCmp('V_DN_DT').setValue(gridRecord1[0].data['DN_DT']);
                    Ext.getCmp('U_PLANT').setValue(gridRecord1[0].data['PLANT_CD']);
                    

        			grid2Store.load({
                    	params: {
                    		V_GRID_NO: '2',
                    		V_CONT_NO:  gridRecord1[0].data['CONT_NO'],
                    		V_CONT_MGM_NO1: gridRecord1[0].data['CONT_MGM_NO'],
                    	},
                        callback: function (records, operation, success){
                       },
                       scope: this
                     });
            	}
    },

    grid1DblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {

        var gridObj1 = Ext.getCmp('gridW');
        		var grid1Store=this.getPopStoreStore();
            		var gridRecord1 = gridObj1.getSelectionModel().getSelection();

            		//CLOSE_WINDOW
            		for(var j=0; j<gridRecord1.length; j++) {
            			Ext.getCmp('u_cont_mgm_no').setValue(gridRecord1[j].data['CONT_MGM_NO']);
            			var win = Ext.WindowManager.getActive();
        	    			if (win) {
        	    			win.hide();
        	    			}
            		}
    },

    onGridpanelBeforeContainerClick1: function(dataview, e, eOpts) {
            Ext.getCmp('selectGrid').setValue("grid2");
    },

    onGridpanelBeforeCellClick1: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
          Ext.getCmp('selectGrid').setValue("grid2");
    },

    tfEnter: function(field, e, eOpts) {
        if (e.getKey() == e.ENTER) {
            		this.selBtnClick();
            	}
    },
    
    attchFileBtnClick: function(button, e, eOpts) {
    	var record = Ext.getCmp('grid1').getSelectionModel().getSelection();
    	
    	if(record.length == 1 ){
    		var FileWindow = Ext.create('ContHsna.view.FileWindow');
    		FileWindow.show();
    		Ext.getCmp('W_CONT_NO').setValue(record[0].data['CONT_MGM_NO']);
    		var fileStore1 = this.getStore('FileStore1');
    		var fileStore2 = this.getStore('FileStore2');
    		
    		fileStore1.load({
    			params:{
    				V_TYPE : 'S',
    				V_CONT_NO : record[0].data['CONT_MGM_NO'],
    				V_FILE_TYPE : 'L'
    			}
    		});
    		fileStore2.load({
    			params:{
    				V_TYPE : 'S',
    				V_CONT_NO : record[0].data['CONT_MGM_NO'],
    				V_FILE_TYPE : 'R'
    			}
    		});
    	}
    	else{
    		Ext.Msg.alert('확인', '첨부파일은 좌측에서 행 1개만 선택하고 조회가능합니다.');
    	}
       
    },
    
    fileGridDblClick:  function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
		var gridObj = Ext.getCmp('fileGrid');
		var gridRecord = gridObj.getSelectionModel().getSelection();
		var V_FILE_NM = gridRecord[0].data['FILE_NM'];
		var V_FILE_IN_SYSTEM_NM = gridRecord[0].data['FILE_SYS_NM'];
		V_FILE_NM = encodeURI(V_FILE_NM);
		V_FILE_IN_SYSTEM_NM = encodeURI(V_FILE_IN_SYSTEM_NM);
		var myWin=new Ext.Window(
				{
					title : '파일다운로드',
					html : '<iframe name="xxx" border =0 src="sql/cont_file.jsp?V_TYPE=D&V_FILE_NM='+V_FILE_NM+'&V_FILE_IN_SYSTEM_NM='+V_FILE_IN_SYSTEM_NM+'" width="1%" height="1%"></iframe>',
					width :500,
					height:500
				});
		myWin.show();
		myWin.hide();
	},
	
	 fileGridDblClick2:  function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
			var gridObj = Ext.getCmp('fileGrid2');
			var gridRecord = gridObj.getSelectionModel().getSelection();
			var V_FILE_NM = gridRecord[0].data['FILE_NM'];
			var V_FILE_IN_SYSTEM_NM = gridRecord[0].data['FILE_SYS_NM'];
			V_FILE_NM = encodeURI(V_FILE_NM);
			V_FILE_IN_SYSTEM_NM = encodeURI(V_FILE_IN_SYSTEM_NM);
			var myWin=new Ext.Window(
					{
						title : '파일다운로드',
						html : '<iframe name="xxx" border =0 src="sql/cont_file.jsp?V_TYPE=D&V_FILE_NM='+V_FILE_NM+'&V_FILE_IN_SYSTEM_NM='+V_FILE_IN_SYSTEM_NM+'" width="1%" height="1%"></iframe>',
						width :500,
						height:500
					});
			myWin.show();
			myWin.hide();
		},
		
		fileDelBtnClick: function() {
	    	var fileStore = Ext.getStore('FileStore1');
	    	var gridRecord = Ext.getCmp('fileGrid').getSelectionModel().getSelection();
	    	
	    	if(gridRecord.length > 0) {
	    		Ext.MessageBox.confirm('확인', '삭제하시겠습니까?', function(btn) {
	    			if(btn == 'yes') {
	    				fileStore.sync({
	    					params: {
	    						V_TYPE: 'SYNC',
	    						V_COMP_ID: parent.Ext.getCmp('GCOMP_ID').getValue(),
	    						V_USR_ID: parent.Ext.getCmp('GUSER_ID').getValue(),
	    					},
	    					callback: function(records,operations,success){
	    						fileStore.load({
	    			    			params:{
	    			    				V_TYPE : 'S',
	    			    				V_CONT_NO : Ext.getCmp('W_CONT_NO').getValue(),
	    			    				V_FILE_TYPE : 'L'
	    			    			}
	    			    		});
	    						
								
							}
	    				});
	    			}
	    		})
	    	}
	    	
	    },
	    
	    fileDelBtnClick2: function() {
	    	var fileStore = Ext.getStore('FileStore2');
	    	var gridRecord = Ext.getCmp('fileGrid2').getSelectionModel().getSelection();
	    	
	    	if(gridRecord.length > 0) {
	    		Ext.MessageBox.confirm('확인', '삭제하시겠습니까?', function(btn) {
	    			if(btn == 'yes') {
	    				fileStore.sync({
	    					params: {
	    						V_TYPE: 'SYNC',
	    						V_COMP_ID: parent.Ext.getCmp('GCOMP_ID').getValue(),
	    						V_USR_ID: parent.Ext.getCmp('GUSER_ID').getValue(),
	    					},
	    					callback: function(records,operations,success){
	    						fileStore.load({
	    			    			params:{
	    			    				V_TYPE : 'S',
	    			    				V_CONT_NO : Ext.getCmp('W_CONT_NO').getValue(),
	    			    				V_FILE_TYPE : 'R'
	    			    			}
	    			    		});
	    						
								
							}
	    				});
	    			}
	    		})
	    	}
	    	
	    },

});
