/*
 * File: app/controller/TbButtonController.js
 *
 * This file was generated by Sencha Architect version 4.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CHARGE_BP_REG.controller.TbButtonController', {
    extend: 'Ext.app.Controller',

    stores: [
        'MyStore'
    ],

    control: {
        "#selBtn": {
            click: 'selBtnClick'
        },
        "#saveBtn": {
            click: 'saveBtnClick'
        },
        "#delBtn": {
            click: 'delBtnClick'
        },
        "#clsBtn": {
            click: 'clsBtnClick'
        },
        "mysearchform textfield[name=search_field]": {
            specialkey: 'tfEnter'
        }
    },

    selBtnClick: function(button, e, eOpts) {
        var store = this.getMyStoreStore();
        store.removeAll();
        store.load({
            params: {
                V_TYPE: 'S',
                V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
                V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
                V_MAST_BP_NM : Ext.getCmp('V_MAST_BP_NM').getValue(),
            },
            callback: function(records,operations,success){
            }
        });
    },

    saveBtnClick: function(button, e, eOpts) {
        var store = this.getMyStoreStore();
        var gridRecord = Ext.getCmp('myGrid').getSelectionModel().getSelection();
        var flag = true;
        var msg = '';
        for (var i = 0 ; i < gridRecord.length ; i ++){
            if(gridRecord[i].data['V_TYPE']=='V') {
                gridRecord[i].data['V_TYPE'] = 'I';
            }
            if(gridRecord[i].data['MAST_BP_CD'] == null || gridRecord[i].data['MAST_BP_CD'] == ''){
                flag = false;
                msg = '기준업체코드를 입력해주세요.';
            }
            else if(gridRecord[i].data['SELECT_BP_CD'] == null || gridRecord[i].data['SELECT_BP_CD'] == ''){
                flag = false;
                msg = '조회업체코드를 입력해주세요.';
            }
        }
        if(gridRecord.length >= 1){
            if(flag == true){
                Ext.Msg.confirm('확인', '체크된 항목만 저장됩니다.<br>저장 하시겠습니까?' , function(btn) {
                    if(btn == 'yes') {
                        store.sync({
                            params:{
                                V_TYPE: 'SYNC',
                                V_COMP_ID : parent.Ext.getCmp('GCOMP_ID').getValue(),
                                V_USR_ID : parent.Ext.getCmp('GUSER_ID').getValue(),
                            },
                            callback: function(){
                                store.reload();
                            }
                        });
                    }
                });
            }
            else{
                Ext.Msg.alert('확인', msg);
            }

        }
        else{
            Ext.Msg.alert('확인', '저장할 항목을 선택해주세요');
        }

    },

    delBtnClick: function(button, e, eOpts) {
        alert('delete');
    },

    clsBtnClick: function(button, e, eOpts) {
        var tab=parent.Ext.getCmp('myTab');
        var activeTab=tab.getActiveTab();
        var tabIndex=tab.items.indexOf(activeTab);
        tab.remove(tabIndex,true);
    },

    tfEnter: function(field, e, eOpts) {
        	if (e.getKey() == e.ENTER) {
        		this.selBtnClick();
        	}
    }

});
